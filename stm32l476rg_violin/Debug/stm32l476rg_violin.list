
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800fd78  0800fd78  0001fd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102b8  080102b8  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  080102b8  080102b8  000202b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102c0  080102c0  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102c0  080102c0  000202c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102c4  080102c4  000202c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080102c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001030c  2000011c  080103e4  0003011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010428  080103e4  00030428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003074f  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056e8  00000000  00000000  0006089b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023b0  00000000  00000000  00065f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a8  00000000  00000000  00068338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e0e5  00000000  00000000  0006a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000275f1  00000000  00000000  000985c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118f39  00000000  00000000  000bfbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d8aef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a418  00000000  00000000  001d8b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000011c 	.word	0x2000011c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd5c 	.word	0x0800fd5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000120 	.word	0x20000120
 80001cc:	0800fd5c 	.word	0x0800fd5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b96e 	b.w	8000f40 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468c      	mov	ip, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8083 	bne.w	8000d92 <__udivmoddi4+0x116>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4617      	mov	r7, r2
 8000c90:	d947      	bls.n	8000d22 <__udivmoddi4+0xa6>
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	b142      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c98:	f1c2 0020 	rsb	r0, r2, #32
 8000c9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	4097      	lsls	r7, r2
 8000ca4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb4:	fa1f fe87 	uxth.w	lr, r7
 8000cb8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 8119 	bcs.w	8000f04 <__udivmoddi4+0x288>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8116 	bls.w	8000f04 <__udivmoddi4+0x288>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	443b      	add	r3, r7
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8105 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f240 8102 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b902      	cbnz	r2, 8000d26 <__udivmoddi4+0xaa>
 8000d24:	deff      	udf	#255	; 0xff
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d150      	bne.n	8000dd0 <__udivmoddi4+0x154>
 8000d2e:	1bcb      	subs	r3, r1, r7
 8000d30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	2601      	movs	r6, #1
 8000d3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3e:	0c21      	lsrs	r1, r4, #16
 8000d40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb08 f30c 	mul.w	r3, r8, ip
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0xe2>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	f200 80e9 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1ac9      	subs	r1, r1, r3
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x10c>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x10a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80d9 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e7bf      	b.n	8000d12 <__udivmoddi4+0x96>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0x12e>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80b1 	beq.w	8000efe <__udivmoddi4+0x282>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x1cc>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0x140>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80b8 	bhi.w	8000f2c <__udivmoddi4+0x2b0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0a8      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000dca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dce:	e7a5      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd8:	4097      	lsls	r7, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de2:	40d9      	lsrs	r1, r3
 8000de4:	4330      	orrs	r0, r6
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df8:	fb06 f108 	mul.w	r1, r6, r8
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x19c>
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e0a:	f080 808d 	bcs.w	8000f28 <__udivmoddi4+0x2ac>
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	f240 808a 	bls.w	8000f28 <__udivmoddi4+0x2ac>
 8000e14:	3e02      	subs	r6, #2
 8000e16:	443b      	add	r3, r7
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	b281      	uxth	r1, r0
 8000e1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e28:	fb00 f308 	mul.w	r3, r0, r8
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x1c4>
 8000e30:	1879      	adds	r1, r7, r1
 8000e32:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e36:	d273      	bcs.n	8000f20 <__udivmoddi4+0x2a4>
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d971      	bls.n	8000f20 <__udivmoddi4+0x2a4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4439      	add	r1, r7
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e46:	e778      	b.n	8000d3a <__udivmoddi4+0xbe>
 8000e48:	f1c6 0c20 	rsb	ip, r6, #32
 8000e4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e54:	431c      	orrs	r4, r3
 8000e56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e66:	431f      	orrs	r7, r3
 8000e68:	0c3b      	lsrs	r3, r7, #16
 8000e6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6e:	fa1f f884 	uxth.w	r8, r4
 8000e72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	fa02 f206 	lsl.w	r2, r2, r6
 8000e84:	fa00 f306 	lsl.w	r3, r0, r6
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x220>
 8000e8a:	1861      	adds	r1, r4, r1
 8000e8c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e90:	d248      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d946      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000e96:	f1a9 0902 	sub.w	r9, r9, #2
 8000e9a:	4421      	add	r1, r4
 8000e9c:	eba1 010a 	sub.w	r1, r1, sl
 8000ea0:	b2bf      	uxth	r7, r7
 8000ea2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eaa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eae:	fb00 f808 	mul.w	r8, r0, r8
 8000eb2:	45b8      	cmp	r8, r7
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x24a>
 8000eb6:	19e7      	adds	r7, r4, r7
 8000eb8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ebc:	d22e      	bcs.n	8000f1c <__udivmoddi4+0x2a0>
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d92c      	bls.n	8000f1c <__udivmoddi4+0x2a0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4427      	add	r7, r4
 8000ec6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eca:	eba7 0708 	sub.w	r7, r7, r8
 8000ece:	fba0 8902 	umull	r8, r9, r0, r2
 8000ed2:	454f      	cmp	r7, r9
 8000ed4:	46c6      	mov	lr, r8
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	d31a      	bcc.n	8000f10 <__udivmoddi4+0x294>
 8000eda:	d017      	beq.n	8000f0c <__udivmoddi4+0x290>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x27a>
 8000ede:	ebb3 020e 	subs.w	r2, r3, lr
 8000ee2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eea:	40f2      	lsrs	r2, r6
 8000eec:	ea4c 0202 	orr.w	r2, ip, r2
 8000ef0:	40f7      	lsrs	r7, r6
 8000ef2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	462e      	mov	r6, r5
 8000f00:	4628      	mov	r0, r5
 8000f02:	e70b      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f04:	4606      	mov	r6, r0
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fd      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f0c:	4543      	cmp	r3, r8
 8000f0e:	d2e5      	bcs.n	8000edc <__udivmoddi4+0x260>
 8000f10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f14:	eb69 0104 	sbc.w	r1, r9, r4
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7df      	b.n	8000edc <__udivmoddi4+0x260>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e7d2      	b.n	8000ec6 <__udivmoddi4+0x24a>
 8000f20:	4660      	mov	r0, ip
 8000f22:	e78d      	b.n	8000e40 <__udivmoddi4+0x1c4>
 8000f24:	4681      	mov	r9, r0
 8000f26:	e7b9      	b.n	8000e9c <__udivmoddi4+0x220>
 8000f28:	4666      	mov	r6, ip
 8000f2a:	e775      	b.n	8000e18 <__udivmoddi4+0x19c>
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e74a      	b.n	8000dc6 <__udivmoddi4+0x14a>
 8000f30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f34:	4439      	add	r1, r7
 8000f36:	e713      	b.n	8000d60 <__udivmoddi4+0xe4>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	443c      	add	r4, r7
 8000f3c:	e724      	b.n	8000d88 <__udivmoddi4+0x10c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <SELECT+0x18>)
 8000f4e:	f005 f845 	bl	8005fdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f003 f906 	bl	8004164 <HAL_Delay>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	48000400 	.word	0x48000400

08000f60 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <DESELECT+0x18>)
 8000f6a:	f005 f837 	bl	8005fdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f003 f8f8 	bl	8004164 <HAL_Delay>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	48000400 	.word	0x48000400

08000f7c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f86:	bf00      	nop
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <SPI_TxByte+0x30>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d1f8      	bne.n	8000f88 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f96:	1df9      	adds	r1, r7, #7
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <SPI_TxByte+0x30>)
 8000f9e:	f006 fd3c 	bl	8007a1a <HAL_SPI_Transmit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000d1ac 	.word	0x2000d1ac

08000fb0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fbc:	bf00      	nop
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <SPI_TxBuffer+0x30>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d1f8      	bne.n	8000fbe <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <SPI_TxBuffer+0x30>)
 8000fd4:	f006 fd21 	bl	8007a1a <HAL_SPI_Transmit>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000d1ac 	.word	0x2000d1ac

08000fe4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000fea:	23ff      	movs	r3, #255	; 0xff
 8000fec:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fee:	bf00      	nop
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <SPI_RxByte+0x34>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d1f8      	bne.n	8000ff0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000ffe:	1dba      	adds	r2, r7, #6
 8001000:	1df9      	adds	r1, r7, #7
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <SPI_RxByte+0x34>)
 800100a:	f006 fe74 	bl	8007cf6 <HAL_SPI_TransmitReceive>

	return data;
 800100e:	79bb      	ldrb	r3, [r7, #6]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000d1ac 	.word	0x2000d1ac

0800101c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001024:	f7ff ffde 	bl	8000fe4 <SPI_RxByte>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	701a      	strb	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <SD_ReadyWait+0x30>)
 8001040:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001044:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001046:	f7ff ffcd 	bl	8000fe4 <SPI_RxByte>
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2bff      	cmp	r3, #255	; 0xff
 8001052:	d003      	beq.n	800105c <SD_ReadyWait+0x24>
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SD_ReadyWait+0x30>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f4      	bne.n	8001046 <SD_ReadyWait+0xe>

	return res;
 800105c:	79fb      	ldrb	r3, [r7, #7]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20003578 	.word	0x20003578

0800106c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001072:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001076:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001078:	f7ff ff72 	bl	8000f60 <DESELECT>
	for(int i = 0; i < 10; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	e005      	b.n	800108e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001082:	20ff      	movs	r0, #255	; 0xff
 8001084:	f7ff ff7a 	bl	8000f7c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3301      	adds	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b09      	cmp	r3, #9
 8001092:	ddf6      	ble.n	8001082 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001094:	f7ff ff56 	bl	8000f44 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001098:	2340      	movs	r3, #64	; 0x40
 800109a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80010ac:	2395      	movs	r3, #149	; 0x95
 80010ae:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80010b0:	463b      	mov	r3, r7
 80010b2:	2106      	movs	r1, #6
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff7b 	bl	8000fb0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80010ba:	e002      	b.n	80010c2 <SD_PowerOn+0x56>
	{
		cnt--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3b01      	subs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80010c2:	f7ff ff8f 	bl	8000fe4 <SPI_RxByte>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d002      	beq.n	80010d2 <SD_PowerOn+0x66>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f4      	bne.n	80010bc <SD_PowerOn+0x50>
	}

	DESELECT();
 80010d2:	f7ff ff45 	bl	8000f60 <DESELECT>
	SPI_TxByte(0XFF);
 80010d6:	20ff      	movs	r0, #255	; 0xff
 80010d8:	f7ff ff50 	bl	8000f7c <SPI_TxByte>

	PowerFlag = 1;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <SD_PowerOn+0x80>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000139 	.word	0x20000139

080010f0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <SD_PowerOff+0x14>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	20000139 	.word	0x20000139

08001108 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <SD_CheckPower+0x14>)
 800110e:	781b      	ldrb	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000139 	.word	0x20000139

08001120 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <SD_RxDataBlock+0x58>)
 800112c:	22c8      	movs	r2, #200	; 0xc8
 800112e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001130:	f7ff ff58 	bl	8000fe4 <SPI_RxByte>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d103      	bne.n	8001146 <SD_RxDataBlock+0x26>
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <SD_RxDataBlock+0x58>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f4      	bne.n	8001130 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	2bfe      	cmp	r3, #254	; 0xfe
 800114a:	d001      	beq.n	8001150 <SD_RxDataBlock+0x30>
 800114c:	2300      	movs	r3, #0
 800114e:	e00f      	b.n	8001170 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff60 	bl	800101c <SPI_RxBytePtr>
	} while(len--);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	603a      	str	r2, [r7, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f4      	bne.n	8001150 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001166:	f7ff ff3d 	bl	8000fe4 <SPI_RxByte>
	SPI_RxByte();
 800116a:	f7ff ff3b 	bl	8000fe4 <SPI_RxByte>

	return TRUE;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000357a 	.word	0x2000357a

0800117c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800118c:	f7ff ff54 	bl	8001038 <SD_ReadyWait>
 8001190:	4603      	mov	r3, r0
 8001192:	2bff      	cmp	r3, #255	; 0xff
 8001194:	d001      	beq.n	800119a <SD_TxDataBlock+0x1e>
 8001196:	2300      	movs	r3, #0
 8001198:	e02f      	b.n	80011fa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff feed 	bl	8000f7c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2bfd      	cmp	r3, #253	; 0xfd
 80011a6:	d020      	beq.n	80011ea <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff feff 	bl	8000fb0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80011b2:	f7ff ff17 	bl	8000fe4 <SPI_RxByte>
		SPI_RxByte();
 80011b6:	f7ff ff15 	bl	8000fe4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80011ba:	e00b      	b.n	80011d4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80011bc:	f7ff ff12 	bl	8000fe4 <SPI_RxByte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d006      	beq.n	80011dc <SD_TxDataBlock+0x60>
			i++;
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	3301      	adds	r3, #1
 80011d2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	2b40      	cmp	r3, #64	; 0x40
 80011d8:	d9f0      	bls.n	80011bc <SD_TxDataBlock+0x40>
 80011da:	e000      	b.n	80011de <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011dc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011de:	bf00      	nop
 80011e0:	f7ff ff00 	bl	8000fe4 <SPI_RxByte>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0fa      	beq.n	80011e0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d101      	bne.n	80011f8 <SD_TxDataBlock+0x7c>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <SD_TxDataBlock+0x7e>

	return FALSE;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	6039      	str	r1, [r7, #0]
 800120c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800120e:	f7ff ff13 	bl	8001038 <SD_ReadyWait>
 8001212:	4603      	mov	r3, r0
 8001214:	2bff      	cmp	r3, #255	; 0xff
 8001216:	d001      	beq.n	800121c <SD_SendCmd+0x1a>
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	e042      	b.n	80012a2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff feac 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	0e1b      	lsrs	r3, r3, #24
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fea6 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fea0 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe9a 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe95 	bl	8000f7c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b40      	cmp	r3, #64	; 0x40
 8001256:	d102      	bne.n	800125e <SD_SendCmd+0x5c>
 8001258:	2395      	movs	r3, #149	; 0x95
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e007      	b.n	800126e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b48      	cmp	r3, #72	; 0x48
 8001262:	d102      	bne.n	800126a <SD_SendCmd+0x68>
 8001264:	2387      	movs	r3, #135	; 0x87
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e001      	b.n	800126e <SD_SendCmd+0x6c>
	else crc = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe83 	bl	8000f7c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b4c      	cmp	r3, #76	; 0x4c
 800127a:	d101      	bne.n	8001280 <SD_SendCmd+0x7e>
 800127c:	f7ff feb2 	bl	8000fe4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001280:	230a      	movs	r3, #10
 8001282:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001284:	f7ff feae 	bl	8000fe4 <SPI_RxByte>
 8001288:	4603      	mov	r3, r0
 800128a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800128c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da05      	bge.n	80012a0 <SD_SendCmd+0x9e>
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	3b01      	subs	r3, #1
 8001298:	73bb      	strb	r3, [r7, #14]
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f1      	bne.n	8001284 <SD_SendCmd+0x82>

	return res;
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SD_disk_initialize+0x14>
 80012bc:	2301      	movs	r3, #1
 80012be:	e0d1      	b.n	8001464 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <SD_disk_initialize+0x1c0>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <SD_disk_initialize+0x2a>
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <SD_disk_initialize+0x1c0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	e0c6      	b.n	8001464 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80012d6:	f7ff fec9 	bl	800106c <SD_PowerOn>

	/* slave select */
	SELECT();
 80012da:	f7ff fe33 	bl	8000f44 <SELECT>

	/* check disk type */
	type = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012e2:	2100      	movs	r1, #0
 80012e4:	2040      	movs	r0, #64	; 0x40
 80012e6:	f7ff ff8c 	bl	8001202 <SD_SendCmd>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f040 80a1 	bne.w	8001434 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <SD_disk_initialize+0x1c4>)
 80012f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012fe:	2048      	movs	r0, #72	; 0x48
 8001300:	f7ff ff7f 	bl	8001202 <SD_SendCmd>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d155      	bne.n	80013b6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e00c      	b.n	800132a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001310:	7bfc      	ldrb	r4, [r7, #15]
 8001312:	f7ff fe67 	bl	8000fe4 <SPI_RxByte>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4423      	add	r3, r4
 8001320:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3301      	adds	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d9ef      	bls.n	8001310 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001330:	7abb      	ldrb	r3, [r7, #10]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d17e      	bne.n	8001434 <SD_disk_initialize+0x188>
 8001336:	7afb      	ldrb	r3, [r7, #11]
 8001338:	2baa      	cmp	r3, #170	; 0xaa
 800133a:	d17b      	bne.n	8001434 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800133c:	2100      	movs	r1, #0
 800133e:	2077      	movs	r0, #119	; 0x77
 8001340:	f7ff ff5f 	bl	8001202 <SD_SendCmd>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d807      	bhi.n	800135a <SD_disk_initialize+0xae>
 800134a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800134e:	2069      	movs	r0, #105	; 0x69
 8001350:	f7ff ff57 	bl	8001202 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800135a:	4b45      	ldr	r3, [pc, #276]	; (8001470 <SD_disk_initialize+0x1c4>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1ec      	bne.n	800133c <SD_disk_initialize+0x90>
 8001362:	e000      	b.n	8001366 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001364:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <SD_disk_initialize+0x1c4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d062      	beq.n	8001434 <SD_disk_initialize+0x188>
 800136e:	2100      	movs	r1, #0
 8001370:	207a      	movs	r0, #122	; 0x7a
 8001372:	f7ff ff46 	bl	8001202 <SD_SendCmd>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d15b      	bne.n	8001434 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e00c      	b.n	800139c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001382:	7bfc      	ldrb	r4, [r7, #15]
 8001384:	f7ff fe2e 	bl	8000fe4 <SPI_RxByte>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4423      	add	r3, r4
 8001392:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	3301      	adds	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d9ef      	bls.n	8001382 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013a2:	7a3b      	ldrb	r3, [r7, #8]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SD_disk_initialize+0x104>
 80013ac:	230c      	movs	r3, #12
 80013ae:	e000      	b.n	80013b2 <SD_disk_initialize+0x106>
 80013b0:	2304      	movs	r3, #4
 80013b2:	73bb      	strb	r3, [r7, #14]
 80013b4:	e03e      	b.n	8001434 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80013b6:	2100      	movs	r1, #0
 80013b8:	2077      	movs	r0, #119	; 0x77
 80013ba:	f7ff ff22 	bl	8001202 <SD_SendCmd>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d808      	bhi.n	80013d6 <SD_disk_initialize+0x12a>
 80013c4:	2100      	movs	r1, #0
 80013c6:	2069      	movs	r0, #105	; 0x69
 80013c8:	f7ff ff1b 	bl	8001202 <SD_SendCmd>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d801      	bhi.n	80013d6 <SD_disk_initialize+0x12a>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e000      	b.n	80013d8 <SD_disk_initialize+0x12c>
 80013d6:	2301      	movs	r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d10e      	bne.n	80013fe <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013e0:	2100      	movs	r1, #0
 80013e2:	2077      	movs	r0, #119	; 0x77
 80013e4:	f7ff ff0d 	bl	8001202 <SD_SendCmd>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d80e      	bhi.n	800140c <SD_disk_initialize+0x160>
 80013ee:	2100      	movs	r1, #0
 80013f0:	2069      	movs	r0, #105	; 0x69
 80013f2:	f7ff ff06 	bl	8001202 <SD_SendCmd>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <SD_disk_initialize+0x160>
 80013fc:	e00c      	b.n	8001418 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013fe:	2100      	movs	r1, #0
 8001400:	2041      	movs	r0, #65	; 0x41
 8001402:	f7ff fefe 	bl	8001202 <SD_SendCmd>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <SD_disk_initialize+0x1c4>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e2      	bne.n	80013da <SD_disk_initialize+0x12e>
 8001414:	e000      	b.n	8001418 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001416:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <SD_disk_initialize+0x1c4>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d007      	beq.n	8001430 <SD_disk_initialize+0x184>
 8001420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001424:	2050      	movs	r0, #80	; 0x50
 8001426:	f7ff feec 	bl	8001202 <SD_SendCmd>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SD_disk_initialize+0x188>
 8001430:	2300      	movs	r3, #0
 8001432:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <SD_disk_initialize+0x1c8>)
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800143a:	f7ff fd91 	bl	8000f60 <DESELECT>
	SPI_RxByte();
 800143e:	f7ff fdd1 	bl	8000fe4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <SD_disk_initialize+0x1c0>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SD_disk_initialize+0x1c0>)
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e001      	b.n	800145e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800145a:	f7ff fe49 	bl	80010f0 <SD_PowerOff>
	}

	return Stat;
 800145e:	4b03      	ldr	r3, [pc, #12]	; (800146c <SD_disk_initialize+0x1c0>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	2000357a 	.word	0x2000357a
 8001474:	20000138 	.word	0x20000138

08001478 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SD_disk_status+0x14>
 8001488:	2301      	movs	r3, #1
 800148a:	e002      	b.n	8001492 <SD_disk_status+0x1a>
	return Stat;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SD_disk_status+0x28>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000

080014a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <SD_disk_read+0x1c>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <SD_disk_read+0x20>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e051      	b.n	8001568 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <SD_disk_read+0xcc>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SD_disk_read+0x32>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e048      	b.n	8001568 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <SD_disk_read+0xd0>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <SD_disk_read+0x44>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80014e8:	f7ff fd2c 	bl	8000f44 <SELECT>

	if (count == 1)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d111      	bne.n	8001516 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	2051      	movs	r0, #81	; 0x51
 80014f6:	f7ff fe84 	bl	8001202 <SD_SendCmd>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d129      	bne.n	8001554 <SD_disk_read+0xb0>
 8001500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001504:	68b8      	ldr	r0, [r7, #8]
 8001506:	f7ff fe0b 	bl	8001120 <SD_RxDataBlock>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d021      	beq.n	8001554 <SD_disk_read+0xb0>
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	e01e      	b.n	8001554 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2052      	movs	r0, #82	; 0x52
 800151a:	f7ff fe72 	bl	8001202 <SD_SendCmd>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d117      	bne.n	8001554 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f7ff fdf9 	bl	8001120 <SD_RxDataBlock>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00a      	beq.n	800154a <SD_disk_read+0xa6>
				buff += 512;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800153a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ed      	bne.n	8001524 <SD_disk_read+0x80>
 8001548:	e000      	b.n	800154c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800154a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800154c:	2100      	movs	r1, #0
 800154e:	204c      	movs	r0, #76	; 0x4c
 8001550:	f7ff fe57 	bl	8001202 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001554:	f7ff fd04 	bl	8000f60 <DESELECT>
	SPI_RxByte();
 8001558:	f7ff fd44 	bl	8000fe4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000
 8001574:	20000138 	.word	0x20000138

08001578 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <SD_disk_write+0x1c>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <SD_disk_write+0x20>
 8001594:	2304      	movs	r3, #4
 8001596:	e06b      	b.n	8001670 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <SD_disk_write+0x100>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SD_disk_write+0x32>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e062      	b.n	8001670 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <SD_disk_write+0x100>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SD_disk_write+0x44>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e059      	b.n	8001670 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015bc:	4b2f      	ldr	r3, [pc, #188]	; (800167c <SD_disk_write+0x104>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <SD_disk_write+0x56>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80015ce:	f7ff fcb9 	bl	8000f44 <SELECT>

	if (count == 1)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d110      	bne.n	80015fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	2058      	movs	r0, #88	; 0x58
 80015dc:	f7ff fe11 	bl	8001202 <SD_SendCmd>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d13a      	bne.n	800165c <SD_disk_write+0xe4>
 80015e6:	21fe      	movs	r1, #254	; 0xfe
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f7ff fdc7 	bl	800117c <SD_TxDataBlock>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d033      	beq.n	800165c <SD_disk_write+0xe4>
			count = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	e030      	b.n	800165c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <SD_disk_write+0x104>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001606:	2100      	movs	r1, #0
 8001608:	2077      	movs	r0, #119	; 0x77
 800160a:	f7ff fdfa 	bl	8001202 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800160e:	6839      	ldr	r1, [r7, #0]
 8001610:	2057      	movs	r0, #87	; 0x57
 8001612:	f7ff fdf6 	bl	8001202 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	2059      	movs	r0, #89	; 0x59
 800161a:	f7ff fdf2 	bl	8001202 <SD_SendCmd>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11b      	bne.n	800165c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001624:	21fc      	movs	r1, #252	; 0xfc
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f7ff fda8 	bl	800117c <SD_TxDataBlock>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <SD_disk_write+0xd0>
				buff += 512;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001638:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <SD_disk_write+0xac>
 8001646:	e000      	b.n	800164a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001648:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800164a:	21fd      	movs	r1, #253	; 0xfd
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fd95 	bl	800117c <SD_TxDataBlock>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <SD_disk_write+0xe4>
			{
				count = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800165c:	f7ff fc80 	bl	8000f60 <DESELECT>
	SPI_RxByte();
 8001660:	f7ff fcc0 	bl	8000fe4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	20000138 	.word	0x20000138

08001680 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b08b      	sub	sp, #44	; 0x2c
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	603a      	str	r2, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	460b      	mov	r3, r1
 800168e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SD_disk_ioctl+0x1e>
 800169a:	2304      	movs	r3, #4
 800169c:	e115      	b.n	80018ca <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d124      	bne.n	80016f4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d012      	beq.n	80016d8 <SD_disk_ioctl+0x58>
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	dc1a      	bgt.n	80016ec <SD_disk_ioctl+0x6c>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <SD_disk_ioctl+0x40>
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d006      	beq.n	80016cc <SD_disk_ioctl+0x4c>
 80016be:	e015      	b.n	80016ec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80016c0:	f7ff fd16 	bl	80010f0 <SD_PowerOff>
			res = RES_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016ca:	e0fc      	b.n	80018c6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80016cc:	f7ff fcce 	bl	800106c <SD_PowerOn>
			res = RES_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016d6:	e0f6      	b.n	80018c6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	1c5c      	adds	r4, r3, #1
 80016dc:	f7ff fd14 	bl	8001108 <SD_CheckPower>
 80016e0:	4603      	mov	r3, r0
 80016e2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016ea:	e0ec      	b.n	80018c6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80016ec:	2304      	movs	r3, #4
 80016ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016f2:	e0e8      	b.n	80018c6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016f4:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <SD_disk_ioctl+0x254>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SD_disk_ioctl+0x86>
 8001702:	2303      	movs	r3, #3
 8001704:	e0e1      	b.n	80018ca <SD_disk_ioctl+0x24a>

		SELECT();
 8001706:	f7ff fc1d 	bl	8000f44 <SELECT>

		switch (ctrl)
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	2b0d      	cmp	r3, #13
 800170e:	f200 80cb 	bhi.w	80018a8 <SD_disk_ioctl+0x228>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <SD_disk_ioctl+0x98>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001813 	.word	0x08001813
 800171c:	08001751 	.word	0x08001751
 8001720:	08001803 	.word	0x08001803
 8001724:	080018a9 	.word	0x080018a9
 8001728:	080018a9 	.word	0x080018a9
 800172c:	080018a9 	.word	0x080018a9
 8001730:	080018a9 	.word	0x080018a9
 8001734:	080018a9 	.word	0x080018a9
 8001738:	080018a9 	.word	0x080018a9
 800173c:	080018a9 	.word	0x080018a9
 8001740:	080018a9 	.word	0x080018a9
 8001744:	08001825 	.word	0x08001825
 8001748:	08001849 	.word	0x08001849
 800174c:	0800186d 	.word	0x0800186d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001750:	2100      	movs	r1, #0
 8001752:	2049      	movs	r0, #73	; 0x49
 8001754:	f7ff fd55 	bl	8001202 <SD_SendCmd>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 80a8 	bne.w	80018b0 <SD_disk_ioctl+0x230>
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2110      	movs	r1, #16
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fcda 	bl	8001120 <SD_RxDataBlock>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 809e 	beq.w	80018b0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10e      	bne.n	800179c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800177e:	7d7b      	ldrb	r3, [r7, #21]
 8001780:	b29a      	uxth	r2, r3
 8001782:	7d3b      	ldrb	r3, [r7, #20]
 8001784:	b29b      	uxth	r3, r3
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001792:	8bfb      	ldrh	r3, [r7, #30]
 8001794:	029a      	lsls	r2, r3, #10
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e02e      	b.n	80017fa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800179c:	7c7b      	ldrb	r3, [r7, #17]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	7dbb      	ldrb	r3, [r7, #22]
 80017a6:	09db      	lsrs	r3, r3, #7
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	7d7b      	ldrb	r3, [r7, #21]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0306 	and.w	r3, r3, #6
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3302      	adds	r3, #2
 80017c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017c4:	7d3b      	ldrb	r3, [r7, #20]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	7cbb      	ldrb	r3, [r7, #18]
 80017da:	029b      	lsls	r3, r3, #10
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80017ec:	8bfa      	ldrh	r2, [r7, #30]
 80017ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f2:	3b09      	subs	r3, #9
 80017f4:	409a      	lsls	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001800:	e056      	b.n	80018b0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001808:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001810:	e055      	b.n	80018be <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001812:	f7ff fc11 	bl	8001038 <SD_ReadyWait>
 8001816:	4603      	mov	r3, r0
 8001818:	2bff      	cmp	r3, #255	; 0xff
 800181a:	d14b      	bne.n	80018b4 <SD_disk_ioctl+0x234>
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001822:	e047      	b.n	80018b4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001824:	2100      	movs	r1, #0
 8001826:	2049      	movs	r0, #73	; 0x49
 8001828:	f7ff fceb 	bl	8001202 <SD_SendCmd>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d142      	bne.n	80018b8 <SD_disk_ioctl+0x238>
 8001832:	2110      	movs	r1, #16
 8001834:	6a38      	ldr	r0, [r7, #32]
 8001836:	f7ff fc73 	bl	8001120 <SD_RxDataBlock>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03b      	beq.n	80018b8 <SD_disk_ioctl+0x238>
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001846:	e037      	b.n	80018b8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001848:	2100      	movs	r1, #0
 800184a:	204a      	movs	r0, #74	; 0x4a
 800184c:	f7ff fcd9 	bl	8001202 <SD_SendCmd>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d132      	bne.n	80018bc <SD_disk_ioctl+0x23c>
 8001856:	2110      	movs	r1, #16
 8001858:	6a38      	ldr	r0, [r7, #32]
 800185a:	f7ff fc61 	bl	8001120 <SD_RxDataBlock>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02b      	beq.n	80018bc <SD_disk_ioctl+0x23c>
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800186a:	e027      	b.n	80018bc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800186c:	2100      	movs	r1, #0
 800186e:	207a      	movs	r0, #122	; 0x7a
 8001870:	f7ff fcc7 	bl	8001202 <SD_SendCmd>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001880:	e00b      	b.n	800189a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001882:	6a3c      	ldr	r4, [r7, #32]
 8001884:	1c63      	adds	r3, r4, #1
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	f7ff fbac 	bl	8000fe4 <SPI_RxByte>
 800188c:	4603      	mov	r3, r0
 800188e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001894:	3301      	adds	r3, #1
 8001896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800189a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d9ef      	bls.n	8001882 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80018a8:	2304      	movs	r3, #4
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018ae:	e006      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018b0:	bf00      	nop
 80018b2:	e004      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018b4:	bf00      	nop
 80018b6:	e002      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018b8:	bf00      	nop
 80018ba:	e000      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018bc:	bf00      	nop
		}

		DESELECT();
 80018be:	f7ff fb4f 	bl	8000f60 <DESELECT>
		SPI_RxByte();
 80018c2:	f7ff fb8f 	bl	8000fe4 <SPI_RxByte>
	}

	return res;
 80018c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	372c      	adds	r7, #44	; 0x2c
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000

080018d8 <HAL_TIM_PWM_PulseFinishedCallback>:


volatile uint8_t ucDataSentFlag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d10c      	bne.n	8001902 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
		{
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80018e8:	2100      	movs	r1, #0
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f007 fad6 	bl	8008e9c <HAL_TIM_PWM_Stop_DMA>
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 80018f0:	2108      	movs	r1, #8
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f007 fad2 	bl	8008e9c <HAL_TIM_PWM_Stop_DMA>
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 80018f8:	210c      	movs	r1, #12
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f007 face 	bl	8008e9c <HAL_TIM_PWM_Stop_DMA>
 8001900:	e007      	b.n	8001912 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
		}
		else if (htim == &htim8)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d103      	bne.n	8001912 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
		{
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800190a:	2104      	movs	r1, #4
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f007 fac5 	bl	8008e9c <HAL_TIM_PWM_Stop_DMA>
		}

		ucDataSentFlag = 1;
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
		break;
	default:
		break;
	}
	*/
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20004f08 	.word	0x20004f08
 8001924:	200035cc 	.word	0x200035cc
 8001928:	2000013a 	.word	0x2000013a

0800192c <WS2812B_vInit>:
		DMA_HandleTypeDef *pxDMA1Channel1,
		DMA_HandleTypeDef *pxDMA1Channel2,
		DMA_HandleTypeDef *pxDMA1Channel3,
		DMA_HandleTypeDef *pxDMA2Channel1
	)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
	pxWS28182B->pxTimer1 = pxTimer1;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	601a      	str	r2, [r3, #0]
	pxWS28182B->pxTimer2 = pxTimer2;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	605a      	str	r2, [r3, #4]
	pxWS28182B->pxTimer1->Instance->ARR = WS2812B_ARR;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2264      	movs	r2, #100	; 0x64
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
	pxWS28182B->pxTimer2->Instance->ARR = WS2812B_ARR;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2264      	movs	r2, #100	; 0x64
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c

	pxWS28182B->pxDMA1Channel1 = pxDMA1Channel1;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	609a      	str	r2, [r3, #8]
	pxWS28182B->pxDMA1Channel2 = pxDMA1Channel2;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	60da      	str	r2, [r3, #12]
	pxWS28182B->pxDMA1Channel3 = pxDMA1Channel3;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	611a      	str	r2, [r3, #16]
	pxWS28182B->pxDMA2Channel1 = pxDMA2Channel1;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a3a      	ldr	r2, [r7, #32]
 8001970:	615a      	str	r2, [r3, #20]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <WS2812B_vSetLED>:




void WS2812B_vSetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex, uint8_t ucRed, uint8_t ucGreen, uint8_t ucBlue)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	4608      	mov	r0, r1
 8001988:	4611      	mov	r1, r2
 800198a:	461a      	mov	r2, r3
 800198c:	4603      	mov	r3, r0
 800198e:	70fb      	strb	r3, [r7, #3]
 8001990:	460b      	mov	r3, r1
 8001992:	70bb      	strb	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	711a      	strb	r2, [r3, #4]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = ucGreen;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	787a      	ldrb	r2, [r7, #1]
 80019b6:	715a      	strb	r2, [r3, #5]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = ucRed;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	78ba      	ldrb	r2, [r7, #2]
 80019c6:	719a      	strb	r2, [r3, #6]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = ucBlue;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	7c3a      	ldrb	r2, [r7, #16]
 80019d6:	71da      	strb	r2, [r3, #7]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <WS2812B_vResetLED>:


void WS2812B_vResetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	711a      	strb	r2, [r3, #4]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = 0;
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	715a      	strb	r2, [r3, #5]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = 0;
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	719a      	strb	r2, [r3, #6]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = 0;
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	71da      	strb	r2, [r3, #7]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <WS2812B_vResetLEDs>:


void WS2812B_vResetLEDs(WS2812BHandle_t *pxWS28182B)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	// [!] faster way to reset with memclr
	for (int8_t i = 0; i < LED_COUNT; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e00a      	b.n	8001a60 <WS2812B_vResetLEDs+0x24>
	{
		WS2812B_vResetLED(pxWS28182B, i);
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffc8 	bl	80019e4 <WS2812B_vResetLED>
	for (int8_t i = 0; i < LED_COUNT; i++)
 8001a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a64:	2b1f      	cmp	r3, #31
 8001a66:	ddf0      	ble.n	8001a4a <WS2812B_vResetLEDs+0xe>
	}
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	0000      	movs	r0, r0
 8001a74:	0000      	movs	r0, r0
	...

08001a78 <WS2812B_vSetBrightness>:


// Credits to Controllers Tech
void WS2812B_vSetBrightness(WS2812BHandle_t *pxWS28182B, int brightness)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b2d      	cmp	r3, #45	; 0x2d
 8001a86:	dd01      	ble.n	8001a8c <WS2812B_vSetBrightness+0x14>
 8001a88:	232d      	movs	r3, #45	; 0x2d
 8001a8a:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < LED_COUNT; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e0b4      	b.n	8001bfc <WS2812B_vSetBrightness+0x184>
	{
		pxWS28182B->pxLEDBrightness[i].ucIndex = pxWS28182B->pxLEDData[i].ucIndex;
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	7919      	ldrb	r1, [r3, #4]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	460a      	mov	r2, r1
 8001aae:	711a      	strb	r2, [r3, #4]

		float angle = 90 - brightness;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abe:	edc7 7a02 	vstr	s15, [r7, #8]
		angle = angle*M_PI / 180;
 8001ac2:	68b8      	ldr	r0, [r7, #8]
 8001ac4:	f7fe fd38 	bl	8000538 <__aeabi_f2d>
 8001ac8:	a352      	add	r3, pc, #328	; (adr r3, 8001c14 <WS2812B_vSetBrightness+0x19c>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7fe fd8b 	bl	80005e8 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <WS2812B_vSetBrightness+0x198>)
 8001ae0:	f7fe feac 	bl	800083c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f85e 	bl	8000bac <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	60bb      	str	r3, [r7, #8]
		pxWS28182B->pxLEDBrightness[i].ucGreen = (pxWS28182B->pxLEDData[i].ucGreen)/(tan(angle));
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	795b      	ldrb	r3, [r3, #5]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd06 	bl	8000514 <__aeabi_i2d>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	460d      	mov	r5, r1
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f7fe fd13 	bl	8000538 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	ec43 2b10 	vmov	d0, r2, r3
 8001b1a:	f00d f8bd 	bl	800ec98 <tan>
 8001b1e:	ec53 2b10 	vmov	r2, r3, d0
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7fe fe89 	bl	800083c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff f81b 	bl	8000b6c <__aeabi_d2uiz>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b2d9      	uxtb	r1, r3
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	460a      	mov	r2, r1
 8001b48:	715a      	strb	r2, [r3, #5]
		pxWS28182B->pxLEDBrightness[i].ucRed = (pxWS28182B->pxLEDData[i].ucRed)/(tan(angle));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	799b      	ldrb	r3, [r3, #6]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fcdb 	bl	8000514 <__aeabi_i2d>
 8001b5e:	4604      	mov	r4, r0
 8001b60:	460d      	mov	r5, r1
 8001b62:	68b8      	ldr	r0, [r7, #8]
 8001b64:	f7fe fce8 	bl	8000538 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	ec43 2b10 	vmov	d0, r2, r3
 8001b70:	f00d f892 	bl	800ec98 <tan>
 8001b74:	ec53 2b10 	vmov	r2, r3, d0
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fe5e 	bl	800083c <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7fe fff0 	bl	8000b6c <__aeabi_d2uiz>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b2d9      	uxtb	r1, r3
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	719a      	strb	r2, [r3, #6]
		pxWS28182B->pxLEDBrightness[i].ucBlue = (pxWS28182B->pxLEDData[i].ucBlue)/(tan(angle));
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	79db      	ldrb	r3, [r3, #7]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcb0 	bl	8000514 <__aeabi_i2d>
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	460d      	mov	r5, r1
 8001bb8:	68b8      	ldr	r0, [r7, #8]
 8001bba:	f7fe fcbd 	bl	8000538 <__aeabi_f2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	ec43 2b10 	vmov	d0, r2, r3
 8001bc6:	f00d f867 	bl	800ec98 <tan>
 8001bca:	ec53 2b10 	vmov	r2, r3, d0
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	f7fe fe33 	bl	800083c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7fe ffc5 	bl	8000b6c <__aeabi_d2uiz>
 8001be2:	4603      	mov	r3, r0
 8001be4:	b2d9      	uxtb	r1, r3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	460a      	mov	r2, r1
 8001bf4:	71da      	strb	r2, [r3, #7]
	for (int i = 0; i < LED_COUNT; i++)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b1f      	cmp	r3, #31
 8001c00:	f77f af47 	ble.w	8001a92 <WS2812B_vSetBrightness+0x1a>
	}
#endif
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40668000 	.word	0x40668000
 8001c14:	54442d18 	.word	0x54442d18
 8001c18:	400921fb 	.word	0x400921fb

08001c1c <WS2812B_vSend>:




void WS2812B_vSend(WS2812BHandle_t *pxWS28182B)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	uint32_t indx = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
	uint32_t color;

	for (int i = 0; i < LED_COUNT; i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	e03e      	b.n	8001cac <WS2812B_vSend+0x90>
	{
		color = ((pxWS28182B->pxLEDBrightness[i].ucGreen<<16) | (pxWS28182B->pxLEDBrightness[i].ucRed<<8) | (pxWS28182B->pxLEDBrightness[i].ucBlue));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	795b      	ldrb	r3, [r3, #5]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	799b      	ldrb	r3, [r3, #6]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	79db      	ldrb	r3, [r3, #7]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

		for (int i = 23; i >= 0; i--)
 8001c62:	2317      	movs	r3, #23
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e01b      	b.n	8001ca0 <WS2812B_vSend+0x84>
		{
			if (color & (1 << i))
 8001c68:	2201      	movs	r2, #1
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <WS2812B_vSend+0x6c>
			{
				pxWS28182B->pwmData[indx] = WS2812B_T1H_TICKS;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	320c      	adds	r2, #12
 8001c80:	2140      	movs	r1, #64	; 0x40
 8001c82:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001c86:	e005      	b.n	8001c94 <WS2812B_vSend+0x78>
			}
			else
			{
				pxWS28182B->pwmData[indx] = WS2812B_T0H_TICKS;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	320c      	adds	r2, #12
 8001c8e:	2120      	movs	r1, #32
 8001c90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			indx++;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3301      	adds	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	dae0      	bge.n	8001c68 <WS2812B_vSend+0x4c>
	for (int i = 0; i < LED_COUNT; i++)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b1f      	cmp	r3, #31
 8001cb0:	ddbd      	ble.n	8001c2e <WS2812B_vSend+0x12>
		}
	}

	for (int i = 0; i < 50; i++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	e00b      	b.n	8001cd0 <WS2812B_vSend+0xb4>
	{
		pxWS28182B->pwmData[indx] = 0;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	320c      	adds	r2, #12
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 50; i++)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b31      	cmp	r3, #49	; 0x31
 8001cd4:	ddf0      	ble.n	8001cb8 <WS2812B_vSend+0x9c>
	}

	HAL_TIM_PWM_Start_DMA(pxWS28182B->pxTimer1, TIM_CHANNEL_1, (uint32_t *)pxWS28182B->pwmData, indx);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f103 0218 	add.w	r2, r3, #24
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f006 fec1 	bl	8008a6c <HAL_TIM_PWM_Start_DMA>
	// [!] semaphore wait or osdelay
	while (!ucDataSentFlag) {};
 8001cea:	bf00      	nop
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <WS2812B_vSend+0xe8>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0fa      	beq.n	8001cec <WS2812B_vSend+0xd0>
	ucDataSentFlag = 0;
 8001cf6:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <WS2812B_vSend+0xe8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000013a 	.word	0x2000013a

08001d08 <WS2812B_vSend2>:




void WS2812B_vSend2(WS2812BHandle_t *pxWS28182B)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	uint32_t indx = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
	uint32_t color;

	for (int i = 0; i < LED_COUNT; i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e03e      	b.n	8001d98 <WS2812B_vSend2+0x90>
	{
		color = ((pxWS28182B->pxLEDBrightness[i].ucGreen<<16) | (pxWS28182B->pxLEDBrightness[i].ucRed<<8) | (pxWS28182B->pxLEDBrightness[i].ucBlue));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	795b      	ldrb	r3, [r3, #5]
 8001d28:	041a      	lsls	r2, r3, #16
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	799b      	ldrb	r3, [r3, #6]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	79db      	ldrb	r3, [r3, #7]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]

		for (int i = 23; i >= 0; i--)
 8001d4e:	2317      	movs	r3, #23
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e01b      	b.n	8001d8c <WS2812B_vSend2+0x84>
		{
			if (color & (1 << i))
 8001d54:	2201      	movs	r2, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <WS2812B_vSend2+0x6c>
			{
				pxWS28182B->pwmData[indx] = WS2812B_T1H_TICKS;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	320c      	adds	r2, #12
 8001d6c:	2140      	movs	r1, #64	; 0x40
 8001d6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001d72:	e005      	b.n	8001d80 <WS2812B_vSend2+0x78>
			}
			else
			{
				pxWS28182B->pwmData[indx] = WS2812B_T0H_TICKS;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	320c      	adds	r2, #12
 8001d7a:	2120      	movs	r1, #32
 8001d7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			indx++;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dae0      	bge.n	8001d54 <WS2812B_vSend2+0x4c>
	for (int i = 0; i < LED_COUNT; i++)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b1f      	cmp	r3, #31
 8001d9c:	ddbd      	ble.n	8001d1a <WS2812B_vSend2+0x12>
		}
	}

	for (int i = 0; i < 50; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e00b      	b.n	8001dbc <WS2812B_vSend2+0xb4>
	{
		pxWS28182B->pwmData[indx] = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	320c      	adds	r2, #12
 8001daa:	2100      	movs	r1, #0
 8001dac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	3301      	adds	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 50; i++)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	3301      	adds	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b31      	cmp	r3, #49	; 0x31
 8001dc0:	ddf0      	ble.n	8001da4 <WS2812B_vSend2+0x9c>
	}

	//HAL_TIM_PWM_Start_DMA(pxWS28182B->pxTimer1, TIM_CHANNEL_3, (uint32_t *)pxWS28182B->pwmData, indx);
	//HAL_TIM_PWM_Start_DMA(pxWS28182B->pxTimer1, TIM_CHANNEL_4, (uint32_t *)pxWS28182B->pwmData, indx);
	HAL_TIM_PWM_Start_DMA(pxWS28182B->pxTimer2, TIM_CHANNEL_2, (uint32_t *)pxWS28182B->pwmData, indx);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6858      	ldr	r0, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f103 0218 	add.w	r2, r3, #24
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	f006 fe4b 	bl	8008a6c <HAL_TIM_PWM_Start_DMA>
	// [!] semaphore wait or osdelay
	while (!ucDataSentFlag) {};
 8001dd6:	bf00      	nop
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <WS2812B_vSend2+0xe8>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0fa      	beq.n	8001dd8 <WS2812B_vSend2+0xd0>
	ucDataSentFlag = 0;
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <WS2812B_vSend2+0xe8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000013a 	.word	0x2000013a

08001df4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8001dfc:	1d39      	adds	r1, r7, #4
 8001dfe:	2364      	movs	r3, #100	; 0x64
 8001e00:	2201      	movs	r2, #1
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <__io_putchar+0x20>)
 8001e04:	f008 f976 	bl	800a0f4 <HAL_UART_Transmit>
	return ch;
 8001e08:	687b      	ldr	r3, [r7, #4]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000d210 	.word	0x2000d210

08001e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e1e:	f002 f961 	bl	80040e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e22:	f000 f86d 	bl	8001f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e26:	f000 fd5f 	bl	80028e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e2a:	f000 fd1b 	bl	8002864 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e2e:	f000 fce9 	bl	8002804 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001e32:	f000 f8ef 	bl	8002014 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001e36:	f000 f9e1 	bl	80021fc <MX_TIM1_Init>
  MX_FATFS_Init();
 8001e3a:	f008 fde1 	bl	800aa00 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001e3e:	f000 f99f 	bl	8002180 <MX_SPI1_Init>
  MX_TIM15_Init();
 8001e42:	f000 fb6b 	bl	800251c <MX_TIM15_Init>
  MX_TIM16_Init();
 8001e46:	f000 fbed 	bl	8002624 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001e4a:	f000 fc63 	bl	8002714 <MX_TIM17_Init>
  MX_I2C1_Init();
 8001e4e:	f000 f957 	bl	8002100 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001e52:	f000 fa63 	bl	800231c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001e56:	f000 fad1 	bl	80023fc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  WS2812B_vInit(&xWS2812B, &htim3, &htim8, &hdma_tim3_ch1_trig, &hdma_tim3_ch3, &hdma_tim3_ch4_up, &hdma_tim8_ch2);
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <main+0xa0>)
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <main+0xa4>)
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <main+0xa8>)
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <main+0xac>)
 8001e68:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <main+0xb0>)
 8001e6a:	4918      	ldr	r1, [pc, #96]	; (8001ecc <main+0xb4>)
 8001e6c:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <main+0xb8>)
 8001e6e:	f7ff fd5d 	bl	800192c <WS2812B_vInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e72:	f008 fecd 	bl	800ac10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <main+0xbc>)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4817      	ldr	r0, [pc, #92]	; (8001ed8 <main+0xc0>)
 8001e7c:	f008 ff12 	bl	800aca4 <osThreadNew>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a16      	ldr	r2, [pc, #88]	; (8001edc <main+0xc4>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <main+0xc8>)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4816      	ldr	r0, [pc, #88]	; (8001ee4 <main+0xcc>)
 8001e8c:	f008 ff0a 	bl	800aca4 <osThreadNew>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <main+0xd0>)
 8001e94:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <main+0xd4>)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <main+0xd8>)
 8001e9c:	f008 ff02 	bl	800aca4 <osThreadNew>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <main+0xdc>)
 8001ea4:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <main+0xe0>)
 8001ea8:	f008 ffd6 	bl	800ae58 <osEventFlagsNew>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <main+0xe4>)
 8001eb0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001eb2:	f008 fed1 	bl	800ac58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <main+0x9e>
 8001eb8:	20003580 	.word	0x20003580
 8001ebc:	2000d15c 	.word	0x2000d15c
 8001ec0:	20004ec0 	.word	0x20004ec0
 8001ec4:	20005020 	.word	0x20005020
 8001ec8:	200035cc 	.word	0x200035cc
 8001ecc:	20004f08 	.word	0x20004f08
 8001ed0:	200046f4 	.word	0x200046f4
 8001ed4:	0800ff74 	.word	0x0800ff74
 8001ed8:	08002995 	.word	0x08002995
 8001edc:	20004fb8 	.word	0x20004fb8
 8001ee0:	0800ff98 	.word	0x0800ff98
 8001ee4:	08002b45 	.word	0x08002b45
 8001ee8:	200035c8 	.word	0x200035c8
 8001eec:	0800ffbc 	.word	0x0800ffbc
 8001ef0:	08002ba9 	.word	0x08002ba9
 8001ef4:	2000d1a4 	.word	0x2000d1a4
 8001ef8:	0800ffe0 	.word	0x0800ffe0
 8001efc:	20003618 	.word	0x20003618

08001f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0b8      	sub	sp, #224	; 0xe0
 8001f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f0a:	2244      	movs	r2, #68	; 0x44
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f00b feec 	bl	800dcec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f24:	463b      	mov	r3, r7
 8001f26:	2288      	movs	r2, #136	; 0x88
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f00b fede 	bl	800dcec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3e:	2310      	movs	r3, #16
 8001f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f44:	2302      	movs	r3, #2
 8001f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001f56:	230a      	movs	r3, #10
 8001f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f62:	2302      	movs	r3, #2
 8001f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 f9d4 	bl	8006320 <HAL_RCC_OscConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f7e:	f000 fe47 	bl	8002c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f82:	230f      	movs	r3, #15
 8001f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fa0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fda0 	bl	8006aec <HAL_RCC_ClockConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001fb2:	f000 fe2d 	bl	8002c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001fb6:	f244 0342 	movw	r3, #16450	; 0x4042
 8001fba:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001fc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001fc8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe8:	463b      	mov	r3, r7
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 ffb6 	bl	8006f5c <HAL_RCCEx_PeriphCLKConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001ff6:	f000 fe0b 	bl	8002c10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ffa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ffe:	f004 f939 	bl	8006274 <HAL_PWREx_ControlVoltageScaling>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8002008:	f000 fe02 	bl	8002c10 <Error_Handler>
  }
}
 800200c:	bf00      	nop
 800200e:	37e0      	adds	r7, #224	; 0xe0
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
 8002034:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002038:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <MX_ADC1_Init+0xe4>)
 800203a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <MX_ADC1_Init+0xe0>)
 800203e:	2200      	movs	r2, #0
 8002040:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002042:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <MX_ADC1_Init+0xe0>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800204e:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002056:	2204      	movs	r2, #4
 8002058:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <MX_ADC1_Init+0xe0>)
 800205c:	2200      	movs	r2, #0
 800205e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002062:	2200      	movs	r2, #0
 8002064:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002068:	2201      	movs	r2, #1
 800206a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <MX_ADC1_Init+0xe0>)
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002076:	2200      	movs	r2, #0
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <MX_ADC1_Init+0xe0>)
 800207c:	2200      	movs	r2, #0
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <MX_ADC1_Init+0xe0>)
 800208a:	2200      	movs	r2, #0
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002096:	4817      	ldr	r0, [pc, #92]	; (80020f4 <MX_ADC1_Init+0xe0>)
 8002098:	f002 fa56 	bl	8004548 <HAL_ADC_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80020a2:	f000 fdb5 	bl	8002c10 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	4810      	ldr	r0, [pc, #64]	; (80020f4 <MX_ADC1_Init+0xe0>)
 80020b2:	f003 fa1f 	bl	80054f4 <HAL_ADCEx_MultiModeConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020bc:	f000 fda8 	bl	8002c10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <MX_ADC1_Init+0xe8>)
 80020c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020c4:	2306      	movs	r3, #6
 80020c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020cc:	237f      	movs	r3, #127	; 0x7f
 80020ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020d0:	2304      	movs	r3, #4
 80020d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_ADC1_Init+0xe0>)
 80020de:	f002 fdc1 	bl	8004c64 <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80020e8:	f000 fd92 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20004f54 	.word	0x20004f54
 80020f8:	50040000 	.word	0x50040000
 80020fc:	04300002 	.word	0x04300002

08002100 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <MX_I2C1_Init+0x74>)
 8002106:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <MX_I2C1_Init+0x78>)
 8002108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <MX_I2C1_Init+0x74>)
 800210c:	4a1b      	ldr	r2, [pc, #108]	; (800217c <MX_I2C1_Init+0x7c>)
 800210e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <MX_I2C1_Init+0x74>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <MX_I2C1_Init+0x74>)
 8002118:	2201      	movs	r2, #1
 800211a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <MX_I2C1_Init+0x74>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_I2C1_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <MX_I2C1_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_I2C1_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_I2C1_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800213a:	480e      	ldr	r0, [pc, #56]	; (8002174 <MX_I2C1_Init+0x74>)
 800213c:	f003 ff66 	bl	800600c <HAL_I2C_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002146:	f000 fd63 	bl	8002c10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800214a:	2100      	movs	r1, #0
 800214c:	4809      	ldr	r0, [pc, #36]	; (8002174 <MX_I2C1_Init+0x74>)
 800214e:	f003 ffec 	bl	800612a <HAL_I2CEx_ConfigAnalogFilter>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002158:	f000 fd5a 	bl	8002c10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800215c:	2100      	movs	r1, #0
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_I2C1_Init+0x74>)
 8002160:	f004 f82e 	bl	80061c0 <HAL_I2CEx_ConfigDigitalFilter>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800216a:	f000 fd51 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20004658 	.word	0x20004658
 8002178:	40005400 	.word	0x40005400
 800217c:	10909cec 	.word	0x10909cec

08002180 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_SPI1_Init+0x74>)
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <MX_SPI1_Init+0x78>)
 8002188:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_SPI1_Init+0x74>)
 800218c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002190:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_SPI1_Init+0x74>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <MX_SPI1_Init+0x74>)
 800219a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800219e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021b6:	2220      	movs	r2, #32
 80021b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021ce:	2207      	movs	r2, #7
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021da:	2208      	movs	r2, #8
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021e0:	f005 fb78 	bl	80078d4 <HAL_SPI_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f000 fd11 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000d1ac 	.word	0x2000d1ac
 80021f8:	40013000 	.word	0x40013000

080021fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b096      	sub	sp, #88	; 0x58
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002202:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
 800221e:	615a      	str	r2, [r3, #20]
 8002220:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	222c      	movs	r2, #44	; 0x2c
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f00b fd5f 	bl	800dcec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <MX_TIM1_Init+0x118>)
 8002230:	4a39      	ldr	r2, [pc, #228]	; (8002318 <MX_TIM1_Init+0x11c>)
 8002232:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 8002234:	4b37      	ldr	r3, [pc, #220]	; (8002314 <MX_TIM1_Init+0x118>)
 8002236:	2207      	movs	r2, #7
 8002238:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <MX_TIM1_Init+0x118>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <MX_TIM1_Init+0x118>)
 8002242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002246:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002248:	4b32      	ldr	r3, [pc, #200]	; (8002314 <MX_TIM1_Init+0x118>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <MX_TIM1_Init+0x118>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002254:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <MX_TIM1_Init+0x118>)
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800225a:	482e      	ldr	r0, [pc, #184]	; (8002314 <MX_TIM1_Init+0x118>)
 800225c:	f006 f986 	bl	800856c <HAL_TIM_PWM_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002266:	f000 fcd3 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800227a:	4619      	mov	r1, r3
 800227c:	4825      	ldr	r0, [pc, #148]	; (8002314 <MX_TIM1_Init+0x118>)
 800227e:	f007 fdc7 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002288:	f000 fcc2 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800228c:	2360      	movs	r3, #96	; 0x60
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002298:	2300      	movs	r3, #0
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	4818      	ldr	r0, [pc, #96]	; (8002314 <MX_TIM1_Init+0x118>)
 80022b2:	f007 f803 	bl	80092bc <HAL_TIM_PWM_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022bc:	f000 fca8 	bl	8002c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	4619      	mov	r1, r3
 80022f4:	4807      	ldr	r0, [pc, #28]	; (8002314 <MX_TIM1_Init+0x118>)
 80022f6:	f007 fe13 	bl	8009f20 <HAL_TIMEx_ConfigBreakDeadTime>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002300:	f000 fc86 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <MX_TIM1_Init+0x118>)
 8002306:	f001 fbdd 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 800230a:	bf00      	nop
 800230c:	3758      	adds	r7, #88	; 0x58
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000d10c 	.word	0x2000d10c
 8002318:	40012c00 	.word	0x40012c00

0800231c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800232e:	463b      	mov	r3, r7
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
 800233c:	615a      	str	r2, [r3, #20]
 800233e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <MX_TIM3_Init+0xd8>)
 8002342:	4a2d      	ldr	r2, [pc, #180]	; (80023f8 <MX_TIM3_Init+0xdc>)
 8002344:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002346:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <MX_TIM3_Init+0xd8>)
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <MX_TIM3_Init+0xd8>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <MX_TIM3_Init+0xd8>)
 8002354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002358:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <MX_TIM3_Init+0xd8>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <MX_TIM3_Init+0xd8>)
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002366:	4823      	ldr	r0, [pc, #140]	; (80023f4 <MX_TIM3_Init+0xd8>)
 8002368:	f006 f900 	bl	800856c <HAL_TIM_PWM_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002372:	f000 fc4d 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	481b      	ldr	r0, [pc, #108]	; (80023f4 <MX_TIM3_Init+0xd8>)
 8002386:	f007 fd43 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002390:	f000 fc3e 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002394:	2360      	movs	r3, #96	; 0x60
 8002396:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023a4:	463b      	mov	r3, r7
 80023a6:	2200      	movs	r2, #0
 80023a8:	4619      	mov	r1, r3
 80023aa:	4812      	ldr	r0, [pc, #72]	; (80023f4 <MX_TIM3_Init+0xd8>)
 80023ac:	f006 ff86 	bl	80092bc <HAL_TIM_PWM_ConfigChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80023b6:	f000 fc2b 	bl	8002c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023ba:	463b      	mov	r3, r7
 80023bc:	2208      	movs	r2, #8
 80023be:	4619      	mov	r1, r3
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <MX_TIM3_Init+0xd8>)
 80023c2:	f006 ff7b 	bl	80092bc <HAL_TIM_PWM_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80023cc:	f000 fc20 	bl	8002c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023d0:	463b      	mov	r3, r7
 80023d2:	220c      	movs	r2, #12
 80023d4:	4619      	mov	r1, r3
 80023d6:	4807      	ldr	r0, [pc, #28]	; (80023f4 <MX_TIM3_Init+0xd8>)
 80023d8:	f006 ff70 	bl	80092bc <HAL_TIM_PWM_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80023e2:	f000 fc15 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023e6:	4803      	ldr	r0, [pc, #12]	; (80023f4 <MX_TIM3_Init+0xd8>)
 80023e8:	f001 fb6c 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20004f08 	.word	0x20004f08
 80023f8:	40000400 	.word	0x40000400

080023fc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b096      	sub	sp, #88	; 0x58
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002402:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800240e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
 800241c:	611a      	str	r2, [r3, #16]
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	222c      	movs	r2, #44	; 0x2c
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f00b fc5f 	bl	800dcec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <MX_TIM8_Init+0x118>)
 8002430:	4a39      	ldr	r2, [pc, #228]	; (8002518 <MX_TIM8_Init+0x11c>)
 8002432:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002434:	4b37      	ldr	r3, [pc, #220]	; (8002514 <MX_TIM8_Init+0x118>)
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <MX_TIM8_Init+0x118>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002440:	4b34      	ldr	r3, [pc, #208]	; (8002514 <MX_TIM8_Init+0x118>)
 8002442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002446:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <MX_TIM8_Init+0x118>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <MX_TIM8_Init+0x118>)
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002454:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <MX_TIM8_Init+0x118>)
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800245a:	482e      	ldr	r0, [pc, #184]	; (8002514 <MX_TIM8_Init+0x118>)
 800245c:	f006 f886 	bl	800856c <HAL_TIM_PWM_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8002466:	f000 fbd3 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002476:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800247a:	4619      	mov	r1, r3
 800247c:	4825      	ldr	r0, [pc, #148]	; (8002514 <MX_TIM8_Init+0x118>)
 800247e:	f007 fcc7 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002488:	f000 fbc2 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800248c:	2360      	movs	r3, #96	; 0x60
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002494:	2300      	movs	r3, #0
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002498:	2300      	movs	r3, #0
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024ac:	2204      	movs	r2, #4
 80024ae:	4619      	mov	r1, r3
 80024b0:	4818      	ldr	r0, [pc, #96]	; (8002514 <MX_TIM8_Init+0x118>)
 80024b2:	f006 ff03 	bl	80092bc <HAL_TIM_PWM_ConfigChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80024bc:	f000 fba8 	bl	8002c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4807      	ldr	r0, [pc, #28]	; (8002514 <MX_TIM8_Init+0x118>)
 80024f6:	f007 fd13 	bl	8009f20 <HAL_TIMEx_ConfigBreakDeadTime>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002500:	f000 fb86 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002504:	4803      	ldr	r0, [pc, #12]	; (8002514 <MX_TIM8_Init+0x118>)
 8002506:	f001 fadd 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 800250a:	bf00      	nop
 800250c:	3758      	adds	r7, #88	; 0x58
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200035cc 	.word	0x200035cc
 8002518:	40013400 	.word	0x40013400

0800251c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b096      	sub	sp, #88	; 0x58
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002522:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800252e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	611a      	str	r2, [r3, #16]
 800253e:	615a      	str	r2, [r3, #20]
 8002540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	222c      	movs	r2, #44	; 0x2c
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f00b fbcf 	bl	800dcec <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800254e:	4b33      	ldr	r3, [pc, #204]	; (800261c <MX_TIM15_Init+0x100>)
 8002550:	4a33      	ldr	r2, [pc, #204]	; (8002620 <MX_TIM15_Init+0x104>)
 8002552:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8 - 1;
 8002554:	4b31      	ldr	r3, [pc, #196]	; (800261c <MX_TIM15_Init+0x100>)
 8002556:	2207      	movs	r2, #7
 8002558:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <MX_TIM15_Init+0x100>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002560:	4b2e      	ldr	r3, [pc, #184]	; (800261c <MX_TIM15_Init+0x100>)
 8002562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002566:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002568:	4b2c      	ldr	r3, [pc, #176]	; (800261c <MX_TIM15_Init+0x100>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <MX_TIM15_Init+0x100>)
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b29      	ldr	r3, [pc, #164]	; (800261c <MX_TIM15_Init+0x100>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800257a:	4828      	ldr	r0, [pc, #160]	; (800261c <MX_TIM15_Init+0x100>)
 800257c:	f005 fff6 	bl	800856c <HAL_TIM_PWM_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002586:	f000 fb43 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002592:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002596:	4619      	mov	r1, r3
 8002598:	4820      	ldr	r0, [pc, #128]	; (800261c <MX_TIM15_Init+0x100>)
 800259a:	f007 fc39 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80025a4:	f000 fb34 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a8:	2360      	movs	r3, #96	; 0x60
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b0:	2300      	movs	r3, #0
 80025b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025b4:	2300      	movs	r3, #0
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025bc:	2300      	movs	r3, #0
 80025be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025c8:	2200      	movs	r2, #0
 80025ca:	4619      	mov	r1, r3
 80025cc:	4813      	ldr	r0, [pc, #76]	; (800261c <MX_TIM15_Init+0x100>)
 80025ce:	f006 fe75 	bl	80092bc <HAL_TIM_PWM_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80025d8:	f000 fb1a 	bl	8002c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025dc:	2300      	movs	r3, #0
 80025de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4807      	ldr	r0, [pc, #28]	; (800261c <MX_TIM15_Init+0x100>)
 8002600:	f007 fc8e 	bl	8009f20 <HAL_TIMEx_ConfigBreakDeadTime>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800260a:	f000 fb01 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800260e:	4803      	ldr	r0, [pc, #12]	; (800261c <MX_TIM15_Init+0x100>)
 8002610:	f001 fa58 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 8002614:	bf00      	nop
 8002616:	3758      	adds	r7, #88	; 0x58
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200046a4 	.word	0x200046a4
 8002620:	40014000 	.word	0x40014000

08002624 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b092      	sub	sp, #72	; 0x48
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800262a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	611a      	str	r2, [r3, #16]
 800263a:	615a      	str	r2, [r3, #20]
 800263c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800263e:	463b      	mov	r3, r7
 8002640:	222c      	movs	r2, #44	; 0x2c
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f00b fb51 	bl	800dcec <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800264a:	4b30      	ldr	r3, [pc, #192]	; (800270c <MX_TIM16_Init+0xe8>)
 800264c:	4a30      	ldr	r2, [pc, #192]	; (8002710 <MX_TIM16_Init+0xec>)
 800264e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8 - 1;
 8002650:	4b2e      	ldr	r3, [pc, #184]	; (800270c <MX_TIM16_Init+0xe8>)
 8002652:	2207      	movs	r2, #7
 8002654:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <MX_TIM16_Init+0xe8>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <MX_TIM16_Init+0xe8>)
 800265e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002662:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <MX_TIM16_Init+0xe8>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <MX_TIM16_Init+0xe8>)
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <MX_TIM16_Init+0xe8>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002676:	4825      	ldr	r0, [pc, #148]	; (800270c <MX_TIM16_Init+0xe8>)
 8002678:	f005 feb0 	bl	80083dc <HAL_TIM_Base_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002682:	f000 fac5 	bl	8002c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002686:	4821      	ldr	r0, [pc, #132]	; (800270c <MX_TIM16_Init+0xe8>)
 8002688:	f005 ff70 	bl	800856c <HAL_TIM_PWM_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002692:	f000 fabd 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002696:	2360      	movs	r3, #96	; 0x60
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269e:	2300      	movs	r3, #0
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026a2:	2300      	movs	r3, #0
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b6:	2200      	movs	r2, #0
 80026b8:	4619      	mov	r1, r3
 80026ba:	4814      	ldr	r0, [pc, #80]	; (800270c <MX_TIM16_Init+0xe8>)
 80026bc:	f006 fdfe 	bl	80092bc <HAL_TIM_PWM_ConfigChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80026c6:	f000 faa3 	bl	8002c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80026e8:	463b      	mov	r3, r7
 80026ea:	4619      	mov	r1, r3
 80026ec:	4807      	ldr	r0, [pc, #28]	; (800270c <MX_TIM16_Init+0xe8>)
 80026ee:	f007 fc17 	bl	8009f20 <HAL_TIMEx_ConfigBreakDeadTime>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80026f8:	f000 fa8a 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80026fc:	4803      	ldr	r0, [pc, #12]	; (800270c <MX_TIM16_Init+0xe8>)
 80026fe:	f001 f9e1 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 8002702:	bf00      	nop
 8002704:	3748      	adds	r7, #72	; 0x48
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000e2c8 	.word	0x2000e2c8
 8002710:	40014400 	.word	0x40014400

08002714 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b092      	sub	sp, #72	; 0x48
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800271a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	611a      	str	r2, [r3, #16]
 800272a:	615a      	str	r2, [r3, #20]
 800272c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800272e:	463b      	mov	r3, r7
 8002730:	222c      	movs	r2, #44	; 0x2c
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f00b fad9 	bl	800dcec <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <MX_TIM17_Init+0xe8>)
 800273c:	4a30      	ldr	r2, [pc, #192]	; (8002800 <MX_TIM17_Init+0xec>)
 800273e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8 - 1;
 8002740:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <MX_TIM17_Init+0xe8>)
 8002742:	2207      	movs	r2, #7
 8002744:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <MX_TIM17_Init+0xe8>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <MX_TIM17_Init+0xe8>)
 800274e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002752:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <MX_TIM17_Init+0xe8>)
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <MX_TIM17_Init+0xe8>)
 800275c:	2200      	movs	r2, #0
 800275e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <MX_TIM17_Init+0xe8>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002766:	4825      	ldr	r0, [pc, #148]	; (80027fc <MX_TIM17_Init+0xe8>)
 8002768:	f005 fe38 	bl	80083dc <HAL_TIM_Base_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002772:	f000 fa4d 	bl	8002c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002776:	4821      	ldr	r0, [pc, #132]	; (80027fc <MX_TIM17_Init+0xe8>)
 8002778:	f005 fef8 	bl	800856c <HAL_TIM_PWM_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002782:	f000 fa45 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002786:	2360      	movs	r3, #96	; 0x60
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800278e:	2300      	movs	r3, #0
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002792:	2300      	movs	r3, #0
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4814      	ldr	r0, [pc, #80]	; (80027fc <MX_TIM17_Init+0xe8>)
 80027ac:	f006 fd86 	bl	80092bc <HAL_TIM_PWM_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80027b6:	f000 fa2b 	bl	8002c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80027d8:	463b      	mov	r3, r7
 80027da:	4619      	mov	r1, r3
 80027dc:	4807      	ldr	r0, [pc, #28]	; (80027fc <MX_TIM17_Init+0xe8>)
 80027de:	f007 fb9f 	bl	8009f20 <HAL_TIMEx_ConfigBreakDeadTime>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 80027e8:	f000 fa12 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80027ec:	4803      	ldr	r0, [pc, #12]	; (80027fc <MX_TIM17_Init+0xe8>)
 80027ee:	f001 f969 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 80027f2:	bf00      	nop
 80027f4:	3748      	adds	r7, #72	; 0x48
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20004e74 	.word	0x20004e74
 8002800:	40014800 	.word	0x40014800

08002804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <MX_USART2_UART_Init+0x58>)
 800280a:	4a15      	ldr	r2, [pc, #84]	; (8002860 <MX_USART2_UART_Init+0x5c>)
 800280c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <MX_USART2_UART_Init+0x58>)
 8002810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <MX_USART2_UART_Init+0x58>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <MX_USART2_UART_Init+0x58>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <MX_USART2_UART_Init+0x58>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_USART2_UART_Init+0x58>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <MX_USART2_UART_Init+0x58>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_USART2_UART_Init+0x58>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <MX_USART2_UART_Init+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_USART2_UART_Init+0x58>)
 8002842:	2200      	movs	r2, #0
 8002844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_USART2_UART_Init+0x58>)
 8002848:	f007 fc06 	bl	800a058 <HAL_UART_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002852:	f000 f9dd 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000d210 	.word	0x2000d210
 8002860:	40004400 	.word	0x40004400

08002864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <MX_DMA_Init+0x80>)
 800286c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <MX_DMA_Init+0x80>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6493      	str	r3, [r2, #72]	; 0x48
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <MX_DMA_Init+0x80>)
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <MX_DMA_Init+0x80>)
 8002884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <MX_DMA_Init+0x80>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6493      	str	r3, [r2, #72]	; 0x48
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <MX_DMA_Init+0x80>)
 8002890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2105      	movs	r1, #5
 800289e:	200c      	movs	r0, #12
 80028a0:	f002 ff90 	bl	80057c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028a4:	200c      	movs	r0, #12
 80028a6:	f002 ffa9 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2105      	movs	r1, #5
 80028ae:	200d      	movs	r0, #13
 80028b0:	f002 ff88 	bl	80057c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80028b4:	200d      	movs	r0, #13
 80028b6:	f002 ffa1 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2105      	movs	r1, #5
 80028be:	2010      	movs	r0, #16
 80028c0:	f002 ff80 	bl	80057c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80028c4:	2010      	movs	r0, #16
 80028c6:	f002 ff99 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2105      	movs	r1, #5
 80028ce:	2045      	movs	r0, #69	; 0x45
 80028d0:	f002 ff78 	bl	80057c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80028d4:	2045      	movs	r0, #69	; 0x45
 80028d6:	f002 ff91 	bl	80057fc <HAL_NVIC_EnableIRQ>

}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000

080028e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fe:	4b23      	ldr	r3, [pc, #140]	; (800298c <MX_GPIO_Init+0xa4>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	4a22      	ldr	r2, [pc, #136]	; (800298c <MX_GPIO_Init+0xa4>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <MX_GPIO_Init+0xa4>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <MX_GPIO_Init+0xa4>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a1c      	ldr	r2, [pc, #112]	; (800298c <MX_GPIO_Init+0xa4>)
 800291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <MX_GPIO_Init+0xa4>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <MX_GPIO_Init+0xa4>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	4a16      	ldr	r2, [pc, #88]	; (800298c <MX_GPIO_Init+0xa4>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <MX_GPIO_Init+0xa4>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_GPIO_Init+0xa4>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	4a10      	ldr	r2, [pc, #64]	; (800298c <MX_GPIO_Init+0xa4>)
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_GPIO_Init+0xa4>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800295e:	2201      	movs	r2, #1
 8002960:	2140      	movs	r1, #64	; 0x40
 8002962:	480b      	ldr	r0, [pc, #44]	; (8002990 <MX_GPIO_Init+0xa8>)
 8002964:	f003 fb3a 	bl	8005fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002968:	2340      	movs	r3, #64	; 0x40
 800296a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296c:	2301      	movs	r3, #1
 800296e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002974:	2301      	movs	r3, #1
 8002976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4619      	mov	r1, r3
 800297e:	4804      	ldr	r0, [pc, #16]	; (8002990 <MX_GPIO_Init+0xa8>)
 8002980:	f003 f982 	bl	8005c88 <HAL_GPIO_Init>

}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	48000400 	.word	0x48000400

08002994 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af02      	add	r7, sp, #8
 800299a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 800299c:	4866      	ldr	r0, [pc, #408]	; (8002b38 <StartMainMenuTask+0x1a4>)
 800299e:	f00b fa33 	bl	800de08 <puts>
    osDelay(10);
 80029a2:	200a      	movs	r0, #10
 80029a4:	f008 fa10 	bl	800adc8 <osDelay>

    osDelay(1000);
		*/


    WS2812B_vSetLED(&xWS2812B, 0, 255, 0, 0);
 80029a8:	2300      	movs	r3, #0
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2300      	movs	r3, #0
 80029ae:	22ff      	movs	r2, #255	; 0xff
 80029b0:	2100      	movs	r1, #0
 80029b2:	4862      	ldr	r0, [pc, #392]	; (8002b3c <StartMainMenuTask+0x1a8>)
 80029b4:	f7fe ffe3 	bl	800197e <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 1, 0, 255, 0);
 80029b8:	2300      	movs	r3, #0
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	23ff      	movs	r3, #255	; 0xff
 80029be:	2200      	movs	r2, #0
 80029c0:	2101      	movs	r1, #1
 80029c2:	485e      	ldr	r0, [pc, #376]	; (8002b3c <StartMainMenuTask+0x1a8>)
 80029c4:	f7fe ffdb 	bl	800197e <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 2, 0, 0, 255);
 80029c8:	23ff      	movs	r3, #255	; 0xff
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	2200      	movs	r2, #0
 80029d0:	2102      	movs	r1, #2
 80029d2:	485a      	ldr	r0, [pc, #360]	; (8002b3c <StartMainMenuTask+0x1a8>)
 80029d4:	f7fe ffd3 	bl	800197e <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 31, 0, 0, 255);
 80029d8:	23ff      	movs	r3, #255	; 0xff
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2300      	movs	r3, #0
 80029de:	2200      	movs	r2, #0
 80029e0:	211f      	movs	r1, #31
 80029e2:	4856      	ldr	r0, [pc, #344]	; (8002b3c <StartMainMenuTask+0x1a8>)
 80029e4:	f7fe ffcb 	bl	800197e <WS2812B_vSetLED>

    WS2812B_vSetBrightness(&xWS2812B, 1);
 80029e8:	2101      	movs	r1, #1
 80029ea:	4854      	ldr	r0, [pc, #336]	; (8002b3c <StartMainMenuTask+0x1a8>)
 80029ec:	f7ff f844 	bl	8001a78 <WS2812B_vSetBrightness>
    WS2812B_vSend(&xWS2812B);
 80029f0:	4852      	ldr	r0, [pc, #328]	; (8002b3c <StartMainMenuTask+0x1a8>)
 80029f2:	f7ff f913 	bl	8001c1c <WS2812B_vSend>
    WS2812B_vResetLEDs(&xWS2812B);
 80029f6:	4851      	ldr	r0, [pc, #324]	; (8002b3c <StartMainMenuTask+0x1a8>)
 80029f8:	f7ff f820 	bl	8001a3c <WS2812B_vResetLEDs>


    //
		WS2812B_vSetLED(&xWS2812B, 4, 0, 0, 255);
 80029fc:	23ff      	movs	r3, #255	; 0xff
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2300      	movs	r3, #0
 8002a02:	2200      	movs	r2, #0
 8002a04:	2104      	movs	r1, #4
 8002a06:	484d      	ldr	r0, [pc, #308]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a08:	f7fe ffb9 	bl	800197e <WS2812B_vSetLED>
		WS2812B_vSetLED(&xWS2812B, 5, 0, 255, 0);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	23ff      	movs	r3, #255	; 0xff
 8002a12:	2200      	movs	r2, #0
 8002a14:	2105      	movs	r1, #5
 8002a16:	4849      	ldr	r0, [pc, #292]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a18:	f7fe ffb1 	bl	800197e <WS2812B_vSetLED>
		WS2812B_vSetLED(&xWS2812B, 6, 255, 0, 0);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2300      	movs	r3, #0
 8002a22:	22ff      	movs	r2, #255	; 0xff
 8002a24:	2106      	movs	r1, #6
 8002a26:	4845      	ldr	r0, [pc, #276]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a28:	f7fe ffa9 	bl	800197e <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 7, 255, 255, 255);
 8002a2c:	23ff      	movs	r3, #255	; 0xff
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	23ff      	movs	r3, #255	; 0xff
 8002a32:	22ff      	movs	r2, #255	; 0xff
 8002a34:	2107      	movs	r1, #7
 8002a36:	4841      	ldr	r0, [pc, #260]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a38:	f7fe ffa1 	bl	800197e <WS2812B_vSetLED>
		WS2812B_vSetBrightness(&xWS2812B, 1);
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	483f      	ldr	r0, [pc, #252]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a40:	f7ff f81a 	bl	8001a78 <WS2812B_vSetBrightness>
		WS2812B_vSend2(&xWS2812B);
 8002a44:	483d      	ldr	r0, [pc, #244]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a46:	f7ff f95f 	bl	8001d08 <WS2812B_vSend2>
    WS2812B_vResetLEDs(&xWS2812B);
 8002a4a:	483c      	ldr	r0, [pc, #240]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a4c:	f7fe fff6 	bl	8001a3c <WS2812B_vResetLEDs>
    //


		osDelay(1000);
 8002a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a54:	f008 f9b8 	bl	800adc8 <osDelay>

    WS2812B_vResetLEDs(&xWS2812B);
 8002a58:	4838      	ldr	r0, [pc, #224]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a5a:	f7fe ffef 	bl	8001a3c <WS2812B_vResetLEDs>

		WS2812B_vSetLED(&xWS2812B, 0, 12, 52, 64);
 8002a5e:	2340      	movs	r3, #64	; 0x40
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2334      	movs	r3, #52	; 0x34
 8002a64:	220c      	movs	r2, #12
 8002a66:	2100      	movs	r1, #0
 8002a68:	4834      	ldr	r0, [pc, #208]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a6a:	f7fe ff88 	bl	800197e <WS2812B_vSetLED>
		WS2812B_vSetLED(&xWS2812B, 1, 4, 235, 145);
 8002a6e:	2391      	movs	r3, #145	; 0x91
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	23eb      	movs	r3, #235	; 0xeb
 8002a74:	2204      	movs	r2, #4
 8002a76:	2101      	movs	r1, #1
 8002a78:	4830      	ldr	r0, [pc, #192]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a7a:	f7fe ff80 	bl	800197e <WS2812B_vSetLED>
		WS2812B_vSetLED(&xWS2812B, 2, 120, 120, 25);
 8002a7e:	2319      	movs	r3, #25
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2378      	movs	r3, #120	; 0x78
 8002a84:	2278      	movs	r2, #120	; 0x78
 8002a86:	2102      	movs	r1, #2
 8002a88:	482c      	ldr	r0, [pc, #176]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a8a:	f7fe ff78 	bl	800197e <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 30, 120, 29, 0);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	231d      	movs	r3, #29
 8002a94:	2278      	movs	r2, #120	; 0x78
 8002a96:	211e      	movs	r1, #30
 8002a98:	4828      	ldr	r0, [pc, #160]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002a9a:	f7fe ff70 	bl	800197e <WS2812B_vSetLED>

		WS2812B_vSetBrightness(&xWS2812B, 1);
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	4826      	ldr	r0, [pc, #152]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002aa2:	f7fe ffe9 	bl	8001a78 <WS2812B_vSetBrightness>
		WS2812B_vSend(&xWS2812B);
 8002aa6:	4825      	ldr	r0, [pc, #148]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002aa8:	f7ff f8b8 	bl	8001c1c <WS2812B_vSend>
    WS2812B_vResetLEDs(&xWS2812B);
 8002aac:	4823      	ldr	r0, [pc, #140]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002aae:	f7fe ffc5 	bl	8001a3c <WS2812B_vResetLEDs>



    //
		WS2812B_vSetLED(&xWS2812B, 0, 0, 0, 100);
 8002ab2:	2364      	movs	r3, #100	; 0x64
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	481f      	ldr	r0, [pc, #124]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002abe:	f7fe ff5e 	bl	800197e <WS2812B_vSetLED>
		WS2812B_vSetLED(&xWS2812B, 1, 0, 100, 0);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2364      	movs	r3, #100	; 0x64
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2101      	movs	r1, #1
 8002acc:	481b      	ldr	r0, [pc, #108]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002ace:	f7fe ff56 	bl	800197e <WS2812B_vSetLED>
		WS2812B_vSetLED(&xWS2812B, 2, 100, 0, 0);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2264      	movs	r2, #100	; 0x64
 8002ada:	2102      	movs	r1, #2
 8002adc:	4817      	ldr	r0, [pc, #92]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002ade:	f7fe ff4e 	bl	800197e <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 3, 100, 100, 100);
 8002ae2:	2364      	movs	r3, #100	; 0x64
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2364      	movs	r3, #100	; 0x64
 8002ae8:	2264      	movs	r2, #100	; 0x64
 8002aea:	2103      	movs	r1, #3
 8002aec:	4813      	ldr	r0, [pc, #76]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002aee:	f7fe ff46 	bl	800197e <WS2812B_vSetLED>
		WS2812B_vSetBrightness(&xWS2812B, 1);
 8002af2:	2101      	movs	r1, #1
 8002af4:	4811      	ldr	r0, [pc, #68]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002af6:	f7fe ffbf 	bl	8001a78 <WS2812B_vSetBrightness>
		WS2812B_vSend2(&xWS2812B);
 8002afa:	4810      	ldr	r0, [pc, #64]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002afc:	f7ff f904 	bl	8001d08 <WS2812B_vSend2>
    WS2812B_vResetLEDs(&xWS2812B);
 8002b00:	480e      	ldr	r0, [pc, #56]	; (8002b3c <StartMainMenuTask+0x1a8>)
 8002b02:	f7fe ff9b 	bl	8001a3c <WS2812B_vResetLEDs>





    osDelay(1000);
 8002b06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b0a:	f008 f95d 	bl	800adc8 <osDelay>




    printf("%lu\r\n", WS2812B_ARR);
 8002b0e:	2164      	movs	r1, #100	; 0x64
 8002b10:	480b      	ldr	r0, [pc, #44]	; (8002b40 <StartMainMenuTask+0x1ac>)
 8002b12:	f00b f8f3 	bl	800dcfc <iprintf>


    printf("%lu\r\n", WS2812B_T0H_TICKS);
 8002b16:	2120      	movs	r1, #32
 8002b18:	4809      	ldr	r0, [pc, #36]	; (8002b40 <StartMainMenuTask+0x1ac>)
 8002b1a:	f00b f8ef 	bl	800dcfc <iprintf>
    printf("%lu\r\n", WS2812B_T0L_TICKS);
 8002b1e:	2144      	movs	r1, #68	; 0x44
 8002b20:	4807      	ldr	r0, [pc, #28]	; (8002b40 <StartMainMenuTask+0x1ac>)
 8002b22:	f00b f8eb 	bl	800dcfc <iprintf>
    printf("%lu\r\n", WS2812B_T1H_TICKS);
 8002b26:	2140      	movs	r1, #64	; 0x40
 8002b28:	4805      	ldr	r0, [pc, #20]	; (8002b40 <StartMainMenuTask+0x1ac>)
 8002b2a:	f00b f8e7 	bl	800dcfc <iprintf>
    printf("%lu\r\n", WS2812B_T1L_TICKS);
 8002b2e:	2124      	movs	r1, #36	; 0x24
 8002b30:	4803      	ldr	r0, [pc, #12]	; (8002b40 <StartMainMenuTask+0x1ac>)
 8002b32:	f00b f8e3 	bl	800dcfc <iprintf>
  	printf("Main Menu\r\n");
 8002b36:	e731      	b.n	800299c <StartMainMenuTask+0x8>
 8002b38:	0800fdc4 	.word	0x0800fdc4
 8002b3c:	200046f4 	.word	0x200046f4
 8002b40:	0800fdd0 	.word	0x0800fdd0

08002b44 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <StartPlayTickTask+0x4c>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <StartPlayTickTask+0x50>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f008 f9bb 	bl	800aed6 <osEventFlagsWait>
 8002b60:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	dbf1      	blt.n	8002b4c <StartPlayTickTask+0x8>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0ec      	beq.n	8002b4c <StartPlayTickTask+0x8>
		{
			while (running)
 8002b72:	e008      	b.n	8002b86 <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8002b74:	4808      	ldr	r0, [pc, #32]	; (8002b98 <StartPlayTickTask+0x54>)
 8002b76:	f00b f947 	bl	800de08 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <StartPlayTickTask+0x58>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <StartPlayTickTask+0x5c>)
 8002b82:	f009 fac7 	bl	800c114 <vTaskDelayUntil>
			while (running)
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <StartPlayTickTask+0x60>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f2      	bne.n	8002b74 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002b8e:	e7dd      	b.n	8002b4c <StartPlayTickTask+0x8>
 8002b90:	20003618 	.word	0x20003618
 8002b94:	0800fff0 	.word	0x0800fff0
 8002b98:	0800fdd8 	.word	0x0800fdd8
 8002b9c:	0800fff4 	.word	0x0800fff4
 8002ba0:	200046f0 	.word	0x200046f0
 8002ba4:	2000013c 	.word	0x2000013c

08002ba8 <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <StartPlayState+0x38>)
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <StartPlayState+0x3c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f008 f989 	bl	800aed6 <osEventFlagsWait>
 8002bc4:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	dbf1      	blt.n	8002bb0 <StartPlayState+0x8>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ec      	beq.n	8002bb0 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 8002bd6:	4804      	ldr	r0, [pc, #16]	; (8002be8 <StartPlayState+0x40>)
 8002bd8:	f000 f83a 	bl	8002c50 <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002bdc:	e7e8      	b.n	8002bb0 <StartPlayState+0x8>
 8002bde:	bf00      	nop
 8002be0:	20003618 	.word	0x20003618
 8002be4:	0800fff8 	.word	0x0800fff8
 8002be8:	20005068 	.word	0x20005068

08002bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bfe:	f001 fa91 	bl	8004124 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40001000 	.word	0x40001000

08002c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c14:	b672      	cpsid	i
}
 8002c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <Error_Handler+0x8>

08002c1a <Piece_ucParseBeatValue>:
	pxPiece->xCapture.ulTick = osKernelGetTickCount();
}


uint8_t Piece_ucParseBeatValue(PieceHandle_t *pxPiece)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usBeat, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usBeat));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3305      	adds	r3, #5
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	440a      	add	r2, r1
 8002c32:	7812      	ldrb	r2, [r2, #0]
 8002c34:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usBeat);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	601a      	str	r2, [r3, #0]

	return pxPiece->xPieceInstruction.usBeat;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	795b      	ldrb	r3, [r3, #5]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	uint8_t endCommand = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

	while (!endCommand)
 8002c5c:	e045      	b.n	8002cea <Piece_vParseCommand+0x9a>
	{
		memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	440a      	add	r2, r1
 8002c6e:	7812      	ldrb	r2, [r2, #0]
 8002c70:	701a      	strb	r2, [r3, #0]
		pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]

		printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	4827      	ldr	r0, [pc, #156]	; (8002d20 <Piece_vParseCommand+0xd0>)
 8002c84:	f00b f83a 	bl	800dcfc <iprintf>
		printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	791b      	ldrb	r3, [r3, #4]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4825      	ldr	r0, [pc, #148]	; (8002d24 <Piece_vParseCommand+0xd4>)
 8002c90:	f00b f834 	bl	800dcfc <iprintf>

		switch (pxPiece->xPieceInstruction.usCommand)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	791b      	ldrb	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <Piece_vParseCommand+0x52>
 8002c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c9e:	d003      	beq.n	8002ca8 <Piece_vParseCommand+0x58>
 8002ca0:	e006      	b.n	8002cb0 <Piece_vParseCommand+0x60>
		{
		case 0b00000000:
			endCommand = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
			break;
 8002ca6:	e020      	b.n	8002cea <Piece_vParseCommand+0x9a>
		case 0b01111111:
			Piece_vConfigureAll(pxPiece);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f891 	bl	8002dd0 <Piece_vConfigureAll>
			break;
 8002cae:	e01c      	b.n	8002cea <Piece_vParseCommand+0x9a>
		default:
			if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	791b      	ldrb	r3, [r3, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fb4b 	bl	8003350 <bIsPlayCommand>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <Piece_vParseCommand+0x92>
			{
				uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	791b      	ldrb	r3, [r3, #4]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	73bb      	strb	r3, [r7, #14]
				//uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
				uint8_t ucBeatValue = Piece_ucParseBeatValue(pxPiece);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa5 	bl	8002c1a <Piece_ucParseBeatValue>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	737b      	strb	r3, [r7, #13]
				Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8002cd4:	7bba      	ldrb	r2, [r7, #14]
 8002cd6:	7b7b      	ldrb	r3, [r7, #13]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9d8 	bl	8003090 <Piece_vPlayNotes>
 8002ce0:	e002      	b.n	8002ce8 <Piece_vParseCommand+0x98>
			}
			else
			{
				printf("UNKNOWN COMMAND\r\n");
 8002ce2:	4811      	ldr	r0, [pc, #68]	; (8002d28 <Piece_vParseCommand+0xd8>)
 8002ce4:	f00b f890 	bl	800de08 <puts>
			}
			break;
 8002ce8:	bf00      	nop
	while (!endCommand)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0b6      	beq.n	8002c5e <Piece_vParseCommand+0xe>
		}
	}



	printf("END OF COMPOSITION\r\n");
 8002cf0:	480e      	ldr	r0, [pc, #56]	; (8002d2c <Piece_vParseCommand+0xdc>)
 8002cf2:	f00b f889 	bl	800de08 <puts>
	HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	480d      	ldr	r0, [pc, #52]	; (8002d30 <Piece_vParseCommand+0xe0>)
 8002cfa:	f005 fddb 	bl	80088b4 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 8002cfe:	2100      	movs	r1, #0
 8002d00:	480c      	ldr	r0, [pc, #48]	; (8002d34 <Piece_vParseCommand+0xe4>)
 8002d02:	f005 fdd7 	bl	80088b4 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8002d06:	2100      	movs	r1, #0
 8002d08:	480b      	ldr	r0, [pc, #44]	; (8002d38 <Piece_vParseCommand+0xe8>)
 8002d0a:	f005 fdd3 	bl	80088b4 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	480a      	ldr	r0, [pc, #40]	; (8002d3c <Piece_vParseCommand+0xec>)
 8002d12:	f005 fdcf 	bl	80088b4 <HAL_TIM_PWM_Stop_IT>
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	0800fe28 	.word	0x0800fe28
 8002d24:	0800fe3c 	.word	0x0800fe3c
 8002d28:	0800fe4c 	.word	0x0800fe4c
 8002d2c:	0800fe60 	.word	0x0800fe60
 8002d30:	2000d10c 	.word	0x2000d10c
 8002d34:	200046a4 	.word	0x200046a4
 8002d38:	2000e2c8 	.word	0x2000e2c8
 8002d3c:	20004e74 	.word	0x20004e74

08002d40 <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4803      	ldr	r0, [pc, #12]	; (8002d6c <Piece_vSetMovement+0x2c>)
 8002d5e:	f00a ffcd 	bl	800dcfc <iprintf>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	0800fe74 	.word	0x0800fe74

08002d70 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4803      	ldr	r0, [pc, #12]	; (8002d9c <Piece_vSetBPM+0x2c>)
 8002d8e:	f00a ffb5 	bl	800dcfc <iprintf>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	0800fe84 	.word	0x0800fe84

08002da0 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4803      	ldr	r0, [pc, #12]	; (8002dcc <Piece_vSetDynamic+0x2c>)
 8002dbe:	f00a ff9d 	bl	800dcfc <iprintf>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	0800fe90 	.word	0x0800fe90

08002dd0 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8002dd8:	481e      	ldr	r0, [pc, #120]	; (8002e54 <Piece_vConfigureAll+0x84>)
 8002dda:	f00b f815 	bl	800de08 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff84 	bl	8002d40 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 8002e38:	89bb      	ldrh	r3, [r7, #12]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff97 	bl	8002d70 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 8002e42:	7afb      	ldrb	r3, [r7, #11]
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ffaa 	bl	8002da0 <Piece_vSetDynamic>
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	0800fea0 	.word	0x0800fea0

08002e58 <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
	int count = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8002e66:	e01e      	b.n	8002ea6 <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e6e:	3394      	adds	r3, #148	; 0x94
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e7c:	3394      	adds	r3, #148	; 0x94
 8002e7e:	601a      	str	r2, [r3, #0]
		count++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3301      	adds	r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	3b32      	subs	r3, #50	; 0x32
 8002e8a:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 8002e8c:	2232      	movs	r2, #50	; 0x32
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	4819      	ldr	r0, [pc, #100]	; (8002ef8 <Piece_vCaptureFragment+0xa0>)
 8002e92:	f00a ff33 	bl	800dcfc <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e9c:	3394      	adds	r3, #148	; 0x94
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f007 ffac 	bl	800adfe <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b31      	cmp	r3, #49	; 0x31
 8002eaa:	dcdd      	bgt.n	8002e68 <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	dd1b      	ble.n	8002eea <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002eb8:	3394      	adds	r3, #148	; 0x94
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	441a      	add	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ec6:	3394      	adds	r3, #148	; 0x94
 8002ec8:	601a      	str	r2, [r3, #0]

		count++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	68f9      	ldr	r1, [r7, #12]
 8002ed4:	4808      	ldr	r0, [pc, #32]	; (8002ef8 <Piece_vCaptureFragment+0xa0>)
 8002ed6:	f00a ff11 	bl	800dcfc <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ee0:	3394      	adds	r3, #148	; 0x94
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f007 ff8a 	bl	800adfe <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	603b      	str	r3, [r7, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	0800febc 	.word	0x0800febc

08002efc <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f0a:	3398      	adds	r3, #152	; 0x98
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f16:	339b      	adds	r3, #155	; 0x9b
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f22:	339e      	adds	r3, #158	; 0x9e
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f2e:	33a1      	adds	r3, #161	; 0xa1
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <Piece_vParseNoteGoal>:




void Piece_vParseNoteGoal(PieceHandle_t *pxPiece)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3306      	adds	r3, #6
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	440a      	add	r2, r1
 8002f58:	8812      	ldrh	r2, [r2, #0]
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	88db      	ldrh	r3, [r3, #6]
 8002f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	88db      	ldrh	r3, [r3, #6]
 8002f72:	0b9b      	lsrs	r3, r3, #14
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	88db      	ldrh	r3, [r3, #6]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f86:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d856      	bhi.n	800303c <Piece_vParseNoteGoal+0xfc>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <Piece_vParseNoteGoal+0x54>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08002fa5 	.word	0x08002fa5
 8002f98:	08002fcb 	.word	0x08002fcb
 8002f9c:	08002ff1 	.word	0x08002ff1
 8002fa0:	08003017 	.word	0x08003017
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002faa:	3398      	adds	r3, #152	; 0x98
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fb6:	3399      	adds	r3, #153	; 0x99
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fc2:	339a      	adds	r3, #154	; 0x9a
 8002fc4:	7b7a      	ldrb	r2, [r7, #13]
 8002fc6:	701a      	strb	r2, [r3, #0]
		break;
 8002fc8:	e039      	b.n	800303e <Piece_vParseNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fd0:	339b      	adds	r3, #155	; 0x9b
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fdc:	339c      	adds	r3, #156	; 0x9c
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fe8:	339d      	adds	r3, #157	; 0x9d
 8002fea:	7b7a      	ldrb	r2, [r7, #13]
 8002fec:	701a      	strb	r2, [r3, #0]
		break;
 8002fee:	e026      	b.n	800303e <Piece_vParseNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ff6:	339e      	adds	r3, #158	; 0x9e
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003002:	339f      	adds	r3, #159	; 0x9f
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800300e:	33a0      	adds	r3, #160	; 0xa0
 8003010:	7b7a      	ldrb	r2, [r7, #13]
 8003012:	701a      	strb	r2, [r3, #0]
		break;
 8003014:	e013      	b.n	800303e <Piece_vParseNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800301c:	33a1      	adds	r3, #161	; 0xa1
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003028:	33a2      	adds	r3, #162	; 0xa2
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003034:	33a3      	adds	r3, #163	; 0xa3
 8003036:	7b7a      	ldrb	r2, [r7, #13]
 8003038:	701a      	strb	r2, [r3, #0]
		break;
 800303a:	e000      	b.n	800303e <Piece_vParseNoteGoal+0xfe>
	default:
		break;
 800303c:	bf00      	nop
	}
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop

0800304c <Piece_vParseGoal>:


void Piece_vParseGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	2b04      	cmp	r3, #4
 800305c:	d901      	bls.n	8003062 <Piece_vParseGoal+0x16>
 800305e:	2304      	movs	r3, #4
 8003060:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 8003062:	2300      	movs	r3, #0
 8003064:	81fb      	strh	r3, [r7, #14]
 8003066:	e008      	b.n	800307a <Piece_vParseGoal+0x2e>
	{
		Piece_vParseNoteGoal(pxPiece);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff69 	bl	8002f40 <Piece_vParseNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 800306e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003072:	b29b      	uxth	r3, r3
 8003074:	3301      	adds	r3, #1
 8003076:	b29b      	uxth	r3, r3
 8003078:	81fb      	strh	r3, [r7, #14]
 800307a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	429a      	cmp	r2, r3
 8003082:	dbf1      	blt.n	8003068 <Piece_vParseGoal+0x1c>
	}
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
 800309c:	4613      	mov	r3, r2
 800309e:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 80030a0:	78bb      	ldrb	r3, [r7, #2]
 80030a2:	4619      	mov	r1, r3
 80030a4:	48a0      	ldr	r0, [pc, #640]	; (8003328 <Piece_vPlayNotes+0x298>)
 80030a6:	f00a fe29 	bl	800dcfc <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	4619      	mov	r1, r3
 80030ae:	489f      	ldr	r0, [pc, #636]	; (800332c <Piece_vPlayNotes+0x29c>)
 80030b0:	f00a fe24 	bl	800dcfc <iprintf>

	Piece_vResetGoal(pxPiece);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ff21 	bl	8002efc <Piece_vResetGoal>
	Piece_vParseGoal(pxPiece, ucNumNotes);
 80030ba:	78bb      	ldrb	r3, [r7, #2]
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ffc4 	bl	800304c <Piece_vParseGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f98d 	bl	80033e4 <Piece_Debug_vPrintGoal>

	float fTupletScale;
	switch (ucBeatValue)
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d820      	bhi.n	8003112 <Piece_vPlayNotes+0x82>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <Piece_vPlayNotes+0x48>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030ed 	.word	0x080030ed
 80030dc:	080030f5 	.word	0x080030f5
 80030e0:	080030fb 	.word	0x080030fb
 80030e4:	08003103 	.word	0x08003103
 80030e8:	0800310b 	.word	0x0800310b
	{
	case NOPELET:
		fTupletScale = NOPELET_SCALE;
 80030ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80030f0:	617b      	str	r3, [r7, #20]
		break;
 80030f2:	e012      	b.n	800311a <Piece_vPlayNotes+0x8a>
	case TRIPLET:
		fTupletScale = TRIPLET_SCALE;
 80030f4:	4b8e      	ldr	r3, [pc, #568]	; (8003330 <Piece_vPlayNotes+0x2a0>)
 80030f6:	617b      	str	r3, [r7, #20]
		break;
 80030f8:	e00f      	b.n	800311a <Piece_vPlayNotes+0x8a>
	case QUINTUPLET:
		fTupletScale = QUINTUPLET_SCALE;
 80030fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80030fe:	617b      	str	r3, [r7, #20]
		break;
 8003100:	e00b      	b.n	800311a <Piece_vPlayNotes+0x8a>
	case SEXTUPLET:
		fTupletScale = SEXTUPLET_SCALE;
 8003102:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003106:	617b      	str	r3, [r7, #20]
		break;
 8003108:	e007      	b.n	800311a <Piece_vPlayNotes+0x8a>
	case SEPTUPLET:
		fTupletScale = SEPTUPLET_SCALE;
 800310a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800310e:	617b      	str	r3, [r7, #20]
		break;
 8003110:	e003      	b.n	800311a <Piece_vPlayNotes+0x8a>
	default:
		fTupletScale = NOPELET_SCALE;
 8003112:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003116:	617b      	str	r3, [r7, #20]
		break;
 8003118:	bf00      	nop
	}

	uint32_t ulMSPerBeatValue;
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003128:	eddf 6a82 	vldr	s13, [pc, #520]	; 8003334 <Piece_vPlayNotes+0x2a4>
 800312c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003130:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003338 <Piece_vPlayNotes+0x2a8>
 8003134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003138:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	2b0b      	cmp	r3, #11
 8003140:	f200 80d6 	bhi.w	80032f0 <Piece_vPlayNotes+0x260>
 8003144:	a201      	add	r2, pc, #4	; (adr r2, 800314c <Piece_vPlayNotes+0xbc>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	0800317d 	.word	0x0800317d
 8003150:	0800319d 	.word	0x0800319d
 8003154:	080031bd 	.word	0x080031bd
 8003158:	080031dd 	.word	0x080031dd
 800315c:	080031fd 	.word	0x080031fd
 8003160:	08003219 	.word	0x08003219
 8003164:	08003231 	.word	0x08003231
 8003168:	08003251 	.word	0x08003251
 800316c:	08003271 	.word	0x08003271
 8003170:	08003291 	.word	0x08003291
 8003174:	080032b1 	.word	0x080032b1
 8003178:	080032d1 	.word	0x080032d1
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LARGE_SCALE*fTupletScale);
 800317c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003180:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800333c <Piece_vPlayNotes+0x2ac>
 8003184:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003188:	edd7 7a05 	vldr	s15, [r7, #20]
 800318c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003194:	ee17 3a90 	vmov	r3, s15
 8003198:	613b      	str	r3, [r7, #16]
		break;
 800319a:	e0b5      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case LONG:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LONG_SCALE*fTupletScale);
 800319c:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80031a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031b4:	ee17 3a90 	vmov	r3, s15
 80031b8:	613b      	str	r3, [r7, #16]
		break;
 80031ba:	e0a5      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case BREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*BREVE_SCALE*fTupletScale);
 80031bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031c0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80031c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031d4:	ee17 3a90 	vmov	r3, s15
 80031d8:	613b      	str	r3, [r7, #16]
		break;
 80031da:	e095      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case SEMIBREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIBREVE_SCALE*fTupletScale);
 80031dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80031e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f4:	ee17 3a90 	vmov	r3, s15
 80031f8:	613b      	str	r3, [r7, #16]
		break;
 80031fa:	e085      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case MINIM:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*MINIM_SCALE*fTupletScale);
 80031fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003200:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003204:	edd7 7a05 	vldr	s15, [r7, #20]
 8003208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003210:	ee17 3a90 	vmov	r3, s15
 8003214:	613b      	str	r3, [r7, #16]
		break;
 8003216:	e077      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case CROTCHET:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8003218:	ed97 7a03 	vldr	s14, [r7, #12]
 800321c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003228:	ee17 3a90 	vmov	r3, s15
 800322c:	613b      	str	r3, [r7, #16]
		break;
 800322e:	e06b      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case QUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*QUAVER_SCALE*fTupletScale);
 8003230:	edd7 7a03 	vldr	s15, [r7, #12]
 8003234:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003238:	ee27 7a87 	vmul.f32	s14, s15, s14
 800323c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003248:	ee17 3a90 	vmov	r3, s15
 800324c:	613b      	str	r3, [r7, #16]
		break;
 800324e:	e05b      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case SEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIQUAVER_SCALE*fTupletScale);
 8003250:	edd7 7a03 	vldr	s15, [r7, #12]
 8003254:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003258:	ee27 7a87 	vmul.f32	s14, s15, s14
 800325c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003268:	ee17 3a90 	vmov	r3, s15
 800326c:	613b      	str	r3, [r7, #16]
		break;
 800326e:	e04b      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case DEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIQUAVER_SCALE*fTupletScale);
 8003270:	edd7 7a03 	vldr	s15, [r7, #12]
 8003274:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8003278:	ee27 7a87 	vmul.f32	s14, s15, s14
 800327c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003288:	ee17 3a90 	vmov	r3, s15
 800328c:	613b      	str	r3, [r7, #16]
		break;
 800328e:	e03b      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case HEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*HEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8003290:	edd7 7a03 	vldr	s15, [r7, #12]
 8003294:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003340 <Piece_vPlayNotes+0x2b0>
 8003298:	ee27 7a87 	vmul.f32	s14, s15, s14
 800329c:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a8:	ee17 3a90 	vmov	r3, s15
 80032ac:	613b      	str	r3, [r7, #16]
		break;
 80032ae:	e02b      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case SEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80032b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032b4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003344 <Piece_vPlayNotes+0x2b4>
 80032b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80032c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032c8:	ee17 3a90 	vmov	r3, s15
 80032cc:	613b      	str	r3, [r7, #16]
		break;
 80032ce:	e01b      	b.n	8003308 <Piece_vPlayNotes+0x278>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80032d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003348 <Piece_vPlayNotes+0x2b8>
 80032d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80032e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032e8:	ee17 3a90 	vmov	r3, s15
 80032ec:	613b      	str	r3, [r7, #16]
		break;
 80032ee:	e00b      	b.n	8003308 <Piece_vPlayNotes+0x278>
	default:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 80032f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80032f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003300:	ee17 3a90 	vmov	r3, s15
 8003304:	613b      	str	r3, [r7, #16]
		break;
 8003306:	bf00      	nop
	}


	if (ucNumNotes == 0)
 8003308:	78bb      	ldrb	r3, [r7, #2]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <Piece_vPlayNotes+0x284>
	{
		printf("REST\r\n");
 800330e:	480f      	ldr	r0, [pc, #60]	; (800334c <Piece_vPlayNotes+0x2bc>)
 8003310:	f00a fd7a 	bl	800de08 <puts>
	}

	Piece_vCaptureFragment(pxPiece, ulMSPerBeatValue);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fd9d 	bl	8002e58 <Piece_vCaptureFragment>
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	0800fed4 	.word	0x0800fed4
 800332c:	0800fee8 	.word	0x0800fee8
 8003330:	3f2aaaab 	.word	0x3f2aaaab
 8003334:	42700000 	.word	0x42700000
 8003338:	447a0000 	.word	0x447a0000
 800333c:	42000000 	.word	0x42000000
 8003340:	3d800000 	.word	0x3d800000
 8003344:	3d000000 	.word	0x3d000000
 8003348:	3c800000 	.word	0x3c800000
 800334c:	0800fefc 	.word	0x0800fefc

08003350 <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	09db      	lsrs	r3, r3, #7
 8003362:	b2db      	uxtb	r3, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	460a      	mov	r2, r1
 800337a:	71fb      	strb	r3, [r7, #7]
 800337c:	4613      	mov	r3, r2
 800337e:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d816      	bhi.n	80033b4 <Piece_usGetPitchTick+0x44>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <Piece_usGetPitchTick+0x1c>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033a3 	.word	0x080033a3
 8003394:	080033a9 	.word	0x080033a9
 8003398:	080033af 	.word	0x080033af
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
		break;
 80033a0:	e00b      	b.n	80033ba <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 80033a2:	230a      	movs	r3, #10
 80033a4:	73fb      	strb	r3, [r7, #15]
		break;
 80033a6:	e008      	b.n	80033ba <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 80033a8:	2314      	movs	r3, #20
 80033aa:	73fb      	strb	r3, [r7, #15]
		break;
 80033ac:	e005      	b.n	80033ba <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 80033ae:	231e      	movs	r3, #30
 80033b0:	73fb      	strb	r3, [r7, #15]
		break;
 80033b2:	e002      	b.n	80033ba <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
		break;
 80033b8:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	79bb      	ldrb	r3, [r7, #6]
 80033be:	4413      	add	r3, r2
 80033c0:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b47      	cmp	r3, #71	; 0x47
 80033c6:	bf28      	it	cs
 80033c8:	2347      	movcs	r3, #71	; 0x47
 80033ca:	73fb      	strb	r3, [r7, #15]

	return pusPitchTickMap[ucPitchTickIndex];
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <Piece_usGetPitchTick+0x70>)
 80033d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	20000004 	.word	0x20000004

080033e4 <Piece_Debug_vPrintGoal>:
}



void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 80033ec:	4877      	ldr	r0, [pc, #476]	; (80035cc <Piece_Debug_vPrintGoal+0x1e8>)
 80033ee:	f00a fd0b 	bl	800de08 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80033f8:	3398      	adds	r3, #152	; 0x98
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02e      	beq.n	800345e <Piece_Debug_vPrintGoal+0x7a>
	{
		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003406:	339a      	adds	r3, #154	; 0x9a
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	461c      	mov	r4, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003412:	339a      	adds	r3, #154	; 0x9a
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	2000      	movs	r0, #0
 800341a:	f7ff ffa9 	bl	8003370 <Piece_usGetPitchTick>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	4621      	mov	r1, r4
 8003424:	486a      	ldr	r0, [pc, #424]	; (80035d0 <Piece_Debug_vPrintGoal+0x1ec>)
 8003426:	f00a fc69 	bl	800dcfc <iprintf>

		G_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003430:	339a      	adds	r3, #154	; 0x9a
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4619      	mov	r1, r3
 8003436:	2000      	movs	r0, #0
 8003438:	f7ff ff9a 	bl	8003370 <Piece_usGetPitchTick>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	4b64      	ldr	r3, [pc, #400]	; (80035d4 <Piece_Debug_vPrintGoal+0x1f0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
		G_TIMER_HANDLE.Instance->CCR1 = G_TIMER_HANDLE.Instance->ARR/2;
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <Piece_Debug_vPrintGoal+0x1f0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <Piece_Debug_vPrintGoal+0x1f0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0852      	lsrs	r2, r2, #1
 8003452:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8003454:	2100      	movs	r1, #0
 8003456:	485f      	ldr	r0, [pc, #380]	; (80035d4 <Piece_Debug_vPrintGoal+0x1f0>)
 8003458:	f005 f8e0 	bl	800861c <HAL_TIM_PWM_Start_IT>
 800345c:	e003      	b.n	8003466 <Piece_Debug_vPrintGoal+0x82>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 800345e:	2100      	movs	r1, #0
 8003460:	485c      	ldr	r0, [pc, #368]	; (80035d4 <Piece_Debug_vPrintGoal+0x1f0>)
 8003462:	f005 fa27 	bl	80088b4 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xDString.bActive)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800346c:	339b      	adds	r3, #155	; 0x9b
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d02e      	beq.n	80034d2 <Piece_Debug_vPrintGoal+0xee>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800347a:	339d      	adds	r3, #157	; 0x9d
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461c      	mov	r4, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003486:	339d      	adds	r3, #157	; 0x9d
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	2001      	movs	r0, #1
 800348e:	f7ff ff6f 	bl	8003370 <Piece_usGetPitchTick>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	4621      	mov	r1, r4
 8003498:	484f      	ldr	r0, [pc, #316]	; (80035d8 <Piece_Debug_vPrintGoal+0x1f4>)
 800349a:	f00a fc2f 	bl	800dcfc <iprintf>

		D_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80034a4:	339d      	adds	r3, #157	; 0x9d
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7ff ff60 	bl	8003370 <Piece_usGetPitchTick>
 80034b0:	4603      	mov	r3, r0
 80034b2:	461a      	mov	r2, r3
 80034b4:	4b49      	ldr	r3, [pc, #292]	; (80035dc <Piece_Debug_vPrintGoal+0x1f8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	62da      	str	r2, [r3, #44]	; 0x2c
		D_TIMER_HANDLE.Instance->CCR1 = D_TIMER_HANDLE.Instance->ARR/2;
 80034ba:	4b48      	ldr	r3, [pc, #288]	; (80035dc <Piece_Debug_vPrintGoal+0x1f8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	4b46      	ldr	r3, [pc, #280]	; (80035dc <Piece_Debug_vPrintGoal+0x1f8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	0852      	lsrs	r2, r2, #1
 80034c6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80034c8:	2100      	movs	r1, #0
 80034ca:	4844      	ldr	r0, [pc, #272]	; (80035dc <Piece_Debug_vPrintGoal+0x1f8>)
 80034cc:	f005 f8a6 	bl	800861c <HAL_TIM_PWM_Start_IT>
 80034d0:	e003      	b.n	80034da <Piece_Debug_vPrintGoal+0xf6>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80034d2:	2100      	movs	r1, #0
 80034d4:	4841      	ldr	r0, [pc, #260]	; (80035dc <Piece_Debug_vPrintGoal+0x1f8>)
 80034d6:	f005 f9ed 	bl	80088b4 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xAString.bActive)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80034e0:	339e      	adds	r3, #158	; 0x9e
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02e      	beq.n	8003546 <Piece_Debug_vPrintGoal+0x162>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80034ee:	33a0      	adds	r3, #160	; 0xa0
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461c      	mov	r4, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80034fa:	33a0      	adds	r3, #160	; 0xa0
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	4619      	mov	r1, r3
 8003500:	2002      	movs	r0, #2
 8003502:	f7ff ff35 	bl	8003370 <Piece_usGetPitchTick>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	4621      	mov	r1, r4
 800350c:	4834      	ldr	r0, [pc, #208]	; (80035e0 <Piece_Debug_vPrintGoal+0x1fc>)
 800350e:	f00a fbf5 	bl	800dcfc <iprintf>

		A_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003518:	33a0      	adds	r3, #160	; 0xa0
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4619      	mov	r1, r3
 800351e:	2002      	movs	r0, #2
 8003520:	f7ff ff26 	bl	8003370 <Piece_usGetPitchTick>
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
 8003528:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <Piece_Debug_vPrintGoal+0x200>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	62da      	str	r2, [r3, #44]	; 0x2c
		A_TIMER_HANDLE.Instance->CCR1 = A_TIMER_HANDLE.Instance->ARR/2;
 800352e:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <Piece_Debug_vPrintGoal+0x200>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <Piece_Debug_vPrintGoal+0x200>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0852      	lsrs	r2, r2, #1
 800353a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 800353c:	2100      	movs	r1, #0
 800353e:	4829      	ldr	r0, [pc, #164]	; (80035e4 <Piece_Debug_vPrintGoal+0x200>)
 8003540:	f005 f86c 	bl	800861c <HAL_TIM_PWM_Start_IT>
 8003544:	e003      	b.n	800354e <Piece_Debug_vPrintGoal+0x16a>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8003546:	2100      	movs	r1, #0
 8003548:	4826      	ldr	r0, [pc, #152]	; (80035e4 <Piece_Debug_vPrintGoal+0x200>)
 800354a:	f005 f9b3 	bl	80088b4 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xEString.bActive)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003554:	33a1      	adds	r3, #161	; 0xa1
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02e      	beq.n	80035ba <Piece_Debug_vPrintGoal+0x1d6>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003562:	33a3      	adds	r3, #163	; 0xa3
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	461c      	mov	r4, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800356e:	33a3      	adds	r3, #163	; 0xa3
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	4619      	mov	r1, r3
 8003574:	2003      	movs	r0, #3
 8003576:	f7ff fefb 	bl	8003370 <Piece_usGetPitchTick>
 800357a:	4603      	mov	r3, r0
 800357c:	461a      	mov	r2, r3
 800357e:	4621      	mov	r1, r4
 8003580:	4819      	ldr	r0, [pc, #100]	; (80035e8 <Piece_Debug_vPrintGoal+0x204>)
 8003582:	f00a fbbb 	bl	800dcfc <iprintf>

		E_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800358c:	33a3      	adds	r3, #163	; 0xa3
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	2003      	movs	r0, #3
 8003594:	f7ff feec 	bl	8003370 <Piece_usGetPitchTick>
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <Piece_Debug_vPrintGoal+0x208>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	62da      	str	r2, [r3, #44]	; 0x2c
		E_TIMER_HANDLE.Instance->CCR1 = E_TIMER_HANDLE.Instance->ARR/2;
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <Piece_Debug_vPrintGoal+0x208>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <Piece_Debug_vPrintGoal+0x208>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	0852      	lsrs	r2, r2, #1
 80035ae:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80035b0:	2100      	movs	r1, #0
 80035b2:	480e      	ldr	r0, [pc, #56]	; (80035ec <Piece_Debug_vPrintGoal+0x208>)
 80035b4:	f005 f832 	bl	800861c <HAL_TIM_PWM_Start_IT>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
	}
}
 80035b8:	e003      	b.n	80035c2 <Piece_Debug_vPrintGoal+0x1de>
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80035ba:	2100      	movs	r1, #0
 80035bc:	480b      	ldr	r0, [pc, #44]	; (80035ec <Piece_Debug_vPrintGoal+0x208>)
 80035be:	f005 f979 	bl	80088b4 <HAL_TIM_PWM_Stop_IT>
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	0800ff14 	.word	0x0800ff14
 80035d0:	0800ff1c 	.word	0x0800ff1c
 80035d4:	2000d10c 	.word	0x2000d10c
 80035d8:	0800ff2c 	.word	0x0800ff2c
 80035dc:	200046a4 	.word	0x200046a4
 80035e0:	0800ff3c 	.word	0x0800ff3c
 80035e4:	2000e2c8 	.word	0x2000e2c8
 80035e8:	0800ff4c 	.word	0x0800ff4c
 80035ec:	20004e74 	.word	0x20004e74

080035f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_MspInit+0x4c>)
 80035f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_MspInit+0x4c>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6613      	str	r3, [r2, #96]	; 0x60
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <HAL_MspInit+0x4c>)
 8003604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_MspInit+0x4c>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	4a0a      	ldr	r2, [pc, #40]	; (800363c <HAL_MspInit+0x4c>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003618:	6593      	str	r3, [r2, #88]	; 0x58
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <HAL_MspInit+0x4c>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003626:	2200      	movs	r2, #0
 8003628:	210f      	movs	r1, #15
 800362a:	f06f 0001 	mvn.w	r0, #1
 800362e:	f002 f8c9 	bl	80057c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000

08003640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <HAL_ADC_MspInit+0x84>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d12b      	bne.n	80036ba <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_ADC_MspInit+0x88>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_ADC_MspInit+0x88>)
 8003668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800366c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800366e:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_ADC_MspInit+0x88>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800367a:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <HAL_ADC_MspInit+0x88>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_ADC_MspInit+0x88>)
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_ADC_MspInit+0x88>)
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003692:	230f      	movs	r3, #15
 8003694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003696:	230b      	movs	r3, #11
 8003698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	4619      	mov	r1, r3
 80036a4:	4809      	ldr	r0, [pc, #36]	; (80036cc <HAL_ADC_MspInit+0x8c>)
 80036a6:	f002 faef 	bl	8005c88 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2105      	movs	r1, #5
 80036ae:	2012      	movs	r0, #18
 80036b0:	f002 f888 	bl	80057c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80036b4:	2012      	movs	r0, #18
 80036b6:	f002 f8a1 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036ba:	bf00      	nop
 80036bc:	3728      	adds	r7, #40	; 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	50040000 	.word	0x50040000
 80036c8:	40021000 	.word	0x40021000
 80036cc:	48000800 	.word	0x48000800

080036d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_I2C_MspInit+0x7c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d128      	bne.n	8003744 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <HAL_I2C_MspInit+0x80>)
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_I2C_MspInit+0x80>)
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_I2C_MspInit+0x80>)
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800370a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800370e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003710:	2312      	movs	r3, #18
 8003712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003714:	2301      	movs	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003718:	2303      	movs	r3, #3
 800371a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800371c:	2304      	movs	r3, #4
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4619      	mov	r1, r3
 8003726:	480b      	ldr	r0, [pc, #44]	; (8003754 <HAL_I2C_MspInit+0x84>)
 8003728:	f002 faae 	bl	8005c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_I2C_MspInit+0x80>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	4a07      	ldr	r2, [pc, #28]	; (8003750 <HAL_I2C_MspInit+0x80>)
 8003732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003736:	6593      	str	r3, [r2, #88]	; 0x58
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_I2C_MspInit+0x80>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003744:	bf00      	nop
 8003746:	3728      	adds	r7, #40	; 0x28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40005400 	.word	0x40005400
 8003750:	40021000 	.word	0x40021000
 8003754:	48000400 	.word	0x48000400

08003758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a25      	ldr	r2, [pc, #148]	; (800380c <HAL_SPI_MspInit+0xb4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d144      	bne.n	8003804 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800377a:	4b25      	ldr	r3, [pc, #148]	; (8003810 <HAL_SPI_MspInit+0xb8>)
 800377c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377e:	4a24      	ldr	r2, [pc, #144]	; (8003810 <HAL_SPI_MspInit+0xb8>)
 8003780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003784:	6613      	str	r3, [r2, #96]	; 0x60
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <HAL_SPI_MspInit+0xb8>)
 8003788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_SPI_MspInit+0xb8>)
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_SPI_MspInit+0xb8>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800379e:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <HAL_SPI_MspInit+0xb8>)
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037aa:	4b19      	ldr	r3, [pc, #100]	; (8003810 <HAL_SPI_MspInit+0xb8>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	4a18      	ldr	r2, [pc, #96]	; (8003810 <HAL_SPI_MspInit+0xb8>)
 80037b0:	f043 0302 	orr.w	r3, r3, #2
 80037b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037b6:	4b16      	ldr	r3, [pc, #88]	; (8003810 <HAL_SPI_MspInit+0xb8>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037c2:	2320      	movs	r3, #32
 80037c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ce:	2303      	movs	r3, #3
 80037d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037d2:	2305      	movs	r3, #5
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d6:	f107 0314 	add.w	r3, r7, #20
 80037da:	4619      	mov	r1, r3
 80037dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e0:	f002 fa52 	bl	8005c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037e4:	2330      	movs	r3, #48	; 0x30
 80037e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e8:	2302      	movs	r3, #2
 80037ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f0:	2303      	movs	r3, #3
 80037f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037f4:	2305      	movs	r3, #5
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	4619      	mov	r1, r3
 80037fe:	4805      	ldr	r0, [pc, #20]	; (8003814 <HAL_SPI_MspInit+0xbc>)
 8003800:	f002 fa42 	bl	8005c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003804:	bf00      	nop
 8003806:	3728      	adds	r7, #40	; 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40013000 	.word	0x40013000
 8003810:	40021000 	.word	0x40021000
 8003814:	48000400 	.word	0x48000400

08003818 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a80      	ldr	r2, [pc, #512]	; (8003a28 <HAL_TIM_PWM_MspInit+0x210>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10c      	bne.n	8003844 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800382a:	4b80      	ldr	r3, [pc, #512]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 800382c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382e:	4a7f      	ldr	r2, [pc, #508]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 8003830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003834:	6613      	str	r3, [r2, #96]	; 0x60
 8003836:	4b7d      	ldr	r3, [pc, #500]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 8003838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003842:	e0ed      	b.n	8003a20 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM3)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a79      	ldr	r2, [pc, #484]	; (8003a30 <HAL_TIM_PWM_MspInit+0x218>)
 800384a:	4293      	cmp	r3, r2
 800384c:	f040 809a 	bne.w	8003984 <HAL_TIM_PWM_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003850:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	4a75      	ldr	r2, [pc, #468]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	6593      	str	r3, [r2, #88]	; 0x58
 800385c:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8003868:	4b72      	ldr	r3, [pc, #456]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 800386a:	4a73      	ldr	r2, [pc, #460]	; (8003a38 <HAL_TIM_PWM_MspInit+0x220>)
 800386c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 800386e:	4b71      	ldr	r3, [pc, #452]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 8003870:	2205      	movs	r2, #5
 8003872:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003874:	4b6f      	ldr	r3, [pc, #444]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 8003876:	2210      	movs	r2, #16
 8003878:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800387a:	4b6e      	ldr	r3, [pc, #440]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8003880:	4b6c      	ldr	r3, [pc, #432]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003886:	4b6b      	ldr	r3, [pc, #428]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 8003888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800388c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800388e:	4b69      	ldr	r3, [pc, #420]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 8003890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003894:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8003896:	4b67      	ldr	r3, [pc, #412]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 8003898:	2200      	movs	r2, #0
 800389a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800389c:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80038a2:	4864      	ldr	r0, [pc, #400]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 80038a4:	f001 ffb8 	bl	8005818 <HAL_DMA_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_TIM_PWM_MspInit+0x9a>
      Error_Handler();
 80038ae:	f7ff f9af 	bl	8002c10 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a5f      	ldr	r2, [pc, #380]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
 80038b8:	4a5e      	ldr	r2, [pc, #376]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a5c      	ldr	r2, [pc, #368]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
 80038c4:	4a5b      	ldr	r2, [pc, #364]	; (8003a34 <HAL_TIM_PWM_MspInit+0x21c>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 80038ca:	4b5c      	ldr	r3, [pc, #368]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 80038cc:	4a5c      	ldr	r2, [pc, #368]	; (8003a40 <HAL_TIM_PWM_MspInit+0x228>)
 80038ce:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_5;
 80038d0:	4b5a      	ldr	r3, [pc, #360]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 80038d2:	2205      	movs	r2, #5
 80038d4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038d6:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 80038d8:	2210      	movs	r2, #16
 80038da:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80038dc:	4b57      	ldr	r3, [pc, #348]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 80038de:	2200      	movs	r2, #0
 80038e0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80038e2:	4b56      	ldr	r3, [pc, #344]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038e8:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 80038ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ee:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038f0:	4b52      	ldr	r3, [pc, #328]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 80038f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038f6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80038fe:	4b4f      	ldr	r3, [pc, #316]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 8003900:	2200      	movs	r2, #0
 8003902:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003904:	484d      	ldr	r0, [pc, #308]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 8003906:	f001 ff87 	bl	8005818 <HAL_DMA_Init>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_TIM_PWM_MspInit+0xfc>
      Error_Handler();
 8003910:	f7ff f97e 	bl	8002c10 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a49      	ldr	r2, [pc, #292]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 8003918:	62da      	str	r2, [r3, #44]	; 0x2c
 800391a:	4a48      	ldr	r2, [pc, #288]	; (8003a3c <HAL_TIM_PWM_MspInit+0x224>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8003920:	4b48      	ldr	r3, [pc, #288]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 8003922:	4a49      	ldr	r2, [pc, #292]	; (8003a48 <HAL_TIM_PWM_MspInit+0x230>)
 8003924:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Request = DMA_REQUEST_5;
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 8003928:	2205      	movs	r2, #5
 800392a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800392c:	4b45      	ldr	r3, [pc, #276]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 800392e:	2210      	movs	r2, #16
 8003930:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003932:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 8003934:	2200      	movs	r2, #0
 8003936:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003938:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 800393a:	2280      	movs	r2, #128	; 0x80
 800393c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800393e:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 8003940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003944:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003946:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 8003948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800394c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800394e:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 8003950:	2200      	movs	r2, #0
 8003952:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003954:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 8003956:	2200      	movs	r2, #0
 8003958:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800395a:	483a      	ldr	r0, [pc, #232]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 800395c:	f001 ff5c 	bl	8005818 <HAL_DMA_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_TIM_PWM_MspInit+0x152>
      Error_Handler();
 8003966:	f7ff f953 	bl	8002c10 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a35      	ldr	r2, [pc, #212]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
 8003970:	4a34      	ldr	r2, [pc, #208]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a32      	ldr	r2, [pc, #200]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 800397a:	621a      	str	r2, [r3, #32]
 800397c:	4a31      	ldr	r2, [pc, #196]	; (8003a44 <HAL_TIM_PWM_MspInit+0x22c>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003982:	e04d      	b.n	8003a20 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM8)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a30      	ldr	r2, [pc, #192]	; (8003a4c <HAL_TIM_PWM_MspInit+0x234>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d137      	bne.n	80039fe <HAL_TIM_PWM_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800398e:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 8003990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003992:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 8003994:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003998:	6613      	str	r3, [r2, #96]	; 0x60
 800399a:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Channel7;
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <HAL_TIM_PWM_MspInit+0x23c>)
 80039aa:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_7;
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039ae:	2207      	movs	r2, #7
 80039b0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039b2:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039b4:	2210      	movs	r2, #16
 80039b6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ca:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039cc:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039d2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039dc:	2200      	movs	r2, #0
 80039de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 80039e0:	481b      	ldr	r0, [pc, #108]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039e2:	f001 ff19 	bl	8005818 <HAL_DMA_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_TIM_PWM_MspInit+0x1d8>
      Error_Handler();
 80039ec:	f7ff f910 	bl	8002c10 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
 80039f6:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <HAL_TIM_PWM_MspInit+0x238>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80039fc:	e010      	b.n	8003a20 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM15)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <HAL_TIM_PWM_MspInit+0x240>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10b      	bne.n	8003a20 <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0c:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a12:	6613      	str	r3, [r2, #96]	; 0x60
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_TIM_PWM_MspInit+0x214>)
 8003a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
}
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40000400 	.word	0x40000400
 8003a34:	20005020 	.word	0x20005020
 8003a38:	4002006c 	.word	0x4002006c
 8003a3c:	20004ec0 	.word	0x20004ec0
 8003a40:	4002001c 	.word	0x4002001c
 8003a44:	2000d15c 	.word	0x2000d15c
 8003a48:	40020030 	.word	0x40020030
 8003a4c:	40013400 	.word	0x40013400
 8003a50:	20003580 	.word	0x20003580
 8003a54:	40020480 	.word	0x40020480
 8003a58:	40014000 	.word	0x40014000

08003a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <HAL_TIM_Base_MspInit+0x5c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10c      	bne.n	8003a88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_TIM_Base_MspInit+0x60>)
 8003a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <HAL_TIM_Base_MspInit+0x60>)
 8003a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a78:	6613      	str	r3, [r2, #96]	; 0x60
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <HAL_TIM_Base_MspInit+0x60>)
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003a86:	e010      	b.n	8003aaa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ac0 <HAL_TIM_Base_MspInit+0x64>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10b      	bne.n	8003aaa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_TIM_Base_MspInit+0x60>)
 8003a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <HAL_TIM_Base_MspInit+0x60>)
 8003a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_TIM_Base_MspInit+0x60>)
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08e      	sub	sp, #56	; 0x38
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a76      	ldr	r2, [pc, #472]	; (8003cbc <HAL_TIM_MspPostInit+0x1f8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d11e      	bne.n	8003b24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae6:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	4a75      	ldr	r2, [pc, #468]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003af2:	4b73      	ldr	r3, [pc, #460]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b10:	2301      	movs	r3, #1
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b1e:	f002 f8b3 	bl	8005c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003b22:	e0c7      	b.n	8003cb4 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM3)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a66      	ldr	r2, [pc, #408]	; (8003cc4 <HAL_TIM_MspPostInit+0x200>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d138      	bne.n	8003ba0 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2e:	4b64      	ldr	r3, [pc, #400]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	4a63      	ldr	r2, [pc, #396]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b3a:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b46:	4b5e      	ldr	r3, [pc, #376]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	4a5d      	ldr	r2, [pc, #372]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b52:	4b5b      	ldr	r3, [pc, #364]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b76:	4619      	mov	r1, r3
 8003b78:	4853      	ldr	r0, [pc, #332]	; (8003cc8 <HAL_TIM_MspPostInit+0x204>)
 8003b7a:	f002 f885 	bl	8005c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b7e:	2340      	movs	r3, #64	; 0x40
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b96:	4619      	mov	r1, r3
 8003b98:	484c      	ldr	r0, [pc, #304]	; (8003ccc <HAL_TIM_MspPostInit+0x208>)
 8003b9a:	f002 f875 	bl	8005c88 <HAL_GPIO_Init>
}
 8003b9e:	e089      	b.n	8003cb4 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM8)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a4a      	ldr	r2, [pc, #296]	; (8003cd0 <HAL_TIM_MspPostInit+0x20c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d11c      	bne.n	8003be4 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003baa:	4b45      	ldr	r3, [pc, #276]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	4a44      	ldr	r2, [pc, #272]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bb6:	4b42      	ldr	r3, [pc, #264]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bda:	4619      	mov	r1, r3
 8003bdc:	483b      	ldr	r0, [pc, #236]	; (8003ccc <HAL_TIM_MspPostInit+0x208>)
 8003bde:	f002 f853 	bl	8005c88 <HAL_GPIO_Init>
}
 8003be2:	e067      	b.n	8003cb4 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM15)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3a      	ldr	r2, [pc, #232]	; (8003cd4 <HAL_TIM_MspPostInit+0x210>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d11d      	bne.n	8003c2a <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bee:	4b34      	ldr	r3, [pc, #208]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	4a33      	ldr	r2, [pc, #204]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bfa:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c14:	2300      	movs	r3, #0
 8003c16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003c18:	230e      	movs	r3, #14
 8003c1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c20:	4619      	mov	r1, r3
 8003c22:	4829      	ldr	r0, [pc, #164]	; (8003cc8 <HAL_TIM_MspPostInit+0x204>)
 8003c24:	f002 f830 	bl	8005c88 <HAL_GPIO_Init>
}
 8003c28:	e044      	b.n	8003cb4 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM16)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <HAL_TIM_MspPostInit+0x214>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d11d      	bne.n	8003c70 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c34:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c38:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c40:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c4c:	2340      	movs	r3, #64	; 0x40
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c50:	2302      	movs	r3, #2
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003c5c:	230e      	movs	r3, #14
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c6a:	f002 f80d 	bl	8005c88 <HAL_GPIO_Init>
}
 8003c6e:	e021      	b.n	8003cb4 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM17)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_TIM_MspPostInit+0x218>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d11c      	bne.n	8003cb4 <HAL_TIM_MspPostInit+0x1f0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7a:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c86:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <HAL_TIM_MspPostInit+0x1fc>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	2302      	movs	r3, #2
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8003ca2:	230e      	movs	r3, #14
 8003ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003caa:	4619      	mov	r1, r3
 8003cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cb0:	f001 ffea 	bl	8005c88 <HAL_GPIO_Init>
}
 8003cb4:	bf00      	nop
 8003cb6:	3738      	adds	r7, #56	; 0x38
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	48000400 	.word	0x48000400
 8003ccc:	48000800 	.word	0x48000800
 8003cd0:	40013400 	.word	0x40013400
 8003cd4:	40014000 	.word	0x40014000
 8003cd8:	40014400 	.word	0x40014400
 8003cdc:	40014800 	.word	0x40014800

08003ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <HAL_UART_MspInit+0x7c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d128      	bne.n	8003d54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_UART_MspInit+0x80>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <HAL_UART_MspInit+0x80>)
 8003d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <HAL_UART_MspInit+0x80>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_UART_MspInit+0x80>)
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	4a10      	ldr	r2, [pc, #64]	; (8003d60 <HAL_UART_MspInit+0x80>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_UART_MspInit+0x80>)
 8003d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d32:	230c      	movs	r3, #12
 8003d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d36:	2302      	movs	r3, #2
 8003d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d42:	2307      	movs	r3, #7
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d50:	f001 ff9a 	bl	8005c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d54:	bf00      	nop
 8003d56:	3728      	adds	r7, #40	; 0x28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40004400 	.word	0x40004400
 8003d60:	40021000 	.word	0x40021000

08003d64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08c      	sub	sp, #48	; 0x30
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003d74:	2200      	movs	r2, #0
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	2036      	movs	r0, #54	; 0x36
 8003d7a:	f001 fd23 	bl	80057c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d7e:	2036      	movs	r0, #54	; 0x36
 8003d80:	f001 fd3c 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d84:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <HAL_InitTick+0x9c>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_InitTick+0x9c>)
 8003d8a:	f043 0310 	orr.w	r3, r3, #16
 8003d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_InitTick+0x9c>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d9c:	f107 0210 	add.w	r2, r7, #16
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f003 f846 	bl	8006e38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003dac:	f003 f818 	bl	8006de0 <HAL_RCC_GetPCLK1Freq>
 8003db0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <HAL_InitTick+0xa0>)
 8003db6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dba:	0c9b      	lsrs	r3, r3, #18
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_InitTick+0xa4>)
 8003dc2:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <HAL_InitTick+0xa8>)
 8003dc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_InitTick+0xa4>)
 8003dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003dcc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003dce:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <HAL_InitTick+0xa4>)
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_InitTick+0xa4>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_InitTick+0xa4>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003de0:	4809      	ldr	r0, [pc, #36]	; (8003e08 <HAL_InitTick+0xa4>)
 8003de2:	f004 fafb 	bl	80083dc <HAL_TIM_Base_Init>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003dec:	4806      	ldr	r0, [pc, #24]	; (8003e08 <HAL_InitTick+0xa4>)
 8003dee:	f004 fb4d 	bl	800848c <HAL_TIM_Base_Start_IT>
 8003df2:	4603      	mov	r3, r0
 8003df4:	e000      	b.n	8003df8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3730      	adds	r7, #48	; 0x30
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	431bde83 	.word	0x431bde83
 8003e08:	2000e314 	.word	0x2000e314
 8003e0c:	40001000 	.word	0x40001000

08003e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e14:	e7fe      	b.n	8003e14 <NMI_Handler+0x4>

08003e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e1a:	e7fe      	b.n	8003e1a <HardFault_Handler+0x4>

08003e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e20:	e7fe      	b.n	8003e20 <MemManage_Handler+0x4>

08003e22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e26:	e7fe      	b.n	8003e26 <BusFault_Handler+0x4>

08003e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e2c:	e7fe      	b.n	8003e2c <UsageFault_Handler+0x4>

08003e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <DMA1_Channel2_IRQHandler+0x10>)
 8003e42:	f001 fe42 	bl	8005aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20004ec0 	.word	0x20004ec0

08003e50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <DMA1_Channel3_IRQHandler+0x10>)
 8003e56:	f001 fe38 	bl	8005aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	2000d15c 	.word	0x2000d15c

08003e64 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <DMA1_Channel6_IRQHandler+0x10>)
 8003e6a:	f001 fe2e 	bl	8005aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20005020 	.word	0x20005020

08003e78 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <ADC1_2_IRQHandler+0x10>)
 8003e7e:	f000 fcb9 	bl	80047f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20004f54 	.word	0x20004f54

08003e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <TIM6_DAC_IRQHandler+0x38>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <TIM6_DAC_IRQHandler+0x38>)
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <TIM6_DAC_IRQHandler+0x38>)
 8003ea2:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <TIM6_DAC_IRQHandler+0x3c>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <TIM6_DAC_IRQHandler+0x3c>)
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <TIM6_DAC_IRQHandler+0x3c>)
 8003eb6:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003eb8:	4804      	ldr	r0, [pc, #16]	; (8003ecc <TIM6_DAC_IRQHandler+0x40>)
 8003eba:	f005 f8df 	bl	800907c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	2000357a 	.word	0x2000357a
 8003ec8:	20003578 	.word	0x20003578
 8003ecc:	2000e314 	.word	0x2000e314

08003ed0 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003ed4:	4802      	ldr	r0, [pc, #8]	; (8003ee0 <DMA2_Channel7_IRQHandler+0x10>)
 8003ed6:	f001 fdf8 	bl	8005aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20003580 	.word	0x20003580

08003ee4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e00a      	b.n	8003f0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ef6:	f3af 8000 	nop.w
 8003efa:	4601      	mov	r1, r0
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	60ba      	str	r2, [r7, #8]
 8003f02:	b2ca      	uxtb	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	dbf0      	blt.n	8003ef6 <_read+0x12>
	}

return len;
 8003f14:	687b      	ldr	r3, [r7, #4]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e009      	b.n	8003f44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	60ba      	str	r2, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fd ff5b 	bl	8001df4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3301      	adds	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	dbf1      	blt.n	8003f30 <_write+0x12>
	}
	return len;
 8003f4c:	687b      	ldr	r3, [r7, #4]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <_close>:

int _close(int file)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
	return -1;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f7e:	605a      	str	r2, [r3, #4]
	return 0;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <_isatty>:

int _isatty(int file)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
	return 1;
 8003f96:	2301      	movs	r3, #1
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
	return 0;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fc8:	4a14      	ldr	r2, [pc, #80]	; (800401c <_sbrk+0x5c>)
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <_sbrk+0x60>)
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <_sbrk+0x64>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <_sbrk+0x64>)
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <_sbrk+0x68>)
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <_sbrk+0x64>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d207      	bcs.n	8004000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ff0:	f009 fe44 	bl	800dc7c <__errno>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	220c      	movs	r2, #12
 8003ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ffe:	e009      	b.n	8004014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <_sbrk+0x64>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004006:	4b07      	ldr	r3, [pc, #28]	; (8004024 <_sbrk+0x64>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	4a05      	ldr	r2, [pc, #20]	; (8004024 <_sbrk+0x64>)
 8004010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20018000 	.word	0x20018000
 8004020:	00000400 	.word	0x00000400
 8004024:	20000140 	.word	0x20000140
 8004028:	20010428 	.word	0x20010428

0800402c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004030:	4b15      	ldr	r3, [pc, #84]	; (8004088 <SystemInit+0x5c>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	4a14      	ldr	r2, [pc, #80]	; (8004088 <SystemInit+0x5c>)
 8004038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800403c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <SystemInit+0x60>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a11      	ldr	r2, [pc, #68]	; (800408c <SystemInit+0x60>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <SystemInit+0x60>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <SystemInit+0x60>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a0d      	ldr	r2, [pc, #52]	; (800408c <SystemInit+0x60>)
 8004058:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800405c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004060:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <SystemInit+0x60>)
 8004064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004068:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <SystemInit+0x60>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a07      	ldr	r2, [pc, #28]	; (800408c <SystemInit+0x60>)
 8004070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004074:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <SystemInit+0x60>)
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	e000ed00 	.word	0xe000ed00
 800408c:	40021000 	.word	0x40021000

08004090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004094:	f7ff ffca 	bl	800402c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004098:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800409a:	e003      	b.n	80040a4 <LoopCopyDataInit>

0800409c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800409e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80040a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80040a2:	3104      	adds	r1, #4

080040a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80040a4:	480a      	ldr	r0, [pc, #40]	; (80040d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80040a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80040aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80040ac:	d3f6      	bcc.n	800409c <CopyDataInit>
	ldr	r2, =_sbss
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80040b0:	e002      	b.n	80040b8 <LoopFillZerobss>

080040b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80040b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80040b4:	f842 3b04 	str.w	r3, [r2], #4

080040b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <LoopForever+0x16>)
	cmp	r2, r3
 80040ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80040bc:	d3f9      	bcc.n	80040b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040be:	f009 fde3 	bl	800dc88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040c2:	f7fd fea9 	bl	8001e18 <main>

080040c6 <LoopForever>:

LoopForever:
    b LoopForever
 80040c6:	e7fe      	b.n	80040c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80040c8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80040cc:	080102c8 	.word	0x080102c8
	ldr	r0, =_sdata
 80040d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80040d4:	2000011c 	.word	0x2000011c
	ldr	r2, =_sbss
 80040d8:	2000011c 	.word	0x2000011c
	ldr	r3, = _ebss
 80040dc:	20010428 	.word	0x20010428

080040e0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040e0:	e7fe      	b.n	80040e0 <ADC3_IRQHandler>
	...

080040e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <HAL_Init+0x3c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <HAL_Init+0x3c>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040fa:	2003      	movs	r0, #3
 80040fc:	f001 fb57 	bl	80057ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004100:	2000      	movs	r0, #0
 8004102:	f7ff fe2f 	bl	8003d64 <HAL_InitTick>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	71fb      	strb	r3, [r7, #7]
 8004110:	e001      	b.n	8004116 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004112:	f7ff fa6d 	bl	80035f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004116:	79fb      	ldrb	r3, [r7, #7]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40022000 	.word	0x40022000

08004124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_IncTick+0x20>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_IncTick+0x24>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4413      	add	r3, r2
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_IncTick+0x24>)
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	2000009c 	.word	0x2000009c
 8004148:	2000e360 	.word	0x2000e360

0800414c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return uwTick;
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <HAL_GetTick+0x14>)
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	2000e360 	.word	0x2000e360

08004164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800416c:	f7ff ffee 	bl	800414c <HAL_GetTick>
 8004170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800417c:	d005      	beq.n	800418a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <HAL_Delay+0x44>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800418a:	bf00      	nop
 800418c:	f7ff ffde 	bl	800414c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	429a      	cmp	r2, r3
 800419a:	d8f7      	bhi.n	800418c <HAL_Delay+0x28>
  {
  }
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	2000009c 	.word	0x2000009c

080041ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3360      	adds	r3, #96	; 0x60
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <LL_ADC_SetOffset+0x44>)
 8004236:	4013      	ands	r3, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	4313      	orrs	r3, r2
 8004244:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	03fff000 	.word	0x03fff000

0800425c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3360      	adds	r3, #96	; 0x60
 800426a:	461a      	mov	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3360      	adds	r3, #96	; 0x60
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3330      	adds	r3, #48	; 0x30
 80042f4:	461a      	mov	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	4413      	add	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	211f      	movs	r1, #31
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	401a      	ands	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0e9b      	lsrs	r3, r3, #26
 800431c:	f003 011f 	and.w	r1, r3, #31
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	fa01 f303 	lsl.w	r3, r1, r3
 800432a:	431a      	orrs	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004348:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004362:	b480      	push	{r7}
 8004364:	b087      	sub	sp, #28
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3314      	adds	r3, #20
 8004372:	461a      	mov	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	0e5b      	lsrs	r3, r3, #25
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	4413      	add	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	0d1b      	lsrs	r3, r3, #20
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	2107      	movs	r1, #7
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	401a      	ands	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	0d1b      	lsrs	r3, r3, #20
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	431a      	orrs	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d0:	43db      	mvns	r3, r3
 80043d2:	401a      	ands	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f003 0318 	and.w	r3, r3, #24
 80043da:	4908      	ldr	r1, [pc, #32]	; (80043fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80043dc:	40d9      	lsrs	r1, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	400b      	ands	r3, r1
 80043e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	0007ffff 	.word	0x0007ffff

08004400 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 031f 	and.w	r3, r3, #31
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6093      	str	r3, [r2, #8]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004470:	d101      	bne.n	8004476 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c0:	d101      	bne.n	80044c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <LL_ADC_IsEnabled+0x18>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <LL_ADC_IsEnabled+0x1a>
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b04      	cmp	r3, #4
 800450c:	d101      	bne.n	8004512 <LL_ADC_REG_IsConversionOngoing+0x18>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b08      	cmp	r3, #8
 8004532:	d101      	bne.n	8004538 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004554:	2300      	movs	r3, #0
 8004556:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e136      	b.n	80047d0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff f865 	bl	8003640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff67 	bl	800445c <LL_ADC_IsDeepPowerDownEnabled>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ff4d 	bl	8004438 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff ff82 	bl	80044ac <LL_ADC_IsInternalRegulatorEnabled>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d115      	bne.n	80045da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff ff66 	bl	8004484 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b8:	4b87      	ldr	r3, [pc, #540]	; (80047d8 <HAL_ADC_Init+0x290>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	4a87      	ldr	r2, [pc, #540]	; (80047dc <HAL_ADC_Init+0x294>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	3301      	adds	r3, #1
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045cc:	e002      	b.n	80045d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f9      	bne.n	80045ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff64 	bl	80044ac <LL_ADC_IsInternalRegulatorEnabled>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10d      	bne.n	8004606 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	f043 0210 	orr.w	r2, r3, #16
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	f043 0201 	orr.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ff75 	bl	80044fa <LL_ADC_REG_IsConversionOngoing>
 8004610:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 80cf 	bne.w	80047be <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f040 80cb 	bne.w	80047be <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004630:	f043 0202 	orr.w	r2, r3, #2
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff49 	bl	80044d4 <LL_ADC_IsEnabled>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d115      	bne.n	8004674 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004648:	4865      	ldr	r0, [pc, #404]	; (80047e0 <HAL_ADC_Init+0x298>)
 800464a:	f7ff ff43 	bl	80044d4 <LL_ADC_IsEnabled>
 800464e:	4604      	mov	r4, r0
 8004650:	4864      	ldr	r0, [pc, #400]	; (80047e4 <HAL_ADC_Init+0x29c>)
 8004652:	f7ff ff3f 	bl	80044d4 <LL_ADC_IsEnabled>
 8004656:	4603      	mov	r3, r0
 8004658:	431c      	orrs	r4, r3
 800465a:	4863      	ldr	r0, [pc, #396]	; (80047e8 <HAL_ADC_Init+0x2a0>)
 800465c:	f7ff ff3a 	bl	80044d4 <LL_ADC_IsEnabled>
 8004660:	4603      	mov	r3, r0
 8004662:	4323      	orrs	r3, r4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4619      	mov	r1, r3
 800466e:	485f      	ldr	r0, [pc, #380]	; (80047ec <HAL_ADC_Init+0x2a4>)
 8004670:	f7ff fd9c 	bl	80041ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7e5b      	ldrb	r3, [r3, #25]
 8004678:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800467e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004684:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800468a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004692:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004694:	4313      	orrs	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d106      	bne.n	80046b0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	3b01      	subs	r3, #1
 80046a8:	045b      	lsls	r3, r3, #17
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d009      	beq.n	80046cc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_ADC_Init+0x2a8>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	69b9      	ldr	r1, [r7, #24]
 80046dc:	430b      	orrs	r3, r1
 80046de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff08 	bl	80044fa <LL_ADC_REG_IsConversionOngoing>
 80046ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff15 	bl	8004520 <LL_ADC_INJ_IsConversionOngoing>
 80046f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d13d      	bne.n	800477a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d13a      	bne.n	800477a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004708:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004710:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004720:	f023 0302 	bic.w	r3, r3, #2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	69b9      	ldr	r1, [r7, #24]
 800472a:	430b      	orrs	r3, r1
 800472c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004734:	2b01      	cmp	r3, #1
 8004736:	d118      	bne.n	800476a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004742:	f023 0304 	bic.w	r3, r3, #4
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800474e:	4311      	orrs	r1, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800475a:	430a      	orrs	r2, r1
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	611a      	str	r2, [r3, #16]
 8004768:	e007      	b.n	800477a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10c      	bne.n	800479c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	f023 010f 	bic.w	r1, r3, #15
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	1e5a      	subs	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
 800479a:	e007      	b.n	80047ac <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 020f 	bic.w	r2, r2, #15
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f023 0303 	bic.w	r3, r3, #3
 80047b4:	f043 0201 	orr.w	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
 80047bc:	e007      	b.n	80047ce <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	f043 0210 	orr.w	r2, r3, #16
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3724      	adds	r7, #36	; 0x24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd90      	pop	{r4, r7, pc}
 80047d8:	20000094 	.word	0x20000094
 80047dc:	053e2d63 	.word	0x053e2d63
 80047e0:	50040000 	.word	0x50040000
 80047e4:	50040100 	.word	0x50040100
 80047e8:	50040200 	.word	0x50040200
 80047ec:	50040300 	.word	0x50040300
 80047f0:	fff0c007 	.word	0xfff0c007

080047f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80047fc:	2300      	movs	r3, #0
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004810:	4882      	ldr	r0, [pc, #520]	; (8004a1c <HAL_ADC_IRQHandler+0x228>)
 8004812:	f7ff fdf5 	bl	8004400 <LL_ADC_GetMultimode>
 8004816:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d017      	beq.n	8004852 <HAL_ADC_IRQHandler+0x5e>
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d012      	beq.n	8004852 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fe4b 	bl	80054e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2202      	movs	r2, #2
 8004850:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <HAL_ADC_IRQHandler+0x72>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8083 	beq.w	8004978 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d07d      	beq.n	8004978 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fd10 	bl	80042be <LL_ADC_REG_IsTriggerSourceSWStart>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d062      	beq.n	800496a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a5d      	ldr	r2, [pc, #372]	; (8004a20 <HAL_ADC_IRQHandler+0x22c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d002      	beq.n	80048b4 <HAL_ADC_IRQHandler+0xc0>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	e000      	b.n	80048b6 <HAL_ADC_IRQHandler+0xc2>
 80048b4:	4b5b      	ldr	r3, [pc, #364]	; (8004a24 <HAL_ADC_IRQHandler+0x230>)
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d008      	beq.n	80048d0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d002      	beq.n	80048d0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b09      	cmp	r3, #9
 80048ce:	d104      	bne.n	80048da <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	e00c      	b.n	80048f4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a50      	ldr	r2, [pc, #320]	; (8004a20 <HAL_ADC_IRQHandler+0x22c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d002      	beq.n	80048ea <HAL_ADC_IRQHandler+0xf6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	e000      	b.n	80048ec <HAL_ADC_IRQHandler+0xf8>
 80048ea:	4b4e      	ldr	r3, [pc, #312]	; (8004a24 <HAL_ADC_IRQHandler+0x230>)
 80048ec:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d135      	bne.n	800496a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d12e      	bne.n	800496a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fdf2 	bl	80044fa <LL_ADC_REG_IsConversionOngoing>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11a      	bne.n	8004952 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 020c 	bic.w	r2, r2, #12
 800492a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d112      	bne.n	800496a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	f043 0201 	orr.w	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	655a      	str	r2, [r3, #84]	; 0x54
 8004950:	e00b      	b.n	800496a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f95c 	bl	8004c28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	220c      	movs	r2, #12
 8004976:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d004      	beq.n	800498c <HAL_ADC_IRQHandler+0x198>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 809f 	beq.w	8004ad6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8099 	beq.w	8004ad6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fcbb 	bl	800433c <LL_ADC_INJ_IsTriggerSourceSWStart>
 80049c6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fc76 	bl	80042be <LL_ADC_REG_IsTriggerSourceSWStart>
 80049d2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <HAL_ADC_IRQHandler+0x22c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d002      	beq.n	80049e4 <HAL_ADC_IRQHandler+0x1f0>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	e000      	b.n	80049e6 <HAL_ADC_IRQHandler+0x1f2>
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_ADC_IRQHandler+0x230>)
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d008      	beq.n	8004a00 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d002      	beq.n	8004a00 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b07      	cmp	r3, #7
 80049fe:	d104      	bne.n	8004a0a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	623b      	str	r3, [r7, #32]
 8004a08:	e013      	b.n	8004a32 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <HAL_ADC_IRQHandler+0x22c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_ADC_IRQHandler+0x234>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	e007      	b.n	8004a2a <HAL_ADC_IRQHandler+0x236>
 8004a1a:	bf00      	nop
 8004a1c:	50040300 	.word	0x50040300
 8004a20:	50040100 	.word	0x50040100
 8004a24:	50040000 	.word	0x50040000
 8004a28:	4b7d      	ldr	r3, [pc, #500]	; (8004c20 <HAL_ADC_IRQHandler+0x42c>)
 8004a2a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d047      	beq.n	8004ac8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_ADC_IRQHandler+0x25e>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d03f      	beq.n	8004ac8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d13a      	bne.n	8004ac8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d133      	bne.n	8004ac8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d12e      	bne.n	8004ac8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fd56 	bl	8004520 <LL_ADC_INJ_IsConversionOngoing>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d11a      	bne.n	8004ab0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a88:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d112      	bne.n	8004ac8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
 8004aae:	e00b      	b.n	8004ac8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	f043 0210 	orr.w	r2, r3, #16
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	f043 0201 	orr.w	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fce1 	bl	8005490 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2260      	movs	r2, #96	; 0x60
 8004ad4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d011      	beq.n	8004b04 <HAL_ADC_IRQHandler+0x310>
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00c      	beq.n	8004b04 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f8a0 	bl	8004c3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d012      	beq.n	8004b34 <HAL_ADC_IRQHandler+0x340>
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fcc7 	bl	80054b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d012      	beq.n	8004b64 <HAL_ADC_IRQHandler+0x370>
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00d      	beq.n	8004b64 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fcb9 	bl	80054cc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d036      	beq.n	8004bdc <HAL_ADC_IRQHandler+0x3e8>
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d031      	beq.n	8004bdc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8004b80:	2301      	movs	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
 8004b84:	e014      	b.n	8004bb0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b8c:	4825      	ldr	r0, [pc, #148]	; (8004c24 <HAL_ADC_IRQHandler+0x430>)
 8004b8e:	f7ff fc45 	bl	800441c <LL_ADC_GetMultiDMATransfer>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00b      	beq.n	8004bb0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9c:	e008      	b.n	8004bb0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004bac:	2301      	movs	r3, #1
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bba:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	f043 0202 	orr.w	r2, r3, #2
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f83e 	bl	8004c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2210      	movs	r2, #16
 8004bda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <HAL_ADC_IRQHandler+0x424>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	f043 0208 	orr.w	r2, r3, #8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c10:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fc46 	bl	80054a4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004c18:	bf00      	nop
 8004c1a:	3728      	adds	r7, #40	; 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	50040000 	.word	0x50040000
 8004c24:	50040300 	.word	0x50040300

08004c28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b0b6      	sub	sp, #216	; 0xd8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x22>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e3c7      	b.n	8005416 <HAL_ADC_ConfigChannel+0x7b2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fc31 	bl	80044fa <LL_ADC_REG_IsConversionOngoing>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 83a8 	bne.w	80053f0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b05      	cmp	r3, #5
 8004ca6:	d824      	bhi.n	8004cf2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	3b02      	subs	r3, #2
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d81b      	bhi.n	8004cea <HAL_ADC_ConfigChannel+0x86>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <HAL_ADC_ConfigChannel+0x54>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cc9 	.word	0x08004cc9
 8004cbc:	08004cd1 	.word	0x08004cd1
 8004cc0:	08004cd9 	.word	0x08004cd9
 8004cc4:	08004ce1 	.word	0x08004ce1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	220c      	movs	r2, #12
 8004ccc:	605a      	str	r2, [r3, #4]
          break;
 8004cce:	e011      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2212      	movs	r2, #18
 8004cd4:	605a      	str	r2, [r3, #4]
          break;
 8004cd6:	e00d      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2218      	movs	r2, #24
 8004cdc:	605a      	str	r2, [r3, #4]
          break;
 8004cde:	e009      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ce6:	605a      	str	r2, [r3, #4]
          break;
 8004ce8:	e004      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2206      	movs	r2, #6
 8004cee:	605a      	str	r2, [r3, #4]
          break;
 8004cf0:	e000      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004cf2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	f7ff faef 	bl	80042e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fbf5 	bl	80044fa <LL_ADC_REG_IsConversionOngoing>
 8004d10:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fc01 	bl	8004520 <LL_ADC_INJ_IsConversionOngoing>
 8004d1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 81a6 	bne.w	8005078 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 81a1 	bne.w	8005078 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f7ff fb0d 	bl	8004362 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	08db      	lsrs	r3, r3, #3
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d00a      	beq.n	8004d80 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6919      	ldr	r1, [r3, #16]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d7a:	f7ff fa4b 	bl	8004214 <LL_ADC_SetOffset>
 8004d7e:	e17b      	b.n	8005078 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fa68 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x148>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fa5d 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004da2:	4603      	mov	r3, r0
 8004da4:	0e9b      	lsrs	r3, r3, #26
 8004da6:	f003 021f 	and.w	r2, r3, #31
 8004daa:	e01e      	b.n	8004dea <HAL_ADC_ConfigChannel+0x186>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fa52 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004dd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004dda:	2320      	movs	r3, #32
 8004ddc:	e004      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004de2:	fab3 f383 	clz	r3, r3
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <HAL_ADC_ConfigChannel+0x19e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	0e9b      	lsrs	r3, r3, #26
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	e018      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x1d0>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004e1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004e26:	2320      	movs	r3, #32
 8004e28:	e004      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e2e:	fab3 f383 	clz	r3, r3
 8004e32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d106      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff fa21 	bl	8004288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fa05 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x20e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff f9fa 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	0e9b      	lsrs	r3, r3, #26
 8004e6c:	f003 021f 	and.w	r2, r3, #31
 8004e70:	e01e      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x24c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2101      	movs	r1, #1
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff f9ef 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e88:	fa93 f3a3 	rbit	r3, r3
 8004e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004e90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004e98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	e004      	b.n	8004eae <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ea8:	fab3 f383 	clz	r3, r3
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x264>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	0e9b      	lsrs	r3, r3, #26
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	e018      	b.n	8004efa <HAL_ADC_ConfigChannel+0x296>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ed4:	fa93 f3a3 	rbit	r3, r3
 8004ed8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004eec:	2320      	movs	r3, #32
 8004eee:	e004      	b.n	8004efa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ef4:	fab3 f383 	clz	r3, r3
 8004ef8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d106      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	2101      	movs	r1, #1
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff f9be 	bl	8004288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2102      	movs	r1, #2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff f9a2 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x2d4>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2102      	movs	r1, #2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff f997 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	0e9b      	lsrs	r3, r3, #26
 8004f32:	f003 021f 	and.w	r2, r3, #31
 8004f36:	e01e      	b.n	8004f76 <HAL_ADC_ConfigChannel+0x312>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff f98c 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f4e:	fa93 f3a3 	rbit	r3, r3
 8004f52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004f5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004f66:	2320      	movs	r3, #32
 8004f68:	e004      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f6e:	fab3 f383 	clz	r3, r3
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d105      	bne.n	8004f8e <HAL_ADC_ConfigChannel+0x32a>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	0e9b      	lsrs	r3, r3, #26
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	e016      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x358>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f9a:	fa93 f3a3 	rbit	r3, r3
 8004f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004fae:	2320      	movs	r3, #32
 8004fb0:	e004      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d106      	bne.n	8004fce <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff f95d 	bl	8004288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2103      	movs	r1, #3
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff f941 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x396>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2103      	movs	r1, #3
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff f936 	bl	800425c <LL_ADC_GetOffsetChannel>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	0e9b      	lsrs	r3, r3, #26
 8004ff4:	f003 021f 	and.w	r2, r3, #31
 8004ff8:	e017      	b.n	800502a <HAL_ADC_ConfigChannel+0x3c6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2103      	movs	r1, #3
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff f92b 	bl	800425c <LL_ADC_GetOffsetChannel>
 8005006:	4603      	mov	r3, r0
 8005008:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500c:	fa93 f3a3 	rbit	r3, r3
 8005010:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005014:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800501c:	2320      	movs	r3, #32
 800501e:	e003      	b.n	8005028 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005022:	fab3 f383 	clz	r3, r3
 8005026:	b2db      	uxtb	r3, r3
 8005028:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005032:	2b00      	cmp	r3, #0
 8005034:	d105      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x3de>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	0e9b      	lsrs	r3, r3, #26
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	e011      	b.n	8005066 <HAL_ADC_ConfigChannel+0x402>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800504a:	fa93 f3a3 	rbit	r3, r3
 800504e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005052:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800505a:	2320      	movs	r3, #32
 800505c:	e003      	b.n	8005066 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800505e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005060:	fab3 f383 	clz	r3, r3
 8005064:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005066:	429a      	cmp	r2, r3
 8005068:	d106      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	2103      	movs	r1, #3
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff f908 	bl	8004288 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fa29 	bl	80044d4 <LL_ADC_IsEnabled>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	f040 813f 	bne.w	8005308 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	461a      	mov	r2, r3
 8005098:	f7ff f98e 	bl	80043b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a8e      	ldr	r2, [pc, #568]	; (80052dc <HAL_ADC_ConfigChannel+0x678>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	f040 8130 	bne.w	8005308 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x46c>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	0e9b      	lsrs	r3, r3, #26
 80050be:	3301      	adds	r3, #1
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	bf94      	ite	ls
 80050c8:	2301      	movls	r3, #1
 80050ca:	2300      	movhi	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e019      	b.n	8005104 <HAL_ADC_ConfigChannel+0x4a0>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80050de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80050e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80050e8:	2320      	movs	r3, #32
 80050ea:	e003      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80050ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	3301      	adds	r3, #1
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2b09      	cmp	r3, #9
 80050fc:	bf94      	ite	ls
 80050fe:	2301      	movls	r3, #1
 8005100:	2300      	movhi	r3, #0
 8005102:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005104:	2b00      	cmp	r3, #0
 8005106:	d079      	beq.n	80051fc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x4c0>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	0e9b      	lsrs	r3, r3, #26
 800511a:	3301      	adds	r3, #1
 800511c:	069b      	lsls	r3, r3, #26
 800511e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005122:	e015      	b.n	8005150 <HAL_ADC_ConfigChannel+0x4ec>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800512c:	fa93 f3a3 	rbit	r3, r3
 8005130:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005134:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800513c:	2320      	movs	r3, #32
 800513e:	e003      	b.n	8005148 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005142:	fab3 f383 	clz	r3, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	3301      	adds	r3, #1
 800514a:	069b      	lsls	r3, r3, #26
 800514c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x50c>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	0e9b      	lsrs	r3, r3, #26
 8005162:	3301      	adds	r3, #1
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	2101      	movs	r1, #1
 800516a:	fa01 f303 	lsl.w	r3, r1, r3
 800516e:	e017      	b.n	80051a0 <HAL_ADC_ConfigChannel+0x53c>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005178:	fa93 f3a3 	rbit	r3, r3
 800517c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800517e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005180:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005188:	2320      	movs	r3, #32
 800518a:	e003      	b.n	8005194 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800518c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518e:	fab3 f383 	clz	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	3301      	adds	r3, #1
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	2101      	movs	r1, #1
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	ea42 0103 	orr.w	r1, r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x562>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	0e9b      	lsrs	r3, r3, #26
 80051b6:	3301      	adds	r3, #1
 80051b8:	f003 021f 	and.w	r2, r3, #31
 80051bc:	4613      	mov	r3, r2
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	4413      	add	r3, r2
 80051c2:	051b      	lsls	r3, r3, #20
 80051c4:	e018      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x594>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	fa93 f3a3 	rbit	r3, r3
 80051d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80051d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80051de:	2320      	movs	r3, #32
 80051e0:	e003      	b.n	80051ea <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	fab3 f383 	clz	r3, r3
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	3301      	adds	r3, #1
 80051ec:	f003 021f 	and.w	r2, r3, #31
 80051f0:	4613      	mov	r3, r2
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4413      	add	r3, r2
 80051f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051f8:	430b      	orrs	r3, r1
 80051fa:	e080      	b.n	80052fe <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x5b4>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	0e9b      	lsrs	r3, r3, #26
 800520e:	3301      	adds	r3, #1
 8005210:	069b      	lsls	r3, r3, #26
 8005212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005216:	e015      	b.n	8005244 <HAL_ADC_ConfigChannel+0x5e0>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005230:	2320      	movs	r3, #32
 8005232:	e003      	b.n	800523c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	3301      	adds	r3, #1
 800523e:	069b      	lsls	r3, r3, #26
 8005240:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_ADC_ConfigChannel+0x600>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	3301      	adds	r3, #1
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	e017      	b.n	8005294 <HAL_ADC_ConfigChannel+0x630>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	fa93 f3a3 	rbit	r3, r3
 8005270:	61fb      	str	r3, [r7, #28]
  return result;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800527c:	2320      	movs	r3, #32
 800527e:	e003      	b.n	8005288 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	fab3 f383 	clz	r3, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3301      	adds	r3, #1
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	ea42 0103 	orr.w	r1, r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10d      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x65c>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	0e9b      	lsrs	r3, r3, #26
 80052aa:	3301      	adds	r3, #1
 80052ac:	f003 021f 	and.w	r2, r3, #31
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	3b1e      	subs	r3, #30
 80052b8:	051b      	lsls	r3, r3, #20
 80052ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052be:	e01d      	b.n	80052fc <HAL_ADC_ConfigChannel+0x698>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	613b      	str	r3, [r7, #16]
  return result;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d103      	bne.n	80052e0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80052d8:	2320      	movs	r3, #32
 80052da:	e005      	b.n	80052e8 <HAL_ADC_ConfigChannel+0x684>
 80052dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	fab3 f383 	clz	r3, r3
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	3301      	adds	r3, #1
 80052ea:	f003 021f 	and.w	r2, r3, #31
 80052ee:	4613      	mov	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	3b1e      	subs	r3, #30
 80052f6:	051b      	lsls	r3, r3, #20
 80052f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052fc:	430b      	orrs	r3, r1
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	6892      	ldr	r2, [r2, #8]
 8005302:	4619      	mov	r1, r3
 8005304:	f7ff f82d 	bl	8004362 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b44      	ldr	r3, [pc, #272]	; (8005420 <HAL_ADC_ConfigChannel+0x7bc>)
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d07a      	beq.n	800540a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005314:	4843      	ldr	r0, [pc, #268]	; (8005424 <HAL_ADC_ConfigChannel+0x7c0>)
 8005316:	f7fe ff6f 	bl	80041f8 <LL_ADC_GetCommonPathInternalCh>
 800531a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a41      	ldr	r2, [pc, #260]	; (8005428 <HAL_ADC_ConfigChannel+0x7c4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d12c      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800532c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d126      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a3c      	ldr	r2, [pc, #240]	; (800542c <HAL_ADC_ConfigChannel+0x7c8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_ADC_ConfigChannel+0x6e4>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a3b      	ldr	r2, [pc, #236]	; (8005430 <HAL_ADC_ConfigChannel+0x7cc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d15d      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800534c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005350:	4619      	mov	r1, r3
 8005352:	4834      	ldr	r0, [pc, #208]	; (8005424 <HAL_ADC_ConfigChannel+0x7c0>)
 8005354:	f7fe ff3d 	bl	80041d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005358:	4b36      	ldr	r3, [pc, #216]	; (8005434 <HAL_ADC_ConfigChannel+0x7d0>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	099b      	lsrs	r3, r3, #6
 800535e:	4a36      	ldr	r2, [pc, #216]	; (8005438 <HAL_ADC_ConfigChannel+0x7d4>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	099b      	lsrs	r3, r3, #6
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	4613      	mov	r3, r2
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005372:	e002      	b.n	800537a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3b01      	subs	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f9      	bne.n	8005374 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005380:	e040      	b.n	8005404 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2d      	ldr	r2, [pc, #180]	; (800543c <HAL_ADC_ConfigChannel+0x7d8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d118      	bne.n	80053be <HAL_ADC_ConfigChannel+0x75a>
 800538c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d112      	bne.n	80053be <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a23      	ldr	r2, [pc, #140]	; (800542c <HAL_ADC_ConfigChannel+0x7c8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <HAL_ADC_ConfigChannel+0x748>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a22      	ldr	r2, [pc, #136]	; (8005430 <HAL_ADC_ConfigChannel+0x7cc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d12d      	bne.n	8005408 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053b4:	4619      	mov	r1, r3
 80053b6:	481b      	ldr	r0, [pc, #108]	; (8005424 <HAL_ADC_ConfigChannel+0x7c0>)
 80053b8:	f7fe ff0b 	bl	80041d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053bc:	e024      	b.n	8005408 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <HAL_ADC_ConfigChannel+0x7dc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d120      	bne.n	800540a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80053c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d11a      	bne.n	800540a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a14      	ldr	r2, [pc, #80]	; (800542c <HAL_ADC_ConfigChannel+0x7c8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d115      	bne.n	800540a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053e6:	4619      	mov	r1, r3
 80053e8:	480e      	ldr	r0, [pc, #56]	; (8005424 <HAL_ADC_ConfigChannel+0x7c0>)
 80053ea:	f7fe fef2 	bl	80041d2 <LL_ADC_SetCommonPathInternalCh>
 80053ee:	e00c      	b.n	800540a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005402:	e002      	b.n	800540a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005408:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005412:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005416:	4618      	mov	r0, r3
 8005418:	37d8      	adds	r7, #216	; 0xd8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	80080000 	.word	0x80080000
 8005424:	50040300 	.word	0x50040300
 8005428:	c7520000 	.word	0xc7520000
 800542c:	50040000 	.word	0x50040000
 8005430:	50040200 	.word	0x50040200
 8005434:	20000094 	.word	0x20000094
 8005438:	053e2d63 	.word	0x053e2d63
 800543c:	cb840000 	.word	0xcb840000
 8005440:	80000001 	.word	0x80000001

08005444 <LL_ADC_IsEnabled>:
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <LL_ADC_IsEnabled+0x18>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <LL_ADC_IsEnabled+0x1a>
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <LL_ADC_REG_IsConversionOngoing>:
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b04      	cmp	r3, #4
 800547c:	d101      	bne.n	8005482 <LL_ADC_REG_IsConversionOngoing+0x18>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b09f      	sub	sp, #124	; 0x7c
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800550e:	2302      	movs	r3, #2
 8005510:	e093      	b.n	800563a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800551a:	2300      	movs	r3, #0
 800551c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800551e:	2300      	movs	r3, #0
 8005520:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a47      	ldr	r2, [pc, #284]	; (8005644 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d102      	bne.n	8005532 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800552c:	4b46      	ldr	r3, [pc, #280]	; (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	e001      	b.n	8005536 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10b      	bne.n	8005554 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e072      	b.n	800563a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff ff87 	bl	800546a <LL_ADC_REG_IsConversionOngoing>
 800555c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff ff81 	bl	800546a <LL_ADC_REG_IsConversionOngoing>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d154      	bne.n	8005618 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800556e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005570:	2b00      	cmp	r3, #0
 8005572:	d151      	bne.n	8005618 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005574:	4b35      	ldr	r3, [pc, #212]	; (800564c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005576:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d02c      	beq.n	80055da <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005592:	035b      	lsls	r3, r3, #13
 8005594:	430b      	orrs	r3, r1
 8005596:	431a      	orrs	r2, r3
 8005598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800559c:	4829      	ldr	r0, [pc, #164]	; (8005644 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800559e:	f7ff ff51 	bl	8005444 <LL_ADC_IsEnabled>
 80055a2:	4604      	mov	r4, r0
 80055a4:	4828      	ldr	r0, [pc, #160]	; (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80055a6:	f7ff ff4d 	bl	8005444 <LL_ADC_IsEnabled>
 80055aa:	4603      	mov	r3, r0
 80055ac:	431c      	orrs	r4, r3
 80055ae:	4828      	ldr	r0, [pc, #160]	; (8005650 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80055b0:	f7ff ff48 	bl	8005444 <LL_ADC_IsEnabled>
 80055b4:	4603      	mov	r3, r0
 80055b6:	4323      	orrs	r3, r4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d137      	bne.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055c4:	f023 030f 	bic.w	r3, r3, #15
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	6811      	ldr	r1, [r2, #0]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	6892      	ldr	r2, [r2, #8]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	431a      	orrs	r2, r3
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055d8:	e028      	b.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80055da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055e6:	4817      	ldr	r0, [pc, #92]	; (8005644 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80055e8:	f7ff ff2c 	bl	8005444 <LL_ADC_IsEnabled>
 80055ec:	4604      	mov	r4, r0
 80055ee:	4816      	ldr	r0, [pc, #88]	; (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80055f0:	f7ff ff28 	bl	8005444 <LL_ADC_IsEnabled>
 80055f4:	4603      	mov	r3, r0
 80055f6:	431c      	orrs	r4, r3
 80055f8:	4815      	ldr	r0, [pc, #84]	; (8005650 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80055fa:	f7ff ff23 	bl	8005444 <LL_ADC_IsEnabled>
 80055fe:	4603      	mov	r3, r0
 8005600:	4323      	orrs	r3, r4
 8005602:	2b00      	cmp	r3, #0
 8005604:	d112      	bne.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800560e:	f023 030f 	bic.w	r3, r3, #15
 8005612:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005614:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005616:	e009      	b.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800562a:	e000      	b.n	800562e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800562c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005636:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800563a:	4618      	mov	r0, r3
 800563c:	377c      	adds	r7, #124	; 0x7c
 800563e:	46bd      	mov	sp, r7
 8005640:	bd90      	pop	{r4, r7, pc}
 8005642:	bf00      	nop
 8005644:	50040000 	.word	0x50040000
 8005648:	50040100 	.word	0x50040100
 800564c:	50040300 	.word	0x50040300
 8005650:	50040200 	.word	0x50040200

08005654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <__NVIC_SetPriorityGrouping+0x44>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005670:	4013      	ands	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800567c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005686:	4a04      	ldr	r2, [pc, #16]	; (8005698 <__NVIC_SetPriorityGrouping+0x44>)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	60d3      	str	r3, [r2, #12]
}
 800568c:	bf00      	nop
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <__NVIC_GetPriorityGrouping+0x18>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	f003 0307 	and.w	r3, r3, #7
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	e000ed00 	.word	0xe000ed00

080056b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	db0b      	blt.n	80056e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	f003 021f 	and.w	r2, r3, #31
 80056d0:	4907      	ldr	r1, [pc, #28]	; (80056f0 <__NVIC_EnableIRQ+0x38>)
 80056d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	2001      	movs	r0, #1
 80056da:	fa00 f202 	lsl.w	r2, r0, r2
 80056de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e100 	.word	0xe000e100

080056f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	6039      	str	r1, [r7, #0]
 80056fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005704:	2b00      	cmp	r3, #0
 8005706:	db0a      	blt.n	800571e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	490c      	ldr	r1, [pc, #48]	; (8005740 <__NVIC_SetPriority+0x4c>)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	0112      	lsls	r2, r2, #4
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	440b      	add	r3, r1
 8005718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800571c:	e00a      	b.n	8005734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	4908      	ldr	r1, [pc, #32]	; (8005744 <__NVIC_SetPriority+0x50>)
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	3b04      	subs	r3, #4
 800572c:	0112      	lsls	r2, r2, #4
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	440b      	add	r3, r1
 8005732:	761a      	strb	r2, [r3, #24]
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	e000e100 	.word	0xe000e100
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f1c3 0307 	rsb	r3, r3, #7
 8005762:	2b04      	cmp	r3, #4
 8005764:	bf28      	it	cs
 8005766:	2304      	movcs	r3, #4
 8005768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3304      	adds	r3, #4
 800576e:	2b06      	cmp	r3, #6
 8005770:	d902      	bls.n	8005778 <NVIC_EncodePriority+0x30>
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3b03      	subs	r3, #3
 8005776:	e000      	b.n	800577a <NVIC_EncodePriority+0x32>
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800577c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43da      	mvns	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	401a      	ands	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	43d9      	mvns	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a0:	4313      	orrs	r3, r2
         );
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3724      	adds	r7, #36	; 0x24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff ff4c 	bl	8005654 <__NVIC_SetPriorityGrouping>
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057d6:	f7ff ff61 	bl	800569c <__NVIC_GetPriorityGrouping>
 80057da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	6978      	ldr	r0, [r7, #20]
 80057e2:	f7ff ffb1 	bl	8005748 <NVIC_EncodePriority>
 80057e6:	4602      	mov	r2, r0
 80057e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff ff80 	bl	80056f4 <__NVIC_SetPriority>
}
 80057f4:	bf00      	nop
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff ff54 	bl	80056b8 <__NVIC_EnableIRQ>
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e098      	b.n	800595c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	4b4d      	ldr	r3, [pc, #308]	; (8005968 <HAL_DMA_Init+0x150>)
 8005832:	429a      	cmp	r2, r3
 8005834:	d80f      	bhi.n	8005856 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	4b4b      	ldr	r3, [pc, #300]	; (800596c <HAL_DMA_Init+0x154>)
 800583e:	4413      	add	r3, r2
 8005840:	4a4b      	ldr	r2, [pc, #300]	; (8005970 <HAL_DMA_Init+0x158>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	009a      	lsls	r2, r3, #2
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a48      	ldr	r2, [pc, #288]	; (8005974 <HAL_DMA_Init+0x15c>)
 8005852:	641a      	str	r2, [r3, #64]	; 0x40
 8005854:	e00e      	b.n	8005874 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	4b46      	ldr	r3, [pc, #280]	; (8005978 <HAL_DMA_Init+0x160>)
 800585e:	4413      	add	r3, r2
 8005860:	4a43      	ldr	r2, [pc, #268]	; (8005970 <HAL_DMA_Init+0x158>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	009a      	lsls	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a42      	ldr	r2, [pc, #264]	; (800597c <HAL_DMA_Init+0x164>)
 8005872:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800588a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ce:	d039      	beq.n	8005944 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	4a27      	ldr	r2, [pc, #156]	; (8005974 <HAL_DMA_Init+0x15c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d11a      	bne.n	8005910 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80058da:	4b29      	ldr	r3, [pc, #164]	; (8005980 <HAL_DMA_Init+0x168>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f003 031c 	and.w	r3, r3, #28
 80058e6:	210f      	movs	r1, #15
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	4924      	ldr	r1, [pc, #144]	; (8005980 <HAL_DMA_Init+0x168>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80058f4:	4b22      	ldr	r3, [pc, #136]	; (8005980 <HAL_DMA_Init+0x168>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6859      	ldr	r1, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	f003 031c 	and.w	r3, r3, #28
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	491d      	ldr	r1, [pc, #116]	; (8005980 <HAL_DMA_Init+0x168>)
 800590a:	4313      	orrs	r3, r2
 800590c:	600b      	str	r3, [r1, #0]
 800590e:	e019      	b.n	8005944 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005910:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <HAL_DMA_Init+0x16c>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005918:	f003 031c 	and.w	r3, r3, #28
 800591c:	210f      	movs	r1, #15
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	4917      	ldr	r1, [pc, #92]	; (8005984 <HAL_DMA_Init+0x16c>)
 8005926:	4013      	ands	r3, r2
 8005928:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800592a:	4b16      	ldr	r3, [pc, #88]	; (8005984 <HAL_DMA_Init+0x16c>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6859      	ldr	r1, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	f003 031c 	and.w	r3, r3, #28
 800593a:	fa01 f303 	lsl.w	r3, r1, r3
 800593e:	4911      	ldr	r1, [pc, #68]	; (8005984 <HAL_DMA_Init+0x16c>)
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40020407 	.word	0x40020407
 800596c:	bffdfff8 	.word	0xbffdfff8
 8005970:	cccccccd 	.word	0xcccccccd
 8005974:	40020000 	.word	0x40020000
 8005978:	bffdfbf8 	.word	0xbffdfbf8
 800597c:	40020400 	.word	0x40020400
 8005980:	400200a8 	.word	0x400200a8
 8005984:	400204a8 	.word	0x400204a8

08005988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_DMA_Start_IT+0x20>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e04b      	b.n	8005a40 <HAL_DMA_Start_IT+0xb8>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d13a      	bne.n	8005a32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f921 	bl	8005c28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 020e 	orr.w	r2, r2, #14
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e00f      	b.n	8005a20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0204 	bic.w	r2, r2, #4
 8005a0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 020a 	orr.w	r2, r2, #10
 8005a1e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e005      	b.n	8005a3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d005      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2204      	movs	r2, #4
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
 8005a6a:	e029      	b.n	8005ac0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 020e 	bic.w	r2, r2, #14
 8005a7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0201 	bic.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a90:	f003 021c 	and.w	r2, r3, #28
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	4798      	blx	r3
    }
  }
  return status;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	f003 031c 	and.w	r3, r3, #28
 8005aea:	2204      	movs	r2, #4
 8005aec:	409a      	lsls	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d026      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x7a>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d021      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d107      	bne.n	8005b1e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0204 	bic.w	r2, r2, #4
 8005b1c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f003 021c 	and.w	r2, r3, #28
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b30:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d071      	beq.n	8005c1e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005b42:	e06c      	b.n	8005c1e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b48:	f003 031c 	and.w	r3, r3, #28
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	409a      	lsls	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d02e      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xec>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d029      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 020a 	bic.w	r2, r2, #10
 8005b7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f003 021c 	and.w	r2, r3, #28
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	2102      	movs	r1, #2
 8005b96:	fa01 f202 	lsl.w	r2, r1, r2
 8005b9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d038      	beq.n	8005c1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005bb4:	e033      	b.n	8005c1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bba:	f003 031c 	and.w	r3, r3, #28
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d02a      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x156>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d025      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 020e 	bic.w	r2, r2, #14
 8005be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	f003 021c 	and.w	r2, r3, #28
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d004      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
}
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	f003 021c 	and.w	r2, r3, #28
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	2101      	movs	r1, #1
 8005c44:	fa01 f202 	lsl.w	r2, r1, r2
 8005c48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b10      	cmp	r3, #16
 8005c58:	d108      	bne.n	8005c6c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c6a:	e007      	b.n	8005c7c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c96:	e17f      	b.n	8005f98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8171 	beq.w	8005f92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d00b      	beq.n	8005cd0 <HAL_GPIO_Init+0x48>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d007      	beq.n	8005cd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cc4:	2b11      	cmp	r3, #17
 8005cc6:	d003      	beq.n	8005cd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b12      	cmp	r3, #18
 8005cce:	d130      	bne.n	8005d32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	2203      	movs	r2, #3
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d06:	2201      	movs	r2, #1
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	f003 0201 	and.w	r2, r3, #1
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d118      	bne.n	8005d70 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005d44:	2201      	movs	r2, #1
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4013      	ands	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	08db      	lsrs	r3, r3, #3
 8005d5a:	f003 0201 	and.w	r2, r3, #1
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4013      	ands	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d003      	beq.n	8005db0 <HAL_GPIO_Init+0x128>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b12      	cmp	r3, #18
 8005dae:	d123      	bne.n	8005df8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	08da      	lsrs	r2, r3, #3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3208      	adds	r2, #8
 8005db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	220f      	movs	r2, #15
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	08da      	lsrs	r2, r3, #3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3208      	adds	r2, #8
 8005df2:	6939      	ldr	r1, [r7, #16]
 8005df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	2203      	movs	r2, #3
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 0203 	and.w	r2, r3, #3
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80ac 	beq.w	8005f92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e3a:	4b5f      	ldr	r3, [pc, #380]	; (8005fb8 <HAL_GPIO_Init+0x330>)
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3e:	4a5e      	ldr	r2, [pc, #376]	; (8005fb8 <HAL_GPIO_Init+0x330>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	6613      	str	r3, [r2, #96]	; 0x60
 8005e46:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <HAL_GPIO_Init+0x330>)
 8005e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	60bb      	str	r3, [r7, #8]
 8005e50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e52:	4a5a      	ldr	r2, [pc, #360]	; (8005fbc <HAL_GPIO_Init+0x334>)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	3302      	adds	r3, #2
 8005e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	220f      	movs	r2, #15
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4013      	ands	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e7c:	d025      	beq.n	8005eca <HAL_GPIO_Init+0x242>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a4f      	ldr	r2, [pc, #316]	; (8005fc0 <HAL_GPIO_Init+0x338>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01f      	beq.n	8005ec6 <HAL_GPIO_Init+0x23e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a4e      	ldr	r2, [pc, #312]	; (8005fc4 <HAL_GPIO_Init+0x33c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d019      	beq.n	8005ec2 <HAL_GPIO_Init+0x23a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a4d      	ldr	r2, [pc, #308]	; (8005fc8 <HAL_GPIO_Init+0x340>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d013      	beq.n	8005ebe <HAL_GPIO_Init+0x236>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a4c      	ldr	r2, [pc, #304]	; (8005fcc <HAL_GPIO_Init+0x344>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00d      	beq.n	8005eba <HAL_GPIO_Init+0x232>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a4b      	ldr	r2, [pc, #300]	; (8005fd0 <HAL_GPIO_Init+0x348>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <HAL_GPIO_Init+0x22e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a4a      	ldr	r2, [pc, #296]	; (8005fd4 <HAL_GPIO_Init+0x34c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d101      	bne.n	8005eb2 <HAL_GPIO_Init+0x22a>
 8005eae:	2306      	movs	r3, #6
 8005eb0:	e00c      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005eb2:	2307      	movs	r3, #7
 8005eb4:	e00a      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005eb6:	2305      	movs	r3, #5
 8005eb8:	e008      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005eba:	2304      	movs	r3, #4
 8005ebc:	e006      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e004      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e002      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	f002 0203 	and.w	r2, r2, #3
 8005ed2:	0092      	lsls	r2, r2, #2
 8005ed4:	4093      	lsls	r3, r2
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005edc:	4937      	ldr	r1, [pc, #220]	; (8005fbc <HAL_GPIO_Init+0x334>)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	089b      	lsrs	r3, r3, #2
 8005ee2:	3302      	adds	r3, #2
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005eea:	4b3b      	ldr	r3, [pc, #236]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	43db      	mvns	r3, r3
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f0e:	4a32      	ldr	r2, [pc, #200]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005f14:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4013      	ands	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f38:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f3e:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	43db      	mvns	r3, r3
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f62:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f68:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4013      	ands	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f8c:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	3301      	adds	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f47f ae78 	bne.w	8005c98 <HAL_GPIO_Init+0x10>
  }
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	48000400 	.word	0x48000400
 8005fc4:	48000800 	.word	0x48000800
 8005fc8:	48000c00 	.word	0x48000c00
 8005fcc:	48001000 	.word	0x48001000
 8005fd0:	48001400 	.word	0x48001400
 8005fd4:	48001800 	.word	0x48001800
 8005fd8:	40010400 	.word	0x40010400

08005fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	807b      	strh	r3, [r7, #2]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fec:	787b      	ldrb	r3, [r7, #1]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ff2:	887a      	ldrh	r2, [r7, #2]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ff8:	e002      	b.n	8006000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ffa:	887a      	ldrh	r2, [r7, #2]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e081      	b.n	8006122 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fd fb4c 	bl	80036d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2224      	movs	r2, #36	; 0x24
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0201 	bic.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800605c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800606c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d107      	bne.n	8006086 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006082:	609a      	str	r2, [r3, #8]
 8006084:	e006      	b.n	8006094 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006092:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d104      	bne.n	80060a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	ea42 0103 	orr.w	r1, r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69d9      	ldr	r1, [r3, #28]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1a      	ldr	r2, [r3, #32]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b20      	cmp	r3, #32
 800613e:	d138      	bne.n	80061b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800614a:	2302      	movs	r3, #2
 800614c:	e032      	b.n	80061b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2224      	movs	r2, #36	; 0x24
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800617c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e000      	b.n	80061b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
  }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d139      	bne.n	800624a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e033      	b.n	800624c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2224      	movs	r2, #36	; 0x24
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006212:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e000      	b.n	800624c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800624a:	2302      	movs	r3, #2
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800625c:	4b04      	ldr	r3, [pc, #16]	; (8006270 <HAL_PWREx_GetVoltageRange+0x18>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006264:	4618      	mov	r0, r3
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40007000 	.word	0x40007000

08006274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006282:	d130      	bne.n	80062e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006284:	4b23      	ldr	r3, [pc, #140]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800628c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006290:	d038      	beq.n	8006304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800629a:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800629c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2232      	movs	r2, #50	; 0x32
 80062a8:	fb02 f303 	mul.w	r3, r2, r3
 80062ac:	4a1b      	ldr	r2, [pc, #108]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	0c9b      	lsrs	r3, r3, #18
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062b8:	e002      	b.n	80062c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3b01      	subs	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062c0:	4b14      	ldr	r3, [pc, #80]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062cc:	d102      	bne.n	80062d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f2      	bne.n	80062ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062d4:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e0:	d110      	bne.n	8006304 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e00f      	b.n	8006306 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f2:	d007      	beq.n	8006304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062f4:	4b07      	ldr	r3, [pc, #28]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062fc:	4a05      	ldr	r2, [pc, #20]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006302:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40007000 	.word	0x40007000
 8006318:	20000094 	.word	0x20000094
 800631c:	431bde83 	.word	0x431bde83

08006320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e3d4      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006332:	4ba1      	ldr	r3, [pc, #644]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800633c:	4b9e      	ldr	r3, [pc, #632]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80e4 	beq.w	800651c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <HAL_RCC_OscConfig+0x4a>
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	f040 808b 	bne.w	8006478 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b01      	cmp	r3, #1
 8006366:	f040 8087 	bne.w	8006478 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800636a:	4b93      	ldr	r3, [pc, #588]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_RCC_OscConfig+0x62>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e3ac      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	4b8c      	ldr	r3, [pc, #560]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <HAL_RCC_OscConfig+0x7c>
 8006392:	4b89      	ldr	r3, [pc, #548]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800639a:	e005      	b.n	80063a8 <HAL_RCC_OscConfig+0x88>
 800639c:	4b86      	ldr	r3, [pc, #536]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800639e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063a2:	091b      	lsrs	r3, r3, #4
 80063a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d223      	bcs.n	80063f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fd73 	bl	8006e9c <RCC_SetFlashLatencyFromMSIRange>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e38d      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063c0:	4b7d      	ldr	r3, [pc, #500]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a7c      	ldr	r2, [pc, #496]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063c6:	f043 0308 	orr.w	r3, r3, #8
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	4b7a      	ldr	r3, [pc, #488]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	4977      	ldr	r1, [pc, #476]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063de:	4b76      	ldr	r3, [pc, #472]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	4972      	ldr	r1, [pc, #456]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	604b      	str	r3, [r1, #4]
 80063f2:	e025      	b.n	8006440 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063f4:	4b70      	ldr	r3, [pc, #448]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a6f      	ldr	r2, [pc, #444]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063fa:	f043 0308 	orr.w	r3, r3, #8
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	4b6d      	ldr	r3, [pc, #436]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	496a      	ldr	r1, [pc, #424]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800640e:	4313      	orrs	r3, r2
 8006410:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006412:	4b69      	ldr	r3, [pc, #420]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	4965      	ldr	r1, [pc, #404]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006422:	4313      	orrs	r3, r2
 8006424:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fd33 	bl	8006e9c <RCC_SetFlashLatencyFromMSIRange>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e34d      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006440:	f000 fc36 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006444:	4602      	mov	r2, r0
 8006446:	4b5c      	ldr	r3, [pc, #368]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	091b      	lsrs	r3, r3, #4
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	495a      	ldr	r1, [pc, #360]	; (80065bc <HAL_RCC_OscConfig+0x29c>)
 8006452:	5ccb      	ldrb	r3, [r1, r3]
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	4a58      	ldr	r2, [pc, #352]	; (80065c0 <HAL_RCC_OscConfig+0x2a0>)
 800645e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006460:	4b58      	ldr	r3, [pc, #352]	; (80065c4 <HAL_RCC_OscConfig+0x2a4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f7fd fc7d 	bl	8003d64 <HAL_InitTick>
 800646a:	4603      	mov	r3, r0
 800646c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d052      	beq.n	800651a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	e331      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d032      	beq.n	80064e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006480:	4b4d      	ldr	r3, [pc, #308]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a4c      	ldr	r2, [pc, #304]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800648c:	f7fd fe5e 	bl	800414c <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006494:	f7fd fe5a 	bl	800414c <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e31a      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064a6:	4b44      	ldr	r3, [pc, #272]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064b2:	4b41      	ldr	r3, [pc, #260]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a40      	ldr	r2, [pc, #256]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064b8:	f043 0308 	orr.w	r3, r3, #8
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	4b3e      	ldr	r3, [pc, #248]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	493b      	ldr	r1, [pc, #236]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064d0:	4b39      	ldr	r3, [pc, #228]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	4936      	ldr	r1, [pc, #216]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	604b      	str	r3, [r1, #4]
 80064e4:	e01a      	b.n	800651c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80064e6:	4b34      	ldr	r3, [pc, #208]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a33      	ldr	r2, [pc, #204]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064f2:	f7fd fe2b 	bl	800414c <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064fa:	f7fd fe27 	bl	800414c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e2e7      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800650c:	4b2a      	ldr	r3, [pc, #168]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f0      	bne.n	80064fa <HAL_RCC_OscConfig+0x1da>
 8006518:	e000      	b.n	800651c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800651a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d074      	beq.n	8006612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b08      	cmp	r3, #8
 800652c:	d005      	beq.n	800653a <HAL_RCC_OscConfig+0x21a>
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b0c      	cmp	r3, #12
 8006532:	d10e      	bne.n	8006552 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b03      	cmp	r3, #3
 8006538:	d10b      	bne.n	8006552 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800653a:	4b1f      	ldr	r3, [pc, #124]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d064      	beq.n	8006610 <HAL_RCC_OscConfig+0x2f0>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d160      	bne.n	8006610 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e2c4      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655a:	d106      	bne.n	800656a <HAL_RCC_OscConfig+0x24a>
 800655c:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e01d      	b.n	80065a6 <HAL_RCC_OscConfig+0x286>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006572:	d10c      	bne.n	800658e <HAL_RCC_OscConfig+0x26e>
 8006574:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800657a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	e00b      	b.n	80065a6 <HAL_RCC_OscConfig+0x286>
 800658e:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a06      	ldr	r2, [pc, #24]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80065a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01c      	beq.n	80065e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ae:	f7fd fdcd 	bl	800414c <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065b4:	e011      	b.n	80065da <HAL_RCC_OscConfig+0x2ba>
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
 80065bc:	0800fffc 	.word	0x0800fffc
 80065c0:	20000094 	.word	0x20000094
 80065c4:	20000098 	.word	0x20000098
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c8:	f7fd fdc0 	bl	800414c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b64      	cmp	r3, #100	; 0x64
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e280      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065da:	4baf      	ldr	r3, [pc, #700]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0x2a8>
 80065e6:	e014      	b.n	8006612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e8:	f7fd fdb0 	bl	800414c <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f0:	f7fd fdac 	bl	800414c <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b64      	cmp	r3, #100	; 0x64
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e26c      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006602:	4ba5      	ldr	r3, [pc, #660]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x2d0>
 800660e:	e000      	b.n	8006612 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d060      	beq.n	80066e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d005      	beq.n	8006630 <HAL_RCC_OscConfig+0x310>
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b0c      	cmp	r3, #12
 8006628:	d119      	bne.n	800665e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d116      	bne.n	800665e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006630:	4b99      	ldr	r3, [pc, #612]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_RCC_OscConfig+0x328>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e249      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006648:	4b93      	ldr	r3, [pc, #588]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	061b      	lsls	r3, r3, #24
 8006656:	4990      	ldr	r1, [pc, #576]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006658:	4313      	orrs	r3, r2
 800665a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800665c:	e040      	b.n	80066e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d023      	beq.n	80066ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006666:	4b8c      	ldr	r3, [pc, #560]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a8b      	ldr	r2, [pc, #556]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800666c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006672:	f7fd fd6b 	bl	800414c <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800667a:	f7fd fd67 	bl	800414c <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e227      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800668c:	4b82      	ldr	r3, [pc, #520]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f0      	beq.n	800667a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006698:	4b7f      	ldr	r3, [pc, #508]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	061b      	lsls	r3, r3, #24
 80066a6:	497c      	ldr	r1, [pc, #496]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	604b      	str	r3, [r1, #4]
 80066ac:	e018      	b.n	80066e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ae:	4b7a      	ldr	r3, [pc, #488]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a79      	ldr	r2, [pc, #484]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ba:	f7fd fd47 	bl	800414c <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c2:	f7fd fd43 	bl	800414c <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e203      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066d4:	4b70      	ldr	r3, [pc, #448]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f0      	bne.n	80066c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d03c      	beq.n	8006766 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01c      	beq.n	800672e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f4:	4b68      	ldr	r3, [pc, #416]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066fa:	4a67      	ldr	r2, [pc, #412]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fd fd22 	bl	800414c <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800670c:	f7fd fd1e 	bl	800414c <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e1de      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800671e:	4b5e      	ldr	r3, [pc, #376]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0ef      	beq.n	800670c <HAL_RCC_OscConfig+0x3ec>
 800672c:	e01b      	b.n	8006766 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800672e:	4b5a      	ldr	r3, [pc, #360]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006734:	4a58      	ldr	r2, [pc, #352]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673e:	f7fd fd05 	bl	800414c <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006746:	f7fd fd01 	bl	800414c <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e1c1      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006758:	4b4f      	ldr	r3, [pc, #316]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800675a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1ef      	bne.n	8006746 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 80a6 	beq.w	80068c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006774:	2300      	movs	r3, #0
 8006776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006778:	4b47      	ldr	r3, [pc, #284]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800677a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10d      	bne.n	80067a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006784:	4b44      	ldr	r3, [pc, #272]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006788:	4a43      	ldr	r2, [pc, #268]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800678a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678e:	6593      	str	r3, [r2, #88]	; 0x58
 8006790:	4b41      	ldr	r3, [pc, #260]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800679c:	2301      	movs	r3, #1
 800679e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a0:	4b3e      	ldr	r3, [pc, #248]	; (800689c <HAL_RCC_OscConfig+0x57c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d118      	bne.n	80067de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ac:	4b3b      	ldr	r3, [pc, #236]	; (800689c <HAL_RCC_OscConfig+0x57c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a3a      	ldr	r2, [pc, #232]	; (800689c <HAL_RCC_OscConfig+0x57c>)
 80067b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067b8:	f7fd fcc8 	bl	800414c <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c0:	f7fd fcc4 	bl	800414c <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e184      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d2:	4b32      	ldr	r3, [pc, #200]	; (800689c <HAL_RCC_OscConfig+0x57c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0f0      	beq.n	80067c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d108      	bne.n	80067f8 <HAL_RCC_OscConfig+0x4d8>
 80067e6:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ec:	4a2a      	ldr	r2, [pc, #168]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067f6:	e024      	b.n	8006842 <HAL_RCC_OscConfig+0x522>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b05      	cmp	r3, #5
 80067fe:	d110      	bne.n	8006822 <HAL_RCC_OscConfig+0x502>
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006806:	4a24      	ldr	r2, [pc, #144]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006808:	f043 0304 	orr.w	r3, r3, #4
 800680c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006810:	4b21      	ldr	r3, [pc, #132]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006816:	4a20      	ldr	r2, [pc, #128]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006820:	e00f      	b.n	8006842 <HAL_RCC_OscConfig+0x522>
 8006822:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006828:	4a1b      	ldr	r2, [pc, #108]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800682a:	f023 0301 	bic.w	r3, r3, #1
 800682e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006832:	4b19      	ldr	r3, [pc, #100]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006838:	4a17      	ldr	r2, [pc, #92]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800683a:	f023 0304 	bic.w	r3, r3, #4
 800683e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d016      	beq.n	8006878 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684a:	f7fd fc7f 	bl	800414c <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006850:	e00a      	b.n	8006868 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006852:	f7fd fc7b 	bl	800414c <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e139      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0ed      	beq.n	8006852 <HAL_RCC_OscConfig+0x532>
 8006876:	e01a      	b.n	80068ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006878:	f7fd fc68 	bl	800414c <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800687e:	e00f      	b.n	80068a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006880:	f7fd fc64 	bl	800414c <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f241 3288 	movw	r2, #5000	; 0x1388
 800688e:	4293      	cmp	r3, r2
 8006890:	d906      	bls.n	80068a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e122      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
 8006896:	bf00      	nop
 8006898:	40021000 	.word	0x40021000
 800689c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068a0:	4b90      	ldr	r3, [pc, #576]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e8      	bne.n	8006880 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068ae:	7ffb      	ldrb	r3, [r7, #31]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d105      	bne.n	80068c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b4:	4b8b      	ldr	r3, [pc, #556]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b8:	4a8a      	ldr	r2, [pc, #552]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80068ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8108 	beq.w	8006ada <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	f040 80d0 	bne.w	8006a74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068d4:	4b83      	ldr	r3, [pc, #524]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f003 0203 	and.w	r2, r3, #3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d130      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	3b01      	subs	r3, #1
 80068f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d127      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006904:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006906:	429a      	cmp	r2, r3
 8006908:	d11f      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006914:	2a07      	cmp	r2, #7
 8006916:	bf14      	ite	ne
 8006918:	2201      	movne	r2, #1
 800691a:	2200      	moveq	r2, #0
 800691c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800691e:	4293      	cmp	r3, r2
 8006920:	d113      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	3b01      	subs	r3, #1
 8006930:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006932:	429a      	cmp	r2, r3
 8006934:	d109      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	3b01      	subs	r3, #1
 8006944:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006946:	429a      	cmp	r2, r3
 8006948:	d06e      	beq.n	8006a28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b0c      	cmp	r3, #12
 800694e:	d069      	beq.n	8006a24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006950:	4b64      	ldr	r3, [pc, #400]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800695c:	4b61      	ldr	r3, [pc, #388]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0b7      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800696c:	4b5d      	ldr	r3, [pc, #372]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a5c      	ldr	r2, [pc, #368]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006976:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006978:	f7fd fbe8 	bl	800414c <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006980:	f7fd fbe4 	bl	800414c <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e0a4      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006992:	4b54      	ldr	r3, [pc, #336]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800699e:	4b51      	ldr	r3, [pc, #324]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	4b51      	ldr	r3, [pc, #324]	; (8006ae8 <HAL_RCC_OscConfig+0x7c8>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069ae:	3a01      	subs	r2, #1
 80069b0:	0112      	lsls	r2, r2, #4
 80069b2:	4311      	orrs	r1, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069b8:	0212      	lsls	r2, r2, #8
 80069ba:	4311      	orrs	r1, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069c0:	0852      	lsrs	r2, r2, #1
 80069c2:	3a01      	subs	r2, #1
 80069c4:	0552      	lsls	r2, r2, #21
 80069c6:	4311      	orrs	r1, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069cc:	0852      	lsrs	r2, r2, #1
 80069ce:	3a01      	subs	r2, #1
 80069d0:	0652      	lsls	r2, r2, #25
 80069d2:	4311      	orrs	r1, r2
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069d8:	0912      	lsrs	r2, r2, #4
 80069da:	0452      	lsls	r2, r2, #17
 80069dc:	430a      	orrs	r2, r1
 80069de:	4941      	ldr	r1, [pc, #260]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069e4:	4b3f      	ldr	r3, [pc, #252]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a3e      	ldr	r2, [pc, #248]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069f0:	4b3c      	ldr	r3, [pc, #240]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4a3b      	ldr	r2, [pc, #236]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069fc:	f7fd fba6 	bl	800414c <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a04:	f7fd fba2 	bl	800414c <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e062      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a16:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a22:	e05a      	b.n	8006ada <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e059      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a28:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d152      	bne.n	8006ada <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a34:	4b2b      	ldr	r3, [pc, #172]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2a      	ldr	r2, [pc, #168]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a40:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	4a27      	ldr	r2, [pc, #156]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a4c:	f7fd fb7e 	bl	800414c <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fd fb7a 	bl	800414c <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e03a      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a66:	4b1f      	ldr	r3, [pc, #124]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0x734>
 8006a72:	e032      	b.n	8006ada <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b0c      	cmp	r3, #12
 8006a78:	d02d      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a84:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006a86:	4b17      	ldr	r3, [pc, #92]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a98:	f023 0303 	bic.w	r3, r3, #3
 8006a9c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006a9e:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	4a10      	ldr	r2, [pc, #64]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006aa4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aae:	f7fd fb4d 	bl	800414c <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab6:	f7fd fb49 	bl	800414c <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e009      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f0      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x796>
 8006ad4:	e001      	b.n	8006ada <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	f99d808c 	.word	0xf99d808c

08006aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0c8      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b00:	4b66      	ldr	r3, [pc, #408]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d910      	bls.n	8006b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0e:	4b63      	ldr	r3, [pc, #396]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 0207 	bic.w	r2, r3, #7
 8006b16:	4961      	ldr	r1, [pc, #388]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1e:	4b5f      	ldr	r3, [pc, #380]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d001      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0b0      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d04c      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d107      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b44:	4b56      	ldr	r3, [pc, #344]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d121      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e09e      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d107      	bne.n	8006b6c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b5c:	4b50      	ldr	r3, [pc, #320]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d115      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e092      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d107      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b74:	4b4a      	ldr	r3, [pc, #296]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d109      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e086      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b84:	4b46      	ldr	r3, [pc, #280]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e07e      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b94:	4b42      	ldr	r3, [pc, #264]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f023 0203 	bic.w	r2, r3, #3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	493f      	ldr	r1, [pc, #252]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba6:	f7fd fad1 	bl	800414c <HAL_GetTick>
 8006baa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bac:	e00a      	b.n	8006bc4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bae:	f7fd facd 	bl	800414c <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e066      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc4:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 020c 	and.w	r2, r3, #12
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d1eb      	bne.n	8006bae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be2:	4b2f      	ldr	r3, [pc, #188]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	492c      	ldr	r1, [pc, #176]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf4:	4b29      	ldr	r3, [pc, #164]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d210      	bcs.n	8006c24 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c02:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f023 0207 	bic.w	r2, r3, #7
 8006c0a:	4924      	ldr	r1, [pc, #144]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c12:	4b22      	ldr	r3, [pc, #136]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d001      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e036      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c30:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4918      	ldr	r1, [pc, #96]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	4910      	ldr	r1, [pc, #64]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c62:	f000 f825 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	490c      	ldr	r1, [pc, #48]	; (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c74:	5ccb      	ldrb	r3, [r1, r3]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c82:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fd f86c 	bl	8003d64 <HAL_InitTick>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c90:	7afb      	ldrb	r3, [r7, #11]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40022000 	.word	0x40022000
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	0800fffc 	.word	0x0800fffc
 8006ca8:	20000094 	.word	0x20000094
 8006cac:	20000098 	.word	0x20000098

08006cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b089      	sub	sp, #36	; 0x24
 8006cb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cbe:	4b3e      	ldr	r3, [pc, #248]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cc8:	4b3b      	ldr	r3, [pc, #236]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0303 	and.w	r3, r3, #3
 8006cd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b0c      	cmp	r3, #12
 8006cdc:	d121      	bne.n	8006d22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d11e      	bne.n	8006d22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ce4:	4b34      	ldr	r3, [pc, #208]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d107      	bne.n	8006d00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006cf0:	4b31      	ldr	r3, [pc, #196]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	e005      	b.n	8006d0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d00:	4b2d      	ldr	r3, [pc, #180]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	091b      	lsrs	r3, r3, #4
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d0c:	4a2b      	ldr	r2, [pc, #172]	; (8006dbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d20:	e00a      	b.n	8006d38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d102      	bne.n	8006d2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d28:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	e004      	b.n	8006d38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d101      	bne.n	8006d38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d34:	4b23      	ldr	r3, [pc, #140]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d134      	bne.n	8006da8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d3e:	4b1e      	ldr	r3, [pc, #120]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d003      	beq.n	8006d56 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d003      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0xac>
 8006d54:	e005      	b.n	8006d62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d56:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d58:	617b      	str	r3, [r7, #20]
      break;
 8006d5a:	e005      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d5c:	4b19      	ldr	r3, [pc, #100]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d5e:	617b      	str	r3, [r7, #20]
      break;
 8006d60:	e002      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	617b      	str	r3, [r7, #20]
      break;
 8006d66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d68:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	091b      	lsrs	r3, r3, #4
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	3301      	adds	r3, #1
 8006d74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d76:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	fb02 f203 	mul.w	r2, r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d8e:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	0e5b      	lsrs	r3, r3, #25
 8006d94:	f003 0303 	and.w	r3, r3, #3
 8006d98:	3301      	adds	r3, #1
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006da8:	69bb      	ldr	r3, [r7, #24]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3724      	adds	r7, #36	; 0x24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	08010014 	.word	0x08010014
 8006dc0:	00f42400 	.word	0x00f42400
 8006dc4:	007a1200 	.word	0x007a1200

08006dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dcc:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8006dce:	681b      	ldr	r3, [r3, #0]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	20000094 	.word	0x20000094

08006de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006de4:	f7ff fff0 	bl	8006dc8 <HAL_RCC_GetHCLKFreq>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	0a1b      	lsrs	r3, r3, #8
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	4904      	ldr	r1, [pc, #16]	; (8006e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006df6:	5ccb      	ldrb	r3, [r1, r3]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40021000 	.word	0x40021000
 8006e08:	0801000c 	.word	0x0801000c

08006e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e10:	f7ff ffda 	bl	8006dc8 <HAL_RCC_GetHCLKFreq>
 8006e14:	4602      	mov	r2, r0
 8006e16:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	0adb      	lsrs	r3, r3, #11
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	4904      	ldr	r1, [pc, #16]	; (8006e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e22:	5ccb      	ldrb	r3, [r1, r3]
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40021000 	.word	0x40021000
 8006e34:	0801000c 	.word	0x0801000c

08006e38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	220f      	movs	r2, #15
 8006e46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006e48:	4b12      	ldr	r3, [pc, #72]	; (8006e94 <HAL_RCC_GetClockConfig+0x5c>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f003 0203 	and.w	r2, r3, #3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006e54:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <HAL_RCC_GetClockConfig+0x5c>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006e60:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <HAL_RCC_GetClockConfig+0x5c>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006e6c:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <HAL_RCC_GetClockConfig+0x5c>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	08db      	lsrs	r3, r3, #3
 8006e72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006e7a:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <HAL_RCC_GetClockConfig+0x60>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0207 	and.w	r2, r3, #7
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	601a      	str	r2, [r3, #0]
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40021000 	.word	0x40021000
 8006e98:	40022000 	.word	0x40022000

08006e9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ea8:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006eb4:	f7ff f9d0 	bl	8006258 <HAL_PWREx_GetVoltageRange>
 8006eb8:	6178      	str	r0, [r7, #20]
 8006eba:	e014      	b.n	8006ee6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ebc:	4b25      	ldr	r3, [pc, #148]	; (8006f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec0:	4a24      	ldr	r2, [pc, #144]	; (8006f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8006ec8:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006ed4:	f7ff f9c0 	bl	8006258 <HAL_PWREx_GetVoltageRange>
 8006ed8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006eda:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ede:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eec:	d10b      	bne.n	8006f06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d919      	bls.n	8006f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2ba0      	cmp	r3, #160	; 0xa0
 8006ef8:	d902      	bls.n	8006f00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006efa:	2302      	movs	r3, #2
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	e013      	b.n	8006f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f00:	2301      	movs	r3, #1
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	e010      	b.n	8006f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d902      	bls.n	8006f12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	e00a      	b.n	8006f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b80      	cmp	r3, #128	; 0x80
 8006f16:	d102      	bne.n	8006f1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f18:	2302      	movs	r3, #2
 8006f1a:	613b      	str	r3, [r7, #16]
 8006f1c:	e004      	b.n	8006f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b70      	cmp	r3, #112	; 0x70
 8006f22:	d101      	bne.n	8006f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f24:	2301      	movs	r3, #1
 8006f26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f023 0207 	bic.w	r2, r3, #7
 8006f30:	4909      	ldr	r1, [pc, #36]	; (8006f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d001      	beq.n	8006f4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40021000 	.word	0x40021000
 8006f58:	40022000 	.word	0x40022000

08006f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f64:	2300      	movs	r3, #0
 8006f66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f68:	2300      	movs	r3, #0
 8006f6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d041      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f80:	d02a      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f86:	d824      	bhi.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f8c:	d008      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f92:	d81e      	bhi.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f9c:	d010      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f9e:	e018      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fa0:	4b86      	ldr	r3, [pc, #536]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4a85      	ldr	r2, [pc, #532]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006faa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fac:	e015      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fabb 	bl	8007530 <RCCEx_PLLSAI1_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fbe:	e00c      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3320      	adds	r3, #32
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fba6 	bl	8007718 <RCCEx_PLLSAI2_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fd0:	e003      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8006fd6:	e000      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fda:	7cfb      	ldrb	r3, [r7, #19]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10b      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fe0:	4b76      	ldr	r3, [pc, #472]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fee:	4973      	ldr	r1, [pc, #460]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006ff6:	e001      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff8:	7cfb      	ldrb	r3, [r7, #19]
 8006ffa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d041      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800700c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007010:	d02a      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007012:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007016:	d824      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701c:	d008      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800701e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007022:	d81e      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800702c:	d010      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800702e:	e018      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007030:	4b62      	ldr	r3, [pc, #392]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4a61      	ldr	r2, [pc, #388]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800703a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800703c:	e015      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3304      	adds	r3, #4
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fa73 	bl	8007530 <RCCEx_PLLSAI1_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800704e:	e00c      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3320      	adds	r3, #32
 8007054:	2100      	movs	r1, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fb5e 	bl	8007718 <RCCEx_PLLSAI2_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007060:	e003      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	74fb      	strb	r3, [r7, #19]
      break;
 8007066:	e000      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800706a:	7cfb      	ldrb	r3, [r7, #19]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10b      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007070:	4b52      	ldr	r3, [pc, #328]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007076:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800707e:	494f      	ldr	r1, [pc, #316]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007080:	4313      	orrs	r3, r2
 8007082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007086:	e001      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	7cfb      	ldrb	r3, [r7, #19]
 800708a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80a0 	beq.w	80071da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800709a:	2300      	movs	r3, #0
 800709c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800709e:	4b47      	ldr	r3, [pc, #284]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00d      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070b4:	4b41      	ldr	r3, [pc, #260]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b8:	4a40      	ldr	r2, [pc, #256]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070be:	6593      	str	r3, [r2, #88]	; 0x58
 80070c0:	4b3e      	ldr	r3, [pc, #248]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c8:	60bb      	str	r3, [r7, #8]
 80070ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070cc:	2301      	movs	r3, #1
 80070ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070d0:	4b3b      	ldr	r3, [pc, #236]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a3a      	ldr	r2, [pc, #232]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070dc:	f7fd f836 	bl	800414c <HAL_GetTick>
 80070e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070e2:	e009      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e4:	f7fd f832 	bl	800414c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d902      	bls.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	74fb      	strb	r3, [r7, #19]
        break;
 80070f6:	e005      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070f8:	4b31      	ldr	r3, [pc, #196]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0ef      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007104:	7cfb      	ldrb	r3, [r7, #19]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d15c      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800710a:	4b2c      	ldr	r3, [pc, #176]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007114:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01f      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	429a      	cmp	r2, r3
 8007126:	d019      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007128:	4b24      	ldr	r3, [pc, #144]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007132:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007134:	4b21      	ldr	r3, [pc, #132]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713a:	4a20      	ldr	r2, [pc, #128]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800713c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007144:	4b1d      	ldr	r3, [pc, #116]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714a:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800714c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007154:	4a19      	ldr	r2, [pc, #100]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d016      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007166:	f7fc fff1 	bl	800414c <HAL_GetTick>
 800716a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800716c:	e00b      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716e:	f7fc ffed 	bl	800414c <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	f241 3288 	movw	r2, #5000	; 0x1388
 800717c:	4293      	cmp	r3, r2
 800717e:	d902      	bls.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	74fb      	strb	r3, [r7, #19]
            break;
 8007184:	e006      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007186:	4b0d      	ldr	r3, [pc, #52]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0ec      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007194:	7cfb      	ldrb	r3, [r7, #19]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10c      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800719a:	4b08      	ldr	r3, [pc, #32]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800719c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071aa:	4904      	ldr	r1, [pc, #16]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071b2:	e009      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
 80071b6:	74bb      	strb	r3, [r7, #18]
 80071b8:	e006      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80071ba:	bf00      	nop
 80071bc:	40021000 	.word	0x40021000
 80071c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c4:	7cfb      	ldrb	r3, [r7, #19]
 80071c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071c8:	7c7b      	ldrb	r3, [r7, #17]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d105      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071ce:	4b9e      	ldr	r3, [pc, #632]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d2:	4a9d      	ldr	r2, [pc, #628]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071e6:	4b98      	ldr	r3, [pc, #608]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ec:	f023 0203 	bic.w	r2, r3, #3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	4994      	ldr	r1, [pc, #592]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007208:	4b8f      	ldr	r3, [pc, #572]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800720a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720e:	f023 020c 	bic.w	r2, r3, #12
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007216:	498c      	ldr	r1, [pc, #560]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007218:	4313      	orrs	r3, r2
 800721a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800722a:	4b87      	ldr	r3, [pc, #540]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007230:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	4983      	ldr	r1, [pc, #524]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00a      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800724c:	4b7e      	ldr	r3, [pc, #504]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007252:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725a:	497b      	ldr	r1, [pc, #492]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800726e:	4b76      	ldr	r3, [pc, #472]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800727c:	4972      	ldr	r1, [pc, #456]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0320 	and.w	r3, r3, #32
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007290:	4b6d      	ldr	r3, [pc, #436]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007296:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729e:	496a      	ldr	r1, [pc, #424]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072b2:	4b65      	ldr	r3, [pc, #404]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c0:	4961      	ldr	r1, [pc, #388]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072d4:	4b5c      	ldr	r3, [pc, #368]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e2:	4959      	ldr	r1, [pc, #356]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072f6:	4b54      	ldr	r3, [pc, #336]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007304:	4950      	ldr	r1, [pc, #320]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007318:	4b4b      	ldr	r3, [pc, #300]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800731a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	4948      	ldr	r1, [pc, #288]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800733a:	4b43      	ldr	r3, [pc, #268]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800733c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007348:	493f      	ldr	r1, [pc, #252]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800734a:	4313      	orrs	r3, r2
 800734c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d028      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800735c:	4b3a      	ldr	r3, [pc, #232]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007362:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736a:	4937      	ldr	r1, [pc, #220]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800737a:	d106      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800737c:	4b32      	ldr	r3, [pc, #200]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4a31      	ldr	r2, [pc, #196]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007386:	60d3      	str	r3, [r2, #12]
 8007388:	e011      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800738e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007392:	d10c      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3304      	adds	r3, #4
 8007398:	2101      	movs	r1, #1
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f8c8 	bl	8007530 <RCCEx_PLLSAI1_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80073a4:	7cfb      	ldrb	r3, [r7, #19]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80073aa:	7cfb      	ldrb	r3, [r7, #19]
 80073ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d028      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073ba:	4b23      	ldr	r3, [pc, #140]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c8:	491f      	ldr	r1, [pc, #124]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d8:	d106      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073da:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	4a1a      	ldr	r2, [pc, #104]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073e4:	60d3      	str	r3, [r2, #12]
 80073e6:	e011      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073f0:	d10c      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3304      	adds	r3, #4
 80073f6:	2101      	movs	r1, #1
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f899 	bl	8007530 <RCCEx_PLLSAI1_Config>
 80073fe:	4603      	mov	r3, r0
 8007400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007402:	7cfb      	ldrb	r3, [r7, #19]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007408:	7cfb      	ldrb	r3, [r7, #19]
 800740a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d02b      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007418:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800741a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007426:	4908      	ldr	r1, [pc, #32]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007428:	4313      	orrs	r3, r2
 800742a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007436:	d109      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007438:	4b03      	ldr	r3, [pc, #12]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	4a02      	ldr	r2, [pc, #8]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800743e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007442:	60d3      	str	r3, [r2, #12]
 8007444:	e014      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007446:	bf00      	nop
 8007448:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007454:	d10c      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3304      	adds	r3, #4
 800745a:	2101      	movs	r1, #1
 800745c:	4618      	mov	r0, r3
 800745e:	f000 f867 	bl	8007530 <RCCEx_PLLSAI1_Config>
 8007462:	4603      	mov	r3, r0
 8007464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007466:	7cfb      	ldrb	r3, [r7, #19]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800746c:	7cfb      	ldrb	r3, [r7, #19]
 800746e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d02f      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800747c:	4b2b      	ldr	r3, [pc, #172]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800747e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007482:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800748a:	4928      	ldr	r1, [pc, #160]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800748c:	4313      	orrs	r3, r2
 800748e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800749a:	d10d      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3304      	adds	r3, #4
 80074a0:	2102      	movs	r1, #2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f844 	bl	8007530 <RCCEx_PLLSAI1_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074ac:	7cfb      	ldrb	r3, [r7, #19]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d014      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80074b2:	7cfb      	ldrb	r3, [r7, #19]
 80074b4:	74bb      	strb	r3, [r7, #18]
 80074b6:	e011      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c0:	d10c      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3320      	adds	r3, #32
 80074c6:	2102      	movs	r1, #2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 f925 	bl	8007718 <RCCEx_PLLSAI2_Config>
 80074ce:	4603      	mov	r3, r0
 80074d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074d2:	7cfb      	ldrb	r3, [r7, #19]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074e8:	4b10      	ldr	r3, [pc, #64]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f6:	490d      	ldr	r1, [pc, #52]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800750a:	4b08      	ldr	r3, [pc, #32]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007510:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800751a:	4904      	ldr	r1, [pc, #16]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800751c:	4313      	orrs	r3, r2
 800751e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007522:	7cbb      	ldrb	r3, [r7, #18]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40021000 	.word	0x40021000

08007530 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800753e:	4b75      	ldr	r3, [pc, #468]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d018      	beq.n	800757c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800754a:	4b72      	ldr	r3, [pc, #456]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f003 0203 	and.w	r2, r3, #3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d10d      	bne.n	8007576 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
       ||
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007562:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	091b      	lsrs	r3, r3, #4
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
       ||
 8007572:	429a      	cmp	r2, r3
 8007574:	d047      	beq.n	8007606 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
 800757a:	e044      	b.n	8007606 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b03      	cmp	r3, #3
 8007582:	d018      	beq.n	80075b6 <RCCEx_PLLSAI1_Config+0x86>
 8007584:	2b03      	cmp	r3, #3
 8007586:	d825      	bhi.n	80075d4 <RCCEx_PLLSAI1_Config+0xa4>
 8007588:	2b01      	cmp	r3, #1
 800758a:	d002      	beq.n	8007592 <RCCEx_PLLSAI1_Config+0x62>
 800758c:	2b02      	cmp	r3, #2
 800758e:	d009      	beq.n	80075a4 <RCCEx_PLLSAI1_Config+0x74>
 8007590:	e020      	b.n	80075d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007592:	4b60      	ldr	r3, [pc, #384]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d11d      	bne.n	80075da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075a2:	e01a      	b.n	80075da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075a4:	4b5b      	ldr	r3, [pc, #364]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d116      	bne.n	80075de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075b4:	e013      	b.n	80075de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075b6:	4b57      	ldr	r3, [pc, #348]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10f      	bne.n	80075e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075c2:	4b54      	ldr	r3, [pc, #336]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d109      	bne.n	80075e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075d2:	e006      	b.n	80075e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
      break;
 80075d8:	e004      	b.n	80075e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075da:	bf00      	nop
 80075dc:	e002      	b.n	80075e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075de:	bf00      	nop
 80075e0:	e000      	b.n	80075e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10d      	bne.n	8007606 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80075ea:	4b4a      	ldr	r3, [pc, #296]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6819      	ldr	r1, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	011b      	lsls	r3, r3, #4
 80075fe:	430b      	orrs	r3, r1
 8007600:	4944      	ldr	r1, [pc, #272]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007602:	4313      	orrs	r3, r2
 8007604:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d17d      	bne.n	8007708 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800760c:	4b41      	ldr	r3, [pc, #260]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a40      	ldr	r2, [pc, #256]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007618:	f7fc fd98 	bl	800414c <HAL_GetTick>
 800761c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800761e:	e009      	b.n	8007634 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007620:	f7fc fd94 	bl	800414c <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d902      	bls.n	8007634 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	73fb      	strb	r3, [r7, #15]
        break;
 8007632:	e005      	b.n	8007640 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007634:	4b37      	ldr	r3, [pc, #220]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1ef      	bne.n	8007620 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d160      	bne.n	8007708 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d111      	bne.n	8007670 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800764c:	4b31      	ldr	r3, [pc, #196]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6892      	ldr	r2, [r2, #8]
 800765c:	0211      	lsls	r1, r2, #8
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68d2      	ldr	r2, [r2, #12]
 8007662:	0912      	lsrs	r2, r2, #4
 8007664:	0452      	lsls	r2, r2, #17
 8007666:	430a      	orrs	r2, r1
 8007668:	492a      	ldr	r1, [pc, #168]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800766a:	4313      	orrs	r3, r2
 800766c:	610b      	str	r3, [r1, #16]
 800766e:	e027      	b.n	80076c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d112      	bne.n	800769c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007676:	4b27      	ldr	r3, [pc, #156]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800767e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6892      	ldr	r2, [r2, #8]
 8007686:	0211      	lsls	r1, r2, #8
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6912      	ldr	r2, [r2, #16]
 800768c:	0852      	lsrs	r2, r2, #1
 800768e:	3a01      	subs	r2, #1
 8007690:	0552      	lsls	r2, r2, #21
 8007692:	430a      	orrs	r2, r1
 8007694:	491f      	ldr	r1, [pc, #124]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007696:	4313      	orrs	r3, r2
 8007698:	610b      	str	r3, [r1, #16]
 800769a:	e011      	b.n	80076c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800769c:	4b1d      	ldr	r3, [pc, #116]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80076a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6892      	ldr	r2, [r2, #8]
 80076ac:	0211      	lsls	r1, r2, #8
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6952      	ldr	r2, [r2, #20]
 80076b2:	0852      	lsrs	r2, r2, #1
 80076b4:	3a01      	subs	r2, #1
 80076b6:	0652      	lsls	r2, r2, #25
 80076b8:	430a      	orrs	r2, r1
 80076ba:	4916      	ldr	r1, [pc, #88]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80076c0:	4b14      	ldr	r3, [pc, #80]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a13      	ldr	r2, [pc, #76]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076cc:	f7fc fd3e 	bl	800414c <HAL_GetTick>
 80076d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076d2:	e009      	b.n	80076e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076d4:	f7fc fd3a 	bl	800414c <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d902      	bls.n	80076e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	73fb      	strb	r3, [r7, #15]
          break;
 80076e6:	e005      	b.n	80076f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0ef      	beq.n	80076d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80076fa:	4b06      	ldr	r3, [pc, #24]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	4904      	ldr	r1, [pc, #16]	; (8007714 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007704:	4313      	orrs	r3, r2
 8007706:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40021000 	.word	0x40021000

08007718 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007726:	4b6a      	ldr	r3, [pc, #424]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d018      	beq.n	8007764 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007732:	4b67      	ldr	r3, [pc, #412]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f003 0203 	and.w	r2, r3, #3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	429a      	cmp	r2, r3
 8007740:	d10d      	bne.n	800775e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
       ||
 8007746:	2b00      	cmp	r3, #0
 8007748:	d009      	beq.n	800775e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800774a:	4b61      	ldr	r3, [pc, #388]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	091b      	lsrs	r3, r3, #4
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
       ||
 800775a:	429a      	cmp	r2, r3
 800775c:	d047      	beq.n	80077ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]
 8007762:	e044      	b.n	80077ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b03      	cmp	r3, #3
 800776a:	d018      	beq.n	800779e <RCCEx_PLLSAI2_Config+0x86>
 800776c:	2b03      	cmp	r3, #3
 800776e:	d825      	bhi.n	80077bc <RCCEx_PLLSAI2_Config+0xa4>
 8007770:	2b01      	cmp	r3, #1
 8007772:	d002      	beq.n	800777a <RCCEx_PLLSAI2_Config+0x62>
 8007774:	2b02      	cmp	r3, #2
 8007776:	d009      	beq.n	800778c <RCCEx_PLLSAI2_Config+0x74>
 8007778:	e020      	b.n	80077bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800777a:	4b55      	ldr	r3, [pc, #340]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11d      	bne.n	80077c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800778a:	e01a      	b.n	80077c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800778c:	4b50      	ldr	r3, [pc, #320]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007794:	2b00      	cmp	r3, #0
 8007796:	d116      	bne.n	80077c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800779c:	e013      	b.n	80077c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800779e:	4b4c      	ldr	r3, [pc, #304]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10f      	bne.n	80077ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077aa:	4b49      	ldr	r3, [pc, #292]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077ba:	e006      	b.n	80077ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	73fb      	strb	r3, [r7, #15]
      break;
 80077c0:	e004      	b.n	80077cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077c2:	bf00      	nop
 80077c4:	e002      	b.n	80077cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077c6:	bf00      	nop
 80077c8:	e000      	b.n	80077cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10d      	bne.n	80077ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077d2:	4b3f      	ldr	r3, [pc, #252]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6819      	ldr	r1, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	430b      	orrs	r3, r1
 80077e8:	4939      	ldr	r1, [pc, #228]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d167      	bne.n	80078c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80077f4:	4b36      	ldr	r3, [pc, #216]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a35      	ldr	r2, [pc, #212]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007800:	f7fc fca4 	bl	800414c <HAL_GetTick>
 8007804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007806:	e009      	b.n	800781c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007808:	f7fc fca0 	bl	800414c <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d902      	bls.n	800781c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	73fb      	strb	r3, [r7, #15]
        break;
 800781a:	e005      	b.n	8007828 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800781c:	4b2c      	ldr	r3, [pc, #176]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1ef      	bne.n	8007808 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d14a      	bne.n	80078c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d111      	bne.n	8007858 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007834:	4b26      	ldr	r3, [pc, #152]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800783c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6892      	ldr	r2, [r2, #8]
 8007844:	0211      	lsls	r1, r2, #8
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	68d2      	ldr	r2, [r2, #12]
 800784a:	0912      	lsrs	r2, r2, #4
 800784c:	0452      	lsls	r2, r2, #17
 800784e:	430a      	orrs	r2, r1
 8007850:	491f      	ldr	r1, [pc, #124]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007852:	4313      	orrs	r3, r2
 8007854:	614b      	str	r3, [r1, #20]
 8007856:	e011      	b.n	800787c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007858:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6892      	ldr	r2, [r2, #8]
 8007868:	0211      	lsls	r1, r2, #8
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6912      	ldr	r2, [r2, #16]
 800786e:	0852      	lsrs	r2, r2, #1
 8007870:	3a01      	subs	r2, #1
 8007872:	0652      	lsls	r2, r2, #25
 8007874:	430a      	orrs	r2, r1
 8007876:	4916      	ldr	r1, [pc, #88]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007878:	4313      	orrs	r3, r2
 800787a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800787c:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007886:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007888:	f7fc fc60 	bl	800414c <HAL_GetTick>
 800788c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800788e:	e009      	b.n	80078a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007890:	f7fc fc5c 	bl	800414c <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d902      	bls.n	80078a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	73fb      	strb	r3, [r7, #15]
          break;
 80078a2:	e005      	b.n	80078b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0ef      	beq.n	8007890 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80078b6:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078b8:	695a      	ldr	r2, [r3, #20]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	4904      	ldr	r1, [pc, #16]	; (80078d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	40021000 	.word	0x40021000

080078d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e095      	b.n	8007a12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d108      	bne.n	8007900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f6:	d009      	beq.n	800790c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	61da      	str	r2, [r3, #28]
 80078fe:	e005      	b.n	800790c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fb ff16 	bl	8003758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007942:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800794c:	d902      	bls.n	8007954 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	e002      	b.n	800795a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007958:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007962:	d007      	beq.n	8007974 <HAL_SPI_Init+0xa0>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800796c:	d002      	beq.n	8007974 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	431a      	orrs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b6:	ea42 0103 	orr.w	r1, r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	0c1b      	lsrs	r3, r3, #16
 80079d0:	f003 0204 	and.w	r2, r3, #4
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80079f0:	ea42 0103 	orr.w	r1, r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b088      	sub	sp, #32
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	60f8      	str	r0, [r7, #12]
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	603b      	str	r3, [r7, #0]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d101      	bne.n	8007a3c <HAL_SPI_Transmit+0x22>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e158      	b.n	8007cee <HAL_SPI_Transmit+0x2d4>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a44:	f7fc fb82 	bl	800414c <HAL_GetTick>
 8007a48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d002      	beq.n	8007a60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a5e:	e13d      	b.n	8007cdc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <HAL_SPI_Transmit+0x52>
 8007a66:	88fb      	ldrh	r3, [r7, #6]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d102      	bne.n	8007a72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a70:	e134      	b.n	8007cdc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2203      	movs	r2, #3
 8007a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	88fa      	ldrh	r2, [r7, #6]
 8007a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	88fa      	ldrh	r2, [r7, #6]
 8007a90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007abc:	d10f      	bne.n	8007ade <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007acc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007adc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	d007      	beq.n	8007afc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b04:	d94b      	bls.n	8007b9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_SPI_Transmit+0xfa>
 8007b0e:	8afb      	ldrh	r3, [r7, #22]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d13e      	bne.n	8007b92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	881a      	ldrh	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	1c9a      	adds	r2, r3, #2
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b38:	e02b      	b.n	8007b92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d112      	bne.n	8007b6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	881a      	ldrh	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	1c9a      	adds	r2, r3, #2
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b6c:	e011      	b.n	8007b92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b6e:	f7fc faed 	bl	800414c <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d803      	bhi.n	8007b86 <HAL_SPI_Transmit+0x16c>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b84:	d102      	bne.n	8007b8c <HAL_SPI_Transmit+0x172>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b90:	e0a4      	b.n	8007cdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1ce      	bne.n	8007b3a <HAL_SPI_Transmit+0x120>
 8007b9c:	e07c      	b.n	8007c98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <HAL_SPI_Transmit+0x192>
 8007ba6:	8afb      	ldrh	r3, [r7, #22]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d170      	bne.n	8007c8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d912      	bls.n	8007bdc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	881a      	ldrh	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	1c9a      	adds	r2, r3, #2
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b02      	subs	r3, #2
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bda:	e058      	b.n	8007c8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	330c      	adds	r3, #12
 8007be6:	7812      	ldrb	r2, [r2, #0]
 8007be8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007c02:	e044      	b.n	8007c8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d12b      	bne.n	8007c6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d912      	bls.n	8007c42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	881a      	ldrh	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	1c9a      	adds	r2, r3, #2
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	3b02      	subs	r3, #2
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c40:	e025      	b.n	8007c8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	7812      	ldrb	r2, [r2, #0]
 8007c4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c68:	e011      	b.n	8007c8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c6a:	f7fc fa6f 	bl	800414c <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d803      	bhi.n	8007c82 <HAL_SPI_Transmit+0x268>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c80:	d102      	bne.n	8007c88 <HAL_SPI_Transmit+0x26e>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d102      	bne.n	8007c8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c8c:	e026      	b.n	8007cdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1b5      	bne.n	8007c04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 fb57 	bl	8008350 <SPI_EndRxTxTransaction>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	613b      	str	r3, [r7, #16]
 8007cca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	77fb      	strb	r3, [r7, #31]
 8007cd8:	e000      	b.n	8007cdc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007cda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b08a      	sub	sp, #40	; 0x28
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
 8007d02:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d04:	2301      	movs	r3, #1
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_SPI_TransmitReceive+0x26>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e1fb      	b.n	8008114 <HAL_SPI_TransmitReceive+0x41e>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d24:	f7fc fa12 	bl	800414c <HAL_GetTick>
 8007d28:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d30:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007d38:	887b      	ldrh	r3, [r7, #2]
 8007d3a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007d3c:	887b      	ldrh	r3, [r7, #2]
 8007d3e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d40:	7efb      	ldrb	r3, [r7, #27]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d00e      	beq.n	8007d64 <HAL_SPI_TransmitReceive+0x6e>
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d4c:	d106      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x66>
 8007d56:	7efb      	ldrb	r3, [r7, #27]
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d003      	beq.n	8007d64 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d62:	e1cd      	b.n	8008100 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <HAL_SPI_TransmitReceive+0x80>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <HAL_SPI_TransmitReceive+0x80>
 8007d70:	887b      	ldrh	r3, [r7, #2]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d103      	bne.n	8007d7e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d7c:	e1c0      	b.n	8008100 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d003      	beq.n	8007d92 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2205      	movs	r2, #5
 8007d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	887a      	ldrh	r2, [r7, #2]
 8007da2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	887a      	ldrh	r2, [r7, #2]
 8007daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	887a      	ldrh	r2, [r7, #2]
 8007db8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	887a      	ldrh	r2, [r7, #2]
 8007dbe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dd4:	d802      	bhi.n	8007ddc <HAL_SPI_TransmitReceive+0xe6>
 8007dd6:	8a3b      	ldrh	r3, [r7, #16]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d908      	bls.n	8007dee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dea:	605a      	str	r2, [r3, #4]
 8007dec:	e007      	b.n	8007dfe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dfc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e08:	2b40      	cmp	r3, #64	; 0x40
 8007e0a:	d007      	beq.n	8007e1c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e24:	d97c      	bls.n	8007f20 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_SPI_TransmitReceive+0x13e>
 8007e2e:	8a7b      	ldrh	r3, [r7, #18]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d169      	bne.n	8007f08 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	881a      	ldrh	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e58:	e056      	b.n	8007f08 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d11b      	bne.n	8007ea0 <HAL_SPI_TransmitReceive+0x1aa>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d016      	beq.n	8007ea0 <HAL_SPI_TransmitReceive+0x1aa>
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d113      	bne.n	8007ea0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7c:	881a      	ldrh	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	1c9a      	adds	r2, r3, #2
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	3b01      	subs	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d11c      	bne.n	8007ee8 <HAL_SPI_TransmitReceive+0x1f2>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d016      	beq.n	8007ee8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec4:	b292      	uxth	r2, r2
 8007ec6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	1c9a      	adds	r2, r3, #2
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ee8:	f7fc f930 	bl	800414c <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d807      	bhi.n	8007f08 <HAL_SPI_TransmitReceive+0x212>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007efe:	d003      	beq.n	8007f08 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007f06:	e0fb      	b.n	8008100 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1a3      	bne.n	8007e5a <HAL_SPI_TransmitReceive+0x164>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d19d      	bne.n	8007e5a <HAL_SPI_TransmitReceive+0x164>
 8007f1e:	e0df      	b.n	80080e0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <HAL_SPI_TransmitReceive+0x23a>
 8007f28:	8a7b      	ldrh	r3, [r7, #18]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	f040 80cb 	bne.w	80080c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d912      	bls.n	8007f60 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	881a      	ldrh	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	1c9a      	adds	r2, r3, #2
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b02      	subs	r3, #2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f5e:	e0b2      	b.n	80080c6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	330c      	adds	r3, #12
 8007f6a:	7812      	ldrb	r2, [r2, #0]
 8007f6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f86:	e09e      	b.n	80080c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d134      	bne.n	8008000 <HAL_SPI_TransmitReceive+0x30a>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d02f      	beq.n	8008000 <HAL_SPI_TransmitReceive+0x30a>
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d12c      	bne.n	8008000 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d912      	bls.n	8007fd6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	881a      	ldrh	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	1c9a      	adds	r2, r3, #2
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3b02      	subs	r3, #2
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fd4:	e012      	b.n	8007ffc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	330c      	adds	r3, #12
 8007fe0:	7812      	ldrb	r2, [r2, #0]
 8007fe2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b01      	cmp	r3, #1
 800800c:	d148      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x3aa>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d042      	beq.n	80080a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b01      	cmp	r3, #1
 8008024:	d923      	bls.n	800806e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008030:	b292      	uxth	r2, r2
 8008032:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	1c9a      	adds	r2, r3, #2
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008044:	b29b      	uxth	r3, r3
 8008046:	3b02      	subs	r3, #2
 8008048:	b29a      	uxth	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008056:	b29b      	uxth	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d81f      	bhi.n	800809c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800806a:	605a      	str	r2, [r3, #4]
 800806c:	e016      	b.n	800809c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f103 020c 	add.w	r2, r3, #12
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	7812      	ldrb	r2, [r2, #0]
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800809c:	2301      	movs	r3, #1
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080a0:	f7fc f854 	bl	800414c <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d803      	bhi.n	80080b8 <HAL_SPI_TransmitReceive+0x3c2>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b6:	d102      	bne.n	80080be <HAL_SPI_TransmitReceive+0x3c8>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d103      	bne.n	80080c6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80080c4:	e01c      	b.n	8008100 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f47f af5b 	bne.w	8007f88 <HAL_SPI_TransmitReceive+0x292>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f47f af54 	bne.w	8007f88 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f933 	bl	8008350 <SPI_EndRxTxTransaction>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d006      	beq.n	80080fe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	661a      	str	r2, [r3, #96]	; 0x60
 80080fc:	e000      	b.n	8008100 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80080fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008114:	4618      	mov	r0, r3
 8008116:	3728      	adds	r7, #40	; 0x28
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800812c:	f7fc f80e 	bl	800414c <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	4413      	add	r3, r2
 800813a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800813c:	f7fc f806 	bl	800414c <HAL_GetTick>
 8008140:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008142:	4b39      	ldr	r3, [pc, #228]	; (8008228 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	015b      	lsls	r3, r3, #5
 8008148:	0d1b      	lsrs	r3, r3, #20
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	fb02 f303 	mul.w	r3, r2, r3
 8008150:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008152:	e054      	b.n	80081fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800815a:	d050      	beq.n	80081fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800815c:	f7fb fff6 	bl	800414c <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	429a      	cmp	r2, r3
 800816a:	d902      	bls.n	8008172 <SPI_WaitFlagStateUntilTimeout+0x56>
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d13d      	bne.n	80081ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008180:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818a:	d111      	bne.n	80081b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008194:	d004      	beq.n	80081a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819e:	d107      	bne.n	80081b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b8:	d10f      	bne.n	80081da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e017      	b.n	800821e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4013      	ands	r3, r2
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	429a      	cmp	r2, r3
 800820c:	bf0c      	ite	eq
 800820e:	2301      	moveq	r3, #1
 8008210:	2300      	movne	r3, #0
 8008212:	b2db      	uxtb	r3, r3
 8008214:	461a      	mov	r2, r3
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	429a      	cmp	r2, r3
 800821a:	d19b      	bne.n	8008154 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3720      	adds	r7, #32
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000094 	.word	0x20000094

0800822c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800823a:	f7fb ff87 	bl	800414c <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	4413      	add	r3, r2
 8008248:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800824a:	f7fb ff7f 	bl	800414c <HAL_GetTick>
 800824e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008250:	4b3e      	ldr	r3, [pc, #248]	; (800834c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	00da      	lsls	r2, r3, #3
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	0d1b      	lsrs	r3, r3, #20
 8008260:	69fa      	ldr	r2, [r7, #28]
 8008262:	fb02 f303 	mul.w	r3, r2, r3
 8008266:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8008268:	e062      	b.n	8008330 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008270:	d109      	bne.n	8008286 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d106      	bne.n	8008286 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	330c      	adds	r3, #12
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008284:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800828c:	d050      	beq.n	8008330 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800828e:	f7fb ff5d 	bl	800414c <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	429a      	cmp	r2, r3
 800829c:	d902      	bls.n	80082a4 <SPI_WaitFifoStateUntilTimeout+0x78>
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d13d      	bne.n	8008320 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082bc:	d111      	bne.n	80082e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082c6:	d004      	beq.n	80082d2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d0:	d107      	bne.n	80082e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ea:	d10f      	bne.n	800830c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800830a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e010      	b.n	8008342 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	3b01      	subs	r3, #1
 800832e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	4013      	ands	r3, r2
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	429a      	cmp	r2, r3
 800833e:	d194      	bne.n	800826a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3720      	adds	r7, #32
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000094 	.word	0x20000094

08008350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2200      	movs	r2, #0
 8008364:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff ff5f 	bl	800822c <SPI_WaitFifoStateUntilTimeout>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008378:	f043 0220 	orr.w	r2, r3, #32
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e027      	b.n	80083d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	2180      	movs	r1, #128	; 0x80
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff fec4 	bl	800811c <SPI_WaitFlagStateUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839e:	f043 0220 	orr.w	r2, r3, #32
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e014      	b.n	80083d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f7ff ff38 	bl	800822c <SPI_WaitFifoStateUntilTimeout>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d007      	beq.n	80083d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c6:	f043 0220 	orr.w	r2, r3, #32
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e000      	b.n	80083d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e049      	b.n	8008482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fb fb2a 	bl	8003a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f001 f962 	bl	80096e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b01      	cmp	r3, #1
 800849e:	d001      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e04f      	b.n	8008544 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0201 	orr.w	r2, r2, #1
 80084ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a23      	ldr	r2, [pc, #140]	; (8008550 <HAL_TIM_Base_Start_IT+0xc4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d01d      	beq.n	8008502 <HAL_TIM_Base_Start_IT+0x76>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ce:	d018      	beq.n	8008502 <HAL_TIM_Base_Start_IT+0x76>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a1f      	ldr	r2, [pc, #124]	; (8008554 <HAL_TIM_Base_Start_IT+0xc8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d013      	beq.n	8008502 <HAL_TIM_Base_Start_IT+0x76>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a1e      	ldr	r2, [pc, #120]	; (8008558 <HAL_TIM_Base_Start_IT+0xcc>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00e      	beq.n	8008502 <HAL_TIM_Base_Start_IT+0x76>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a1c      	ldr	r2, [pc, #112]	; (800855c <HAL_TIM_Base_Start_IT+0xd0>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d009      	beq.n	8008502 <HAL_TIM_Base_Start_IT+0x76>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a1b      	ldr	r2, [pc, #108]	; (8008560 <HAL_TIM_Base_Start_IT+0xd4>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d004      	beq.n	8008502 <HAL_TIM_Base_Start_IT+0x76>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a19      	ldr	r2, [pc, #100]	; (8008564 <HAL_TIM_Base_Start_IT+0xd8>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d115      	bne.n	800852e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	4b17      	ldr	r3, [pc, #92]	; (8008568 <HAL_TIM_Base_Start_IT+0xdc>)
 800850a:	4013      	ands	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b06      	cmp	r3, #6
 8008512:	d015      	beq.n	8008540 <HAL_TIM_Base_Start_IT+0xb4>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851a:	d011      	beq.n	8008540 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0201 	orr.w	r2, r2, #1
 800852a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852c:	e008      	b.n	8008540 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0201 	orr.w	r2, r2, #1
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e000      	b.n	8008542 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008540:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	40012c00 	.word	0x40012c00
 8008554:	40000400 	.word	0x40000400
 8008558:	40000800 	.word	0x40000800
 800855c:	40000c00 	.word	0x40000c00
 8008560:	40013400 	.word	0x40013400
 8008564:	40014000 	.word	0x40014000
 8008568:	00010007 	.word	0x00010007

0800856c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e049      	b.n	8008612 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d106      	bne.n	8008598 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fb f940 	bl	8003818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3304      	adds	r3, #4
 80085a8:	4619      	mov	r1, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	f001 f89a 	bl	80096e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d109      	bne.n	8008640 <HAL_TIM_PWM_Start_IT+0x24>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	bf14      	ite	ne
 8008638:	2301      	movne	r3, #1
 800863a:	2300      	moveq	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	e03c      	b.n	80086ba <HAL_TIM_PWM_Start_IT+0x9e>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2b04      	cmp	r3, #4
 8008644:	d109      	bne.n	800865a <HAL_TIM_PWM_Start_IT+0x3e>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b01      	cmp	r3, #1
 8008650:	bf14      	ite	ne
 8008652:	2301      	movne	r3, #1
 8008654:	2300      	moveq	r3, #0
 8008656:	b2db      	uxtb	r3, r3
 8008658:	e02f      	b.n	80086ba <HAL_TIM_PWM_Start_IT+0x9e>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b08      	cmp	r3, #8
 800865e:	d109      	bne.n	8008674 <HAL_TIM_PWM_Start_IT+0x58>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	bf14      	ite	ne
 800866c:	2301      	movne	r3, #1
 800866e:	2300      	moveq	r3, #0
 8008670:	b2db      	uxtb	r3, r3
 8008672:	e022      	b.n	80086ba <HAL_TIM_PWM_Start_IT+0x9e>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b0c      	cmp	r3, #12
 8008678:	d109      	bne.n	800868e <HAL_TIM_PWM_Start_IT+0x72>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b01      	cmp	r3, #1
 8008684:	bf14      	ite	ne
 8008686:	2301      	movne	r3, #1
 8008688:	2300      	moveq	r3, #0
 800868a:	b2db      	uxtb	r3, r3
 800868c:	e015      	b.n	80086ba <HAL_TIM_PWM_Start_IT+0x9e>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b10      	cmp	r3, #16
 8008692:	d109      	bne.n	80086a8 <HAL_TIM_PWM_Start_IT+0x8c>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b01      	cmp	r3, #1
 800869e:	bf14      	ite	ne
 80086a0:	2301      	movne	r3, #1
 80086a2:	2300      	moveq	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	e008      	b.n	80086ba <HAL_TIM_PWM_Start_IT+0x9e>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	bf14      	ite	ne
 80086b4:	2301      	movne	r3, #1
 80086b6:	2300      	moveq	r3, #0
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e0e2      	b.n	8008888 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <HAL_TIM_PWM_Start_IT+0xb6>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d0:	e023      	b.n	800871a <HAL_TIM_PWM_Start_IT+0xfe>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	d104      	bne.n	80086e2 <HAL_TIM_PWM_Start_IT+0xc6>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086e0:	e01b      	b.n	800871a <HAL_TIM_PWM_Start_IT+0xfe>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b08      	cmp	r3, #8
 80086e6:	d104      	bne.n	80086f2 <HAL_TIM_PWM_Start_IT+0xd6>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2202      	movs	r2, #2
 80086ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086f0:	e013      	b.n	800871a <HAL_TIM_PWM_Start_IT+0xfe>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b0c      	cmp	r3, #12
 80086f6:	d104      	bne.n	8008702 <HAL_TIM_PWM_Start_IT+0xe6>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008700:	e00b      	b.n	800871a <HAL_TIM_PWM_Start_IT+0xfe>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b10      	cmp	r3, #16
 8008706:	d104      	bne.n	8008712 <HAL_TIM_PWM_Start_IT+0xf6>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008710:	e003      	b.n	800871a <HAL_TIM_PWM_Start_IT+0xfe>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2202      	movs	r2, #2
 8008716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b0c      	cmp	r3, #12
 800871e:	d841      	bhi.n	80087a4 <HAL_TIM_PWM_Start_IT+0x188>
 8008720:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <HAL_TIM_PWM_Start_IT+0x10c>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	0800875d 	.word	0x0800875d
 800872c:	080087a5 	.word	0x080087a5
 8008730:	080087a5 	.word	0x080087a5
 8008734:	080087a5 	.word	0x080087a5
 8008738:	0800876f 	.word	0x0800876f
 800873c:	080087a5 	.word	0x080087a5
 8008740:	080087a5 	.word	0x080087a5
 8008744:	080087a5 	.word	0x080087a5
 8008748:	08008781 	.word	0x08008781
 800874c:	080087a5 	.word	0x080087a5
 8008750:	080087a5 	.word	0x080087a5
 8008754:	080087a5 	.word	0x080087a5
 8008758:	08008793 	.word	0x08008793
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f042 0202 	orr.w	r2, r2, #2
 800876a:	60da      	str	r2, [r3, #12]
      break;
 800876c:	e01b      	b.n	80087a6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0204 	orr.w	r2, r2, #4
 800877c:	60da      	str	r2, [r3, #12]
      break;
 800877e:	e012      	b.n	80087a6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0208 	orr.w	r2, r2, #8
 800878e:	60da      	str	r2, [r3, #12]
      break;
 8008790:	e009      	b.n	80087a6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68da      	ldr	r2, [r3, #12]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0210 	orr.w	r2, r2, #16
 80087a0:	60da      	str	r2, [r3, #12]
      break;
 80087a2:	e000      	b.n	80087a6 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80087a4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2201      	movs	r2, #1
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 fb08 	bl	8009dc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a35      	ldr	r2, [pc, #212]	; (8008890 <HAL_TIM_PWM_Start_IT+0x274>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d013      	beq.n	80087e6 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a34      	ldr	r2, [pc, #208]	; (8008894 <HAL_TIM_PWM_Start_IT+0x278>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00e      	beq.n	80087e6 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a32      	ldr	r2, [pc, #200]	; (8008898 <HAL_TIM_PWM_Start_IT+0x27c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d009      	beq.n	80087e6 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a31      	ldr	r2, [pc, #196]	; (800889c <HAL_TIM_PWM_Start_IT+0x280>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d004      	beq.n	80087e6 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a2f      	ldr	r2, [pc, #188]	; (80088a0 <HAL_TIM_PWM_Start_IT+0x284>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d101      	bne.n	80087ea <HAL_TIM_PWM_Start_IT+0x1ce>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <HAL_TIM_PWM_Start_IT+0x1d0>
 80087ea:	2300      	movs	r3, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a22      	ldr	r2, [pc, #136]	; (8008890 <HAL_TIM_PWM_Start_IT+0x274>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d01d      	beq.n	8008846 <HAL_TIM_PWM_Start_IT+0x22a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008812:	d018      	beq.n	8008846 <HAL_TIM_PWM_Start_IT+0x22a>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a22      	ldr	r2, [pc, #136]	; (80088a4 <HAL_TIM_PWM_Start_IT+0x288>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d013      	beq.n	8008846 <HAL_TIM_PWM_Start_IT+0x22a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a21      	ldr	r2, [pc, #132]	; (80088a8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00e      	beq.n	8008846 <HAL_TIM_PWM_Start_IT+0x22a>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a1f      	ldr	r2, [pc, #124]	; (80088ac <HAL_TIM_PWM_Start_IT+0x290>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d009      	beq.n	8008846 <HAL_TIM_PWM_Start_IT+0x22a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a17      	ldr	r2, [pc, #92]	; (8008894 <HAL_TIM_PWM_Start_IT+0x278>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d004      	beq.n	8008846 <HAL_TIM_PWM_Start_IT+0x22a>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a15      	ldr	r2, [pc, #84]	; (8008898 <HAL_TIM_PWM_Start_IT+0x27c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d115      	bne.n	8008872 <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <HAL_TIM_PWM_Start_IT+0x294>)
 800884e:	4013      	ands	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b06      	cmp	r3, #6
 8008856:	d015      	beq.n	8008884 <HAL_TIM_PWM_Start_IT+0x268>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885e:	d011      	beq.n	8008884 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008870:	e008      	b.n	8008884 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f042 0201 	orr.w	r2, r2, #1
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	e000      	b.n	8008886 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008884:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40013400 	.word	0x40013400
 8008898:	40014000 	.word	0x40014000
 800889c:	40014400 	.word	0x40014400
 80088a0:	40014800 	.word	0x40014800
 80088a4:	40000400 	.word	0x40000400
 80088a8:	40000800 	.word	0x40000800
 80088ac:	40000c00 	.word	0x40000c00
 80088b0:	00010007 	.word	0x00010007

080088b4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b0c      	cmp	r3, #12
 80088c2:	d841      	bhi.n	8008948 <HAL_TIM_PWM_Stop_IT+0x94>
 80088c4:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <HAL_TIM_PWM_Stop_IT+0x18>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	08008901 	.word	0x08008901
 80088d0:	08008949 	.word	0x08008949
 80088d4:	08008949 	.word	0x08008949
 80088d8:	08008949 	.word	0x08008949
 80088dc:	08008913 	.word	0x08008913
 80088e0:	08008949 	.word	0x08008949
 80088e4:	08008949 	.word	0x08008949
 80088e8:	08008949 	.word	0x08008949
 80088ec:	08008925 	.word	0x08008925
 80088f0:	08008949 	.word	0x08008949
 80088f4:	08008949 	.word	0x08008949
 80088f8:	08008949 	.word	0x08008949
 80088fc:	08008937 	.word	0x08008937
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 0202 	bic.w	r2, r2, #2
 800890e:	60da      	str	r2, [r3, #12]
      break;
 8008910:	e01b      	b.n	800894a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0204 	bic.w	r2, r2, #4
 8008920:	60da      	str	r2, [r3, #12]
      break;
 8008922:	e012      	b.n	800894a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0208 	bic.w	r2, r2, #8
 8008932:	60da      	str	r2, [r3, #12]
      break;
 8008934:	e009      	b.n	800894a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0210 	bic.w	r2, r2, #16
 8008944:	60da      	str	r2, [r3, #12]
      break;
 8008946:	e000      	b.n	800894a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8008948:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2200      	movs	r2, #0
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f001 fa36 	bl	8009dc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a3e      	ldr	r2, [pc, #248]	; (8008a58 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d013      	beq.n	800898a <HAL_TIM_PWM_Stop_IT+0xd6>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a3d      	ldr	r2, [pc, #244]	; (8008a5c <HAL_TIM_PWM_Stop_IT+0x1a8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d00e      	beq.n	800898a <HAL_TIM_PWM_Stop_IT+0xd6>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a3b      	ldr	r2, [pc, #236]	; (8008a60 <HAL_TIM_PWM_Stop_IT+0x1ac>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d009      	beq.n	800898a <HAL_TIM_PWM_Stop_IT+0xd6>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a3a      	ldr	r2, [pc, #232]	; (8008a64 <HAL_TIM_PWM_Stop_IT+0x1b0>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d004      	beq.n	800898a <HAL_TIM_PWM_Stop_IT+0xd6>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a38      	ldr	r2, [pc, #224]	; (8008a68 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d101      	bne.n	800898e <HAL_TIM_PWM_Stop_IT+0xda>
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <HAL_TIM_PWM_Stop_IT+0xdc>
 800898e:	2300      	movs	r3, #0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d017      	beq.n	80089c4 <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6a1a      	ldr	r2, [r3, #32]
 800899a:	f241 1311 	movw	r3, #4369	; 0x1111
 800899e:	4013      	ands	r3, r2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10f      	bne.n	80089c4 <HAL_TIM_PWM_Stop_IT+0x110>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6a1a      	ldr	r2, [r3, #32]
 80089aa:	f240 4344 	movw	r3, #1092	; 0x444
 80089ae:	4013      	ands	r3, r2
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d107      	bne.n	80089c4 <HAL_TIM_PWM_Stop_IT+0x110>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6a1a      	ldr	r2, [r3, #32]
 80089ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80089ce:	4013      	ands	r3, r2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10f      	bne.n	80089f4 <HAL_TIM_PWM_Stop_IT+0x140>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6a1a      	ldr	r2, [r3, #32]
 80089da:	f240 4344 	movw	r3, #1092	; 0x444
 80089de:	4013      	ands	r3, r2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d107      	bne.n	80089f4 <HAL_TIM_PWM_Stop_IT+0x140>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d104      	bne.n	8008a04 <HAL_TIM_PWM_Stop_IT+0x150>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a02:	e023      	b.n	8008a4c <HAL_TIM_PWM_Stop_IT+0x198>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	d104      	bne.n	8008a14 <HAL_TIM_PWM_Stop_IT+0x160>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a12:	e01b      	b.n	8008a4c <HAL_TIM_PWM_Stop_IT+0x198>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b08      	cmp	r3, #8
 8008a18:	d104      	bne.n	8008a24 <HAL_TIM_PWM_Stop_IT+0x170>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a22:	e013      	b.n	8008a4c <HAL_TIM_PWM_Stop_IT+0x198>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b0c      	cmp	r3, #12
 8008a28:	d104      	bne.n	8008a34 <HAL_TIM_PWM_Stop_IT+0x180>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a32:	e00b      	b.n	8008a4c <HAL_TIM_PWM_Stop_IT+0x198>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2b10      	cmp	r3, #16
 8008a38:	d104      	bne.n	8008a44 <HAL_TIM_PWM_Stop_IT+0x190>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a42:	e003      	b.n	8008a4c <HAL_TIM_PWM_Stop_IT+0x198>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	40012c00 	.word	0x40012c00
 8008a5c:	40013400 	.word	0x40013400
 8008a60:	40014000 	.word	0x40014000
 8008a64:	40014400 	.word	0x40014400
 8008a68:	40014800 	.word	0x40014800

08008a6c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <HAL_TIM_PWM_Start_DMA+0x28>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	bf0c      	ite	eq
 8008a8c:	2301      	moveq	r3, #1
 8008a8e:	2300      	movne	r3, #0
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	e03c      	b.n	8008b0e <HAL_TIM_PWM_Start_DMA+0xa2>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d109      	bne.n	8008aae <HAL_TIM_PWM_Start_DMA+0x42>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	bf0c      	ite	eq
 8008aa6:	2301      	moveq	r3, #1
 8008aa8:	2300      	movne	r3, #0
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	e02f      	b.n	8008b0e <HAL_TIM_PWM_Start_DMA+0xa2>
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d109      	bne.n	8008ac8 <HAL_TIM_PWM_Start_DMA+0x5c>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	bf0c      	ite	eq
 8008ac0:	2301      	moveq	r3, #1
 8008ac2:	2300      	movne	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	e022      	b.n	8008b0e <HAL_TIM_PWM_Start_DMA+0xa2>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b0c      	cmp	r3, #12
 8008acc:	d109      	bne.n	8008ae2 <HAL_TIM_PWM_Start_DMA+0x76>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	bf0c      	ite	eq
 8008ada:	2301      	moveq	r3, #1
 8008adc:	2300      	movne	r3, #0
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	e015      	b.n	8008b0e <HAL_TIM_PWM_Start_DMA+0xa2>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b10      	cmp	r3, #16
 8008ae6:	d109      	bne.n	8008afc <HAL_TIM_PWM_Start_DMA+0x90>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	bf0c      	ite	eq
 8008af4:	2301      	moveq	r3, #1
 8008af6:	2300      	movne	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	e008      	b.n	8008b0e <HAL_TIM_PWM_Start_DMA+0xa2>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	bf0c      	ite	eq
 8008b08:	2301      	moveq	r3, #1
 8008b0a:	2300      	movne	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8008b12:	2302      	movs	r3, #2
 8008b14:	e1a6      	b.n	8008e64 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d109      	bne.n	8008b30 <HAL_TIM_PWM_Start_DMA+0xc4>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	bf0c      	ite	eq
 8008b28:	2301      	moveq	r3, #1
 8008b2a:	2300      	movne	r3, #0
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	e03c      	b.n	8008baa <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d109      	bne.n	8008b4a <HAL_TIM_PWM_Start_DMA+0xde>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	bf0c      	ite	eq
 8008b42:	2301      	moveq	r3, #1
 8008b44:	2300      	movne	r3, #0
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	e02f      	b.n	8008baa <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b08      	cmp	r3, #8
 8008b4e:	d109      	bne.n	8008b64 <HAL_TIM_PWM_Start_DMA+0xf8>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	bf0c      	ite	eq
 8008b5c:	2301      	moveq	r3, #1
 8008b5e:	2300      	movne	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	e022      	b.n	8008baa <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b0c      	cmp	r3, #12
 8008b68:	d109      	bne.n	8008b7e <HAL_TIM_PWM_Start_DMA+0x112>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	bf0c      	ite	eq
 8008b76:	2301      	moveq	r3, #1
 8008b78:	2300      	movne	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	e015      	b.n	8008baa <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b10      	cmp	r3, #16
 8008b82:	d109      	bne.n	8008b98 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	bf0c      	ite	eq
 8008b90:	2301      	moveq	r3, #1
 8008b92:	2300      	movne	r3, #0
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	e008      	b.n	8008baa <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d034      	beq.n	8008c18 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d104      	bne.n	8008bbe <HAL_TIM_PWM_Start_DMA+0x152>
 8008bb4:	887b      	ldrh	r3, [r7, #2]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e152      	b.n	8008e64 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d104      	bne.n	8008bce <HAL_TIM_PWM_Start_DMA+0x162>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bcc:	e026      	b.n	8008c1c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d104      	bne.n	8008bde <HAL_TIM_PWM_Start_DMA+0x172>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bdc:	e01e      	b.n	8008c1c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d104      	bne.n	8008bee <HAL_TIM_PWM_Start_DMA+0x182>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bec:	e016      	b.n	8008c1c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b0c      	cmp	r3, #12
 8008bf2:	d104      	bne.n	8008bfe <HAL_TIM_PWM_Start_DMA+0x192>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bfc:	e00e      	b.n	8008c1c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2b10      	cmp	r3, #16
 8008c02:	d104      	bne.n	8008c0e <HAL_TIM_PWM_Start_DMA+0x1a2>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2202      	movs	r2, #2
 8008c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c0c:	e006      	b.n	8008c1c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2202      	movs	r2, #2
 8008c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c16:	e001      	b.n	8008c1c <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e123      	b.n	8008e64 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b0c      	cmp	r3, #12
 8008c20:	f200 80ae 	bhi.w	8008d80 <HAL_TIM_PWM_Start_DMA+0x314>
 8008c24:	a201      	add	r2, pc, #4	; (adr r2, 8008c2c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8008c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2a:	bf00      	nop
 8008c2c:	08008c61 	.word	0x08008c61
 8008c30:	08008d81 	.word	0x08008d81
 8008c34:	08008d81 	.word	0x08008d81
 8008c38:	08008d81 	.word	0x08008d81
 8008c3c:	08008ca9 	.word	0x08008ca9
 8008c40:	08008d81 	.word	0x08008d81
 8008c44:	08008d81 	.word	0x08008d81
 8008c48:	08008d81 	.word	0x08008d81
 8008c4c:	08008cf1 	.word	0x08008cf1
 8008c50:	08008d81 	.word	0x08008d81
 8008c54:	08008d81 	.word	0x08008d81
 8008c58:	08008d81 	.word	0x08008d81
 8008c5c:	08008d39 	.word	0x08008d39
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	4a81      	ldr	r2, [pc, #516]	; (8008e6c <HAL_TIM_PWM_Start_DMA+0x400>)
 8008c66:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	4a80      	ldr	r2, [pc, #512]	; (8008e70 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008c6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	4a7f      	ldr	r2, [pc, #508]	; (8008e74 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008c76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3334      	adds	r3, #52	; 0x34
 8008c84:	461a      	mov	r2, r3
 8008c86:	887b      	ldrh	r3, [r7, #2]
 8008c88:	f7fc fe7e 	bl	8005988 <HAL_DMA_Start_IT>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e0e6      	b.n	8008e64 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ca4:	60da      	str	r2, [r3, #12]
      break;
 8008ca6:	e06c      	b.n	8008d82 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cac:	4a6f      	ldr	r2, [pc, #444]	; (8008e6c <HAL_TIM_PWM_Start_DMA+0x400>)
 8008cae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	4a6e      	ldr	r2, [pc, #440]	; (8008e70 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbc:	4a6d      	ldr	r2, [pc, #436]	; (8008e74 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008cbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3338      	adds	r3, #56	; 0x38
 8008ccc:	461a      	mov	r2, r3
 8008cce:	887b      	ldrh	r3, [r7, #2]
 8008cd0:	f7fc fe5a 	bl	8005988 <HAL_DMA_Start_IT>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e0c2      	b.n	8008e64 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cec:	60da      	str	r2, [r3, #12]
      break;
 8008cee:	e048      	b.n	8008d82 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	4a5d      	ldr	r2, [pc, #372]	; (8008e6c <HAL_TIM_PWM_Start_DMA+0x400>)
 8008cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	4a5c      	ldr	r2, [pc, #368]	; (8008e70 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008cfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	4a5b      	ldr	r2, [pc, #364]	; (8008e74 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008d06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	333c      	adds	r3, #60	; 0x3c
 8008d14:	461a      	mov	r2, r3
 8008d16:	887b      	ldrh	r3, [r7, #2]
 8008d18:	f7fc fe36 	bl	8005988 <HAL_DMA_Start_IT>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e09e      	b.n	8008e64 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68da      	ldr	r2, [r3, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d34:	60da      	str	r2, [r3, #12]
      break;
 8008d36:	e024      	b.n	8008d82 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3c:	4a4b      	ldr	r2, [pc, #300]	; (8008e6c <HAL_TIM_PWM_Start_DMA+0x400>)
 8008d3e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d44:	4a4a      	ldr	r2, [pc, #296]	; (8008e70 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008d46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	4a49      	ldr	r2, [pc, #292]	; (8008e74 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008d4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3340      	adds	r3, #64	; 0x40
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	887b      	ldrh	r3, [r7, #2]
 8008d60:	f7fc fe12 	bl	8005988 <HAL_DMA_Start_IT>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e07a      	b.n	8008e64 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68da      	ldr	r2, [r3, #12]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d7c:	60da      	str	r2, [r3, #12]
      break;
 8008d7e:	e000      	b.n	8008d82 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8008d80:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2201      	movs	r2, #1
 8008d88:	68b9      	ldr	r1, [r7, #8]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 f81a 	bl	8009dc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a38      	ldr	r2, [pc, #224]	; (8008e78 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <HAL_TIM_PWM_Start_DMA+0x356>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a37      	ldr	r2, [pc, #220]	; (8008e7c <HAL_TIM_PWM_Start_DMA+0x410>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00e      	beq.n	8008dc2 <HAL_TIM_PWM_Start_DMA+0x356>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a35      	ldr	r2, [pc, #212]	; (8008e80 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d009      	beq.n	8008dc2 <HAL_TIM_PWM_Start_DMA+0x356>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a34      	ldr	r2, [pc, #208]	; (8008e84 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d004      	beq.n	8008dc2 <HAL_TIM_PWM_Start_DMA+0x356>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a32      	ldr	r2, [pc, #200]	; (8008e88 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d101      	bne.n	8008dc6 <HAL_TIM_PWM_Start_DMA+0x35a>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <HAL_TIM_PWM_Start_DMA+0x35c>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d007      	beq.n	8008ddc <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a25      	ldr	r2, [pc, #148]	; (8008e78 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d01d      	beq.n	8008e22 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dee:	d018      	beq.n	8008e22 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a25      	ldr	r2, [pc, #148]	; (8008e8c <HAL_TIM_PWM_Start_DMA+0x420>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d013      	beq.n	8008e22 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a24      	ldr	r2, [pc, #144]	; (8008e90 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00e      	beq.n	8008e22 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a22      	ldr	r2, [pc, #136]	; (8008e94 <HAL_TIM_PWM_Start_DMA+0x428>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d009      	beq.n	8008e22 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a1a      	ldr	r2, [pc, #104]	; (8008e7c <HAL_TIM_PWM_Start_DMA+0x410>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d004      	beq.n	8008e22 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d115      	bne.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	4b1b      	ldr	r3, [pc, #108]	; (8008e98 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b06      	cmp	r3, #6
 8008e32:	d015      	beq.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f4>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e3a:	d011      	beq.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e4c:	e008      	b.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0201 	orr.w	r2, r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	e000      	b.n	8008e62 <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	080095d3 	.word	0x080095d3
 8008e70:	0800967b 	.word	0x0800967b
 8008e74:	08009541 	.word	0x08009541
 8008e78:	40012c00 	.word	0x40012c00
 8008e7c:	40013400 	.word	0x40013400
 8008e80:	40014000 	.word	0x40014000
 8008e84:	40014400 	.word	0x40014400
 8008e88:	40014800 	.word	0x40014800
 8008e8c:	40000400 	.word	0x40000400
 8008e90:	40000800 	.word	0x40000800
 8008e94:	40000c00 	.word	0x40000c00
 8008e98:	00010007 	.word	0x00010007

08008e9c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b0c      	cmp	r3, #12
 8008eaa:	d855      	bhi.n	8008f58 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8008eac:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8008eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb2:	bf00      	nop
 8008eb4:	08008ee9 	.word	0x08008ee9
 8008eb8:	08008f59 	.word	0x08008f59
 8008ebc:	08008f59 	.word	0x08008f59
 8008ec0:	08008f59 	.word	0x08008f59
 8008ec4:	08008f05 	.word	0x08008f05
 8008ec8:	08008f59 	.word	0x08008f59
 8008ecc:	08008f59 	.word	0x08008f59
 8008ed0:	08008f59 	.word	0x08008f59
 8008ed4:	08008f21 	.word	0x08008f21
 8008ed8:	08008f59 	.word	0x08008f59
 8008edc:	08008f59 	.word	0x08008f59
 8008ee0:	08008f59 	.word	0x08008f59
 8008ee4:	08008f3d 	.word	0x08008f3d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ef6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fc fda3 	bl	8005a48 <HAL_DMA_Abort_IT>
      break;
 8008f02:	e02a      	b.n	8008f5a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fc fd95 	bl	8005a48 <HAL_DMA_Abort_IT>
      break;
 8008f1e:	e01c      	b.n	8008f5a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fc fd87 	bl	8005a48 <HAL_DMA_Abort_IT>
      break;
 8008f3a:	e00e      	b.n	8008f5a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fc fd79 	bl	8005a48 <HAL_DMA_Abort_IT>
      break;
 8008f56:	e000      	b.n	8008f5a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8008f58:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 ff2e 	bl	8009dc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a3e      	ldr	r2, [pc, #248]	; (8009068 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d013      	beq.n	8008f9a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a3d      	ldr	r2, [pc, #244]	; (800906c <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d00e      	beq.n	8008f9a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a3b      	ldr	r2, [pc, #236]	; (8009070 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d009      	beq.n	8008f9a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a3a      	ldr	r2, [pc, #232]	; (8009074 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d004      	beq.n	8008f9a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a38      	ldr	r2, [pc, #224]	; (8009078 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d101      	bne.n	8008f9e <HAL_TIM_PWM_Stop_DMA+0x102>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e000      	b.n	8008fa0 <HAL_TIM_PWM_Stop_DMA+0x104>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d017      	beq.n	8008fd4 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6a1a      	ldr	r2, [r3, #32]
 8008faa:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fae:	4013      	ands	r3, r2
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10f      	bne.n	8008fd4 <HAL_TIM_PWM_Stop_DMA+0x138>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6a1a      	ldr	r2, [r3, #32]
 8008fba:	f240 4344 	movw	r3, #1092	; 0x444
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d107      	bne.n	8008fd4 <HAL_TIM_PWM_Stop_DMA+0x138>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6a1a      	ldr	r2, [r3, #32]
 8008fda:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fde:	4013      	ands	r3, r2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10f      	bne.n	8009004 <HAL_TIM_PWM_Stop_DMA+0x168>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6a1a      	ldr	r2, [r3, #32]
 8008fea:	f240 4344 	movw	r3, #1092	; 0x444
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d107      	bne.n	8009004 <HAL_TIM_PWM_Stop_DMA+0x168>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f022 0201 	bic.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <HAL_TIM_PWM_Stop_DMA+0x178>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009012:	e023      	b.n	800905c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b04      	cmp	r3, #4
 8009018:	d104      	bne.n	8009024 <HAL_TIM_PWM_Stop_DMA+0x188>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009022:	e01b      	b.n	800905c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b08      	cmp	r3, #8
 8009028:	d104      	bne.n	8009034 <HAL_TIM_PWM_Stop_DMA+0x198>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009032:	e013      	b.n	800905c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b0c      	cmp	r3, #12
 8009038:	d104      	bne.n	8009044 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009042:	e00b      	b.n	800905c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b10      	cmp	r3, #16
 8009048:	d104      	bne.n	8009054 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009052:	e003      	b.n	800905c <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	40012c00 	.word	0x40012c00
 800906c:	40013400 	.word	0x40013400
 8009070:	40014000 	.word	0x40014000
 8009074:	40014400 	.word	0x40014400
 8009078:	40014800 	.word	0x40014800

0800907c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b02      	cmp	r3, #2
 8009090:	d122      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b02      	cmp	r3, #2
 800909e:	d11b      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0202 	mvn.w	r2, #2
 80090a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fa16 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 80090c4:	e005      	b.n	80090d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa08 	bl	80094dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7f8 fc03 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d122      	bne.n	800912c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	d11b      	bne.n	800912c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f06f 0204 	mvn.w	r2, #4
 80090fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2202      	movs	r2, #2
 8009102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f9ec 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 8009118:	e005      	b.n	8009126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9de 	bl	80094dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7f8 fbd9 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b08      	cmp	r3, #8
 8009138:	d122      	bne.n	8009180 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f003 0308 	and.w	r3, r3, #8
 8009144:	2b08      	cmp	r3, #8
 8009146:	d11b      	bne.n	8009180 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f06f 0208 	mvn.w	r2, #8
 8009150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2204      	movs	r2, #4
 8009156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f9c2 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 800916c:	e005      	b.n	800917a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f9b4 	bl	80094dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7f8 fbaf 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0310 	and.w	r3, r3, #16
 800918a:	2b10      	cmp	r3, #16
 800918c:	d122      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f003 0310 	and.w	r3, r3, #16
 8009198:	2b10      	cmp	r3, #16
 800919a:	d11b      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0210 	mvn.w	r2, #16
 80091a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2208      	movs	r2, #8
 80091aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f998 	bl	80094f0 <HAL_TIM_IC_CaptureCallback>
 80091c0:	e005      	b.n	80091ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f98a 	bl	80094dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7f8 fb85 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d10e      	bne.n	8009200 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d107      	bne.n	8009200 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0201 	mvn.w	r2, #1
 80091f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7f9 fcf6 	bl	8002bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920a:	2b80      	cmp	r3, #128	; 0x80
 800920c:	d10e      	bne.n	800922c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009218:	2b80      	cmp	r3, #128	; 0x80
 800921a:	d107      	bne.n	800922c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 ff02 	bl	800a030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800923a:	d10e      	bne.n	800925a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009246:	2b80      	cmp	r3, #128	; 0x80
 8009248:	d107      	bne.n	800925a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fef5 	bl	800a044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009264:	2b40      	cmp	r3, #64	; 0x40
 8009266:	d10e      	bne.n	8009286 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009272:	2b40      	cmp	r3, #64	; 0x40
 8009274:	d107      	bne.n	8009286 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800927e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f949 	bl	8009518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	f003 0320 	and.w	r3, r3, #32
 8009290:	2b20      	cmp	r3, #32
 8009292:	d10e      	bne.n	80092b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d107      	bne.n	80092b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f06f 0220 	mvn.w	r2, #32
 80092aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 feb5 	bl	800a01c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80092d2:	2302      	movs	r3, #2
 80092d4:	e0fd      	b.n	80094d2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b14      	cmp	r3, #20
 80092e2:	f200 80f0 	bhi.w	80094c6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	08009341 	.word	0x08009341
 80092f0:	080094c7 	.word	0x080094c7
 80092f4:	080094c7 	.word	0x080094c7
 80092f8:	080094c7 	.word	0x080094c7
 80092fc:	08009381 	.word	0x08009381
 8009300:	080094c7 	.word	0x080094c7
 8009304:	080094c7 	.word	0x080094c7
 8009308:	080094c7 	.word	0x080094c7
 800930c:	080093c3 	.word	0x080093c3
 8009310:	080094c7 	.word	0x080094c7
 8009314:	080094c7 	.word	0x080094c7
 8009318:	080094c7 	.word	0x080094c7
 800931c:	08009403 	.word	0x08009403
 8009320:	080094c7 	.word	0x080094c7
 8009324:	080094c7 	.word	0x080094c7
 8009328:	080094c7 	.word	0x080094c7
 800932c:	08009445 	.word	0x08009445
 8009330:	080094c7 	.word	0x080094c7
 8009334:	080094c7 	.word	0x080094c7
 8009338:	080094c7 	.word	0x080094c7
 800933c:	08009485 	.word	0x08009485
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fa66 	bl	8009818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699a      	ldr	r2, [r3, #24]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0208 	orr.w	r2, r2, #8
 800935a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 0204 	bic.w	r2, r2, #4
 800936a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6999      	ldr	r1, [r3, #24]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	691a      	ldr	r2, [r3, #16]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	619a      	str	r2, [r3, #24]
      break;
 800937e:	e0a3      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68b9      	ldr	r1, [r7, #8]
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fad6 	bl	8009938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800939a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	699a      	ldr	r2, [r3, #24]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6999      	ldr	r1, [r3, #24]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	021a      	lsls	r2, r3, #8
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	619a      	str	r2, [r3, #24]
      break;
 80093c0:	e082      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68b9      	ldr	r1, [r7, #8]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fb3f 	bl	8009a4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69da      	ldr	r2, [r3, #28]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f042 0208 	orr.w	r2, r2, #8
 80093dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69da      	ldr	r2, [r3, #28]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0204 	bic.w	r2, r2, #4
 80093ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	69d9      	ldr	r1, [r3, #28]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	61da      	str	r2, [r3, #28]
      break;
 8009400:	e062      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fba7 	bl	8009b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800941c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69da      	ldr	r2, [r3, #28]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800942c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69d9      	ldr	r1, [r3, #28]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	021a      	lsls	r2, r3, #8
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	61da      	str	r2, [r3, #28]
      break;
 8009442:	e041      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fbf0 	bl	8009c30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0208 	orr.w	r2, r2, #8
 800945e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0204 	bic.w	r2, r2, #4
 800946e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009482:	e021      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68b9      	ldr	r1, [r7, #8]
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fc34 	bl	8009cf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800949e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	021a      	lsls	r2, r3, #8
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094c4:	e000      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80094c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop

080094dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	429a      	cmp	r2, r3
 8009556:	d107      	bne.n	8009568 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009566:	e02a      	b.n	80095be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	429a      	cmp	r2, r3
 8009570:	d107      	bne.n	8009582 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2202      	movs	r2, #2
 8009576:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009580:	e01d      	b.n	80095be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d107      	bne.n	800959c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2204      	movs	r2, #4
 8009590:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800959a:	e010      	b.n	80095be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d107      	bne.n	80095b6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2208      	movs	r2, #8
 80095aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095b4:	e003      	b.n	80095be <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f7ff ffb4 	bl	800952c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	771a      	strb	r2, [r3, #28]
}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d10b      	bne.n	8009602 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2201      	movs	r2, #1
 80095ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d136      	bne.n	8009666 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009600:	e031      	b.n	8009666 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	429a      	cmp	r2, r3
 800960a:	d10b      	bne.n	8009624 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2202      	movs	r2, #2
 8009610:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d125      	bne.n	8009666 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009622:	e020      	b.n	8009666 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	429a      	cmp	r2, r3
 800962c:	d10b      	bne.n	8009646 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2204      	movs	r2, #4
 8009632:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	69db      	ldr	r3, [r3, #28]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d114      	bne.n	8009666 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009644:	e00f      	b.n	8009666 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	429a      	cmp	r2, r3
 800964e:	d10a      	bne.n	8009666 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2208      	movs	r2, #8
 8009654:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f7f8 f936 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	771a      	strb	r2, [r3, #28]
}
 8009672:	bf00      	nop
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009686:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	429a      	cmp	r2, r3
 8009690:	d103      	bne.n	800969a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2201      	movs	r2, #1
 8009696:	771a      	strb	r2, [r3, #28]
 8009698:	e019      	b.n	80096ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d103      	bne.n	80096ac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2202      	movs	r2, #2
 80096a8:	771a      	strb	r2, [r3, #28]
 80096aa:	e010      	b.n	80096ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d103      	bne.n	80096be <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2204      	movs	r2, #4
 80096ba:	771a      	strb	r2, [r3, #28]
 80096bc:	e007      	b.n	80096ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d102      	bne.n	80096ce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2208      	movs	r2, #8
 80096cc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff ff18 	bl	8009504 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	771a      	strb	r2, [r3, #28]
}
 80096da:	bf00      	nop
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
	...

080096e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a40      	ldr	r2, [pc, #256]	; (80097f8 <TIM_Base_SetConfig+0x114>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d013      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009702:	d00f      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a3d      	ldr	r2, [pc, #244]	; (80097fc <TIM_Base_SetConfig+0x118>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00b      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a3c      	ldr	r2, [pc, #240]	; (8009800 <TIM_Base_SetConfig+0x11c>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d007      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a3b      	ldr	r2, [pc, #236]	; (8009804 <TIM_Base_SetConfig+0x120>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d003      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a3a      	ldr	r2, [pc, #232]	; (8009808 <TIM_Base_SetConfig+0x124>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d108      	bne.n	8009736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a2f      	ldr	r2, [pc, #188]	; (80097f8 <TIM_Base_SetConfig+0x114>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d01f      	beq.n	800977e <TIM_Base_SetConfig+0x9a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009744:	d01b      	beq.n	800977e <TIM_Base_SetConfig+0x9a>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a2c      	ldr	r2, [pc, #176]	; (80097fc <TIM_Base_SetConfig+0x118>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d017      	beq.n	800977e <TIM_Base_SetConfig+0x9a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a2b      	ldr	r2, [pc, #172]	; (8009800 <TIM_Base_SetConfig+0x11c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d013      	beq.n	800977e <TIM_Base_SetConfig+0x9a>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a2a      	ldr	r2, [pc, #168]	; (8009804 <TIM_Base_SetConfig+0x120>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d00f      	beq.n	800977e <TIM_Base_SetConfig+0x9a>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a29      	ldr	r2, [pc, #164]	; (8009808 <TIM_Base_SetConfig+0x124>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d00b      	beq.n	800977e <TIM_Base_SetConfig+0x9a>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a28      	ldr	r2, [pc, #160]	; (800980c <TIM_Base_SetConfig+0x128>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d007      	beq.n	800977e <TIM_Base_SetConfig+0x9a>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a27      	ldr	r2, [pc, #156]	; (8009810 <TIM_Base_SetConfig+0x12c>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d003      	beq.n	800977e <TIM_Base_SetConfig+0x9a>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a26      	ldr	r2, [pc, #152]	; (8009814 <TIM_Base_SetConfig+0x130>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d108      	bne.n	8009790 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a10      	ldr	r2, [pc, #64]	; (80097f8 <TIM_Base_SetConfig+0x114>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d00f      	beq.n	80097dc <TIM_Base_SetConfig+0xf8>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a12      	ldr	r2, [pc, #72]	; (8009808 <TIM_Base_SetConfig+0x124>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d00b      	beq.n	80097dc <TIM_Base_SetConfig+0xf8>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a11      	ldr	r2, [pc, #68]	; (800980c <TIM_Base_SetConfig+0x128>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d007      	beq.n	80097dc <TIM_Base_SetConfig+0xf8>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a10      	ldr	r2, [pc, #64]	; (8009810 <TIM_Base_SetConfig+0x12c>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d003      	beq.n	80097dc <TIM_Base_SetConfig+0xf8>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a0f      	ldr	r2, [pc, #60]	; (8009814 <TIM_Base_SetConfig+0x130>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d103      	bne.n	80097e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	691a      	ldr	r2, [r3, #16]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	615a      	str	r2, [r3, #20]
}
 80097ea:	bf00      	nop
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	40012c00 	.word	0x40012c00
 80097fc:	40000400 	.word	0x40000400
 8009800:	40000800 	.word	0x40000800
 8009804:	40000c00 	.word	0x40000c00
 8009808:	40013400 	.word	0x40013400
 800980c:	40014000 	.word	0x40014000
 8009810:	40014400 	.word	0x40014400
 8009814:	40014800 	.word	0x40014800

08009818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009818:	b480      	push	{r7}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	f023 0201 	bic.w	r2, r3, #1
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f023 0303 	bic.w	r3, r3, #3
 8009852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	4313      	orrs	r3, r2
 800985c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f023 0302 	bic.w	r3, r3, #2
 8009864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a2c      	ldr	r2, [pc, #176]	; (8009924 <TIM_OC1_SetConfig+0x10c>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d00f      	beq.n	8009898 <TIM_OC1_SetConfig+0x80>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a2b      	ldr	r2, [pc, #172]	; (8009928 <TIM_OC1_SetConfig+0x110>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d00b      	beq.n	8009898 <TIM_OC1_SetConfig+0x80>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a2a      	ldr	r2, [pc, #168]	; (800992c <TIM_OC1_SetConfig+0x114>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d007      	beq.n	8009898 <TIM_OC1_SetConfig+0x80>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a29      	ldr	r2, [pc, #164]	; (8009930 <TIM_OC1_SetConfig+0x118>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d003      	beq.n	8009898 <TIM_OC1_SetConfig+0x80>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a28      	ldr	r2, [pc, #160]	; (8009934 <TIM_OC1_SetConfig+0x11c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d10c      	bne.n	80098b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f023 0308 	bic.w	r3, r3, #8
 800989e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f023 0304 	bic.w	r3, r3, #4
 80098b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a1b      	ldr	r2, [pc, #108]	; (8009924 <TIM_OC1_SetConfig+0x10c>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00f      	beq.n	80098da <TIM_OC1_SetConfig+0xc2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a1a      	ldr	r2, [pc, #104]	; (8009928 <TIM_OC1_SetConfig+0x110>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00b      	beq.n	80098da <TIM_OC1_SetConfig+0xc2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a19      	ldr	r2, [pc, #100]	; (800992c <TIM_OC1_SetConfig+0x114>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d007      	beq.n	80098da <TIM_OC1_SetConfig+0xc2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a18      	ldr	r2, [pc, #96]	; (8009930 <TIM_OC1_SetConfig+0x118>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d003      	beq.n	80098da <TIM_OC1_SetConfig+0xc2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a17      	ldr	r2, [pc, #92]	; (8009934 <TIM_OC1_SetConfig+0x11c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d111      	bne.n	80098fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	621a      	str	r2, [r3, #32]
}
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	40012c00 	.word	0x40012c00
 8009928:	40013400 	.word	0x40013400
 800992c:	40014000 	.word	0x40014000
 8009930:	40014400 	.word	0x40014400
 8009934:	40014800 	.word	0x40014800

08009938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f023 0210 	bic.w	r2, r3, #16
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800996a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4313      	orrs	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f023 0320 	bic.w	r3, r3, #32
 8009986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	011b      	lsls	r3, r3, #4
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	4313      	orrs	r3, r2
 8009992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a28      	ldr	r2, [pc, #160]	; (8009a38 <TIM_OC2_SetConfig+0x100>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d003      	beq.n	80099a4 <TIM_OC2_SetConfig+0x6c>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a27      	ldr	r2, [pc, #156]	; (8009a3c <TIM_OC2_SetConfig+0x104>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d10d      	bne.n	80099c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	011b      	lsls	r3, r3, #4
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a1d      	ldr	r2, [pc, #116]	; (8009a38 <TIM_OC2_SetConfig+0x100>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00f      	beq.n	80099e8 <TIM_OC2_SetConfig+0xb0>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a1c      	ldr	r2, [pc, #112]	; (8009a3c <TIM_OC2_SetConfig+0x104>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00b      	beq.n	80099e8 <TIM_OC2_SetConfig+0xb0>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a1b      	ldr	r2, [pc, #108]	; (8009a40 <TIM_OC2_SetConfig+0x108>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d007      	beq.n	80099e8 <TIM_OC2_SetConfig+0xb0>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a1a      	ldr	r2, [pc, #104]	; (8009a44 <TIM_OC2_SetConfig+0x10c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d003      	beq.n	80099e8 <TIM_OC2_SetConfig+0xb0>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a19      	ldr	r2, [pc, #100]	; (8009a48 <TIM_OC2_SetConfig+0x110>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d113      	bne.n	8009a10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	621a      	str	r2, [r3, #32]
}
 8009a2a:	bf00      	nop
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	40012c00 	.word	0x40012c00
 8009a3c:	40013400 	.word	0x40013400
 8009a40:	40014000 	.word	0x40014000
 8009a44:	40014400 	.word	0x40014400
 8009a48:	40014800 	.word	0x40014800

08009a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b087      	sub	sp, #28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4a27      	ldr	r2, [pc, #156]	; (8009b48 <TIM_OC3_SetConfig+0xfc>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d003      	beq.n	8009ab6 <TIM_OC3_SetConfig+0x6a>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a26      	ldr	r2, [pc, #152]	; (8009b4c <TIM_OC3_SetConfig+0x100>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d10d      	bne.n	8009ad2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	021b      	lsls	r3, r3, #8
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a1c      	ldr	r2, [pc, #112]	; (8009b48 <TIM_OC3_SetConfig+0xfc>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d00f      	beq.n	8009afa <TIM_OC3_SetConfig+0xae>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a1b      	ldr	r2, [pc, #108]	; (8009b4c <TIM_OC3_SetConfig+0x100>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00b      	beq.n	8009afa <TIM_OC3_SetConfig+0xae>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a1a      	ldr	r2, [pc, #104]	; (8009b50 <TIM_OC3_SetConfig+0x104>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d007      	beq.n	8009afa <TIM_OC3_SetConfig+0xae>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a19      	ldr	r2, [pc, #100]	; (8009b54 <TIM_OC3_SetConfig+0x108>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d003      	beq.n	8009afa <TIM_OC3_SetConfig+0xae>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a18      	ldr	r2, [pc, #96]	; (8009b58 <TIM_OC3_SetConfig+0x10c>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d113      	bne.n	8009b22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	621a      	str	r2, [r3, #32]
}
 8009b3c:	bf00      	nop
 8009b3e:	371c      	adds	r7, #28
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	40012c00 	.word	0x40012c00
 8009b4c:	40013400 	.word	0x40013400
 8009b50:	40014000 	.word	0x40014000
 8009b54:	40014400 	.word	0x40014400
 8009b58:	40014800 	.word	0x40014800

08009b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	021b      	lsls	r3, r3, #8
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	031b      	lsls	r3, r3, #12
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a18      	ldr	r2, [pc, #96]	; (8009c1c <TIM_OC4_SetConfig+0xc0>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d00f      	beq.n	8009be0 <TIM_OC4_SetConfig+0x84>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a17      	ldr	r2, [pc, #92]	; (8009c20 <TIM_OC4_SetConfig+0xc4>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d00b      	beq.n	8009be0 <TIM_OC4_SetConfig+0x84>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a16      	ldr	r2, [pc, #88]	; (8009c24 <TIM_OC4_SetConfig+0xc8>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d007      	beq.n	8009be0 <TIM_OC4_SetConfig+0x84>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <TIM_OC4_SetConfig+0xcc>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d003      	beq.n	8009be0 <TIM_OC4_SetConfig+0x84>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a14      	ldr	r2, [pc, #80]	; (8009c2c <TIM_OC4_SetConfig+0xd0>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d109      	bne.n	8009bf4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	019b      	lsls	r3, r3, #6
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	621a      	str	r2, [r3, #32]
}
 8009c0e:	bf00      	nop
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	40012c00 	.word	0x40012c00
 8009c20:	40013400 	.word	0x40013400
 8009c24:	40014000 	.word	0x40014000
 8009c28:	40014400 	.word	0x40014400
 8009c2c:	40014800 	.word	0x40014800

08009c30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009c74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a17      	ldr	r2, [pc, #92]	; (8009ce4 <TIM_OC5_SetConfig+0xb4>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d00f      	beq.n	8009caa <TIM_OC5_SetConfig+0x7a>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a16      	ldr	r2, [pc, #88]	; (8009ce8 <TIM_OC5_SetConfig+0xb8>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d00b      	beq.n	8009caa <TIM_OC5_SetConfig+0x7a>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a15      	ldr	r2, [pc, #84]	; (8009cec <TIM_OC5_SetConfig+0xbc>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d007      	beq.n	8009caa <TIM_OC5_SetConfig+0x7a>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a14      	ldr	r2, [pc, #80]	; (8009cf0 <TIM_OC5_SetConfig+0xc0>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d003      	beq.n	8009caa <TIM_OC5_SetConfig+0x7a>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a13      	ldr	r2, [pc, #76]	; (8009cf4 <TIM_OC5_SetConfig+0xc4>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d109      	bne.n	8009cbe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	621a      	str	r2, [r3, #32]
}
 8009cd8:	bf00      	nop
 8009cda:	371c      	adds	r7, #28
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	40012c00 	.word	0x40012c00
 8009ce8:	40013400 	.word	0x40013400
 8009cec:	40014000 	.word	0x40014000
 8009cf0:	40014400 	.word	0x40014400
 8009cf4:	40014800 	.word	0x40014800

08009cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	021b      	lsls	r3, r3, #8
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	051b      	lsls	r3, r3, #20
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a18      	ldr	r2, [pc, #96]	; (8009db0 <TIM_OC6_SetConfig+0xb8>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d00f      	beq.n	8009d74 <TIM_OC6_SetConfig+0x7c>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a17      	ldr	r2, [pc, #92]	; (8009db4 <TIM_OC6_SetConfig+0xbc>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d00b      	beq.n	8009d74 <TIM_OC6_SetConfig+0x7c>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a16      	ldr	r2, [pc, #88]	; (8009db8 <TIM_OC6_SetConfig+0xc0>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d007      	beq.n	8009d74 <TIM_OC6_SetConfig+0x7c>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a15      	ldr	r2, [pc, #84]	; (8009dbc <TIM_OC6_SetConfig+0xc4>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d003      	beq.n	8009d74 <TIM_OC6_SetConfig+0x7c>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a14      	ldr	r2, [pc, #80]	; (8009dc0 <TIM_OC6_SetConfig+0xc8>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d109      	bne.n	8009d88 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	695b      	ldr	r3, [r3, #20]
 8009d80:	029b      	lsls	r3, r3, #10
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	621a      	str	r2, [r3, #32]
}
 8009da2:	bf00      	nop
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	40012c00 	.word	0x40012c00
 8009db4:	40013400 	.word	0x40013400
 8009db8:	40014000 	.word	0x40014000
 8009dbc:	40014400 	.word	0x40014400
 8009dc0:	40014800 	.word	0x40014800

08009dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a1a      	ldr	r2, [r3, #32]
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	43db      	mvns	r3, r3
 8009de6:	401a      	ands	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1a      	ldr	r2, [r3, #32]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f003 031f 	and.w	r3, r3, #31
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	621a      	str	r2, [r3, #32]
}
 8009e02:	bf00      	nop
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
	...

08009e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d101      	bne.n	8009e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e068      	b.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a2e      	ldr	r2, [pc, #184]	; (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d004      	beq.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a2d      	ldr	r2, [pc, #180]	; (8009f0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d108      	bne.n	8009e6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a1e      	ldr	r2, [pc, #120]	; (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d01d      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e9a:	d018      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1b      	ldr	r2, [pc, #108]	; (8009f10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d013      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a1a      	ldr	r2, [pc, #104]	; (8009f14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d00e      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a18      	ldr	r2, [pc, #96]	; (8009f18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d009      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a13      	ldr	r2, [pc, #76]	; (8009f0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d004      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a14      	ldr	r2, [pc, #80]	; (8009f1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d10c      	bne.n	8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	40012c00 	.word	0x40012c00
 8009f0c:	40013400 	.word	0x40013400
 8009f10:	40000400 	.word	0x40000400
 8009f14:	40000800 	.word	0x40000800
 8009f18:	40000c00 	.word	0x40000c00
 8009f1c:	40014000 	.word	0x40014000

08009f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d101      	bne.n	8009f3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f38:	2302      	movs	r3, #2
 8009f3a:	e065      	b.n	800a008 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	041b      	lsls	r3, r3, #16
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a16      	ldr	r2, [pc, #88]	; (800a014 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d004      	beq.n	8009fca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a14      	ldr	r2, [pc, #80]	; (800a018 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d115      	bne.n	8009ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	051b      	lsls	r3, r3, #20
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	40012c00 	.word	0x40012c00
 800a018:	40013400 	.word	0x40013400

0800a01c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e040      	b.n	800a0ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d106      	bne.n	800a080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7f9 fe30 	bl	8003ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2224      	movs	r2, #36	; 0x24
 800a084:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f022 0201 	bic.w	r2, r2, #1
 800a094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f8c0 	bl	800a21c <UART_SetConfig>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d101      	bne.n	800a0a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e022      	b.n	800a0ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fb3e 	bl	800a730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689a      	ldr	r2, [r3, #8]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 0201 	orr.w	r2, r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fbc5 	bl	800a874 <UART_CheckIdleState>
 800a0ea:	4603      	mov	r3, r0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b08a      	sub	sp, #40	; 0x28
 800a0f8:	af02      	add	r7, sp, #8
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	4613      	mov	r3, r2
 800a102:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a108:	2b20      	cmp	r3, #32
 800a10a:	f040 8082 	bne.w	800a212 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <HAL_UART_Transmit+0x26>
 800a114:	88fb      	ldrh	r3, [r7, #6]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e07a      	b.n	800a214 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a124:	2b01      	cmp	r3, #1
 800a126:	d101      	bne.n	800a12c <HAL_UART_Transmit+0x38>
 800a128:	2302      	movs	r3, #2
 800a12a:	e073      	b.n	800a214 <HAL_UART_Transmit+0x120>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2221      	movs	r2, #33	; 0x21
 800a140:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a142:	f7fa f803 	bl	800414c <HAL_GetTick>
 800a146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	88fa      	ldrh	r2, [r7, #6]
 800a14c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	88fa      	ldrh	r2, [r7, #6]
 800a154:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a160:	d108      	bne.n	800a174 <HAL_UART_Transmit+0x80>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d104      	bne.n	800a174 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	61bb      	str	r3, [r7, #24]
 800a172:	e003      	b.n	800a17c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a178:	2300      	movs	r3, #0
 800a17a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a184:	e02d      	b.n	800a1e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2200      	movs	r2, #0
 800a18e:	2180      	movs	r1, #128	; 0x80
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 fbb8 	bl	800a906 <UART_WaitOnFlagUntilTimeout>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e039      	b.n	800a214 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10b      	bne.n	800a1be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	881a      	ldrh	r2, [r3, #0]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1b2:	b292      	uxth	r2, r2
 800a1b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	3302      	adds	r3, #2
 800a1ba:	61bb      	str	r3, [r7, #24]
 800a1bc:	e008      	b.n	800a1d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	781a      	ldrb	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	b292      	uxth	r2, r2
 800a1c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1cb      	bne.n	800a186 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2140      	movs	r1, #64	; 0x40
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fb84 	bl	800a906 <UART_WaitOnFlagUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e005      	b.n	800a214 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2220      	movs	r2, #32
 800a20c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	e000      	b.n	800a214 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a212:	2302      	movs	r3, #2
  }
}
 800a214:	4618      	mov	r0, r3
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a21c:	b5b0      	push	{r4, r5, r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	431a      	orrs	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	4bad      	ldr	r3, [pc, #692]	; (800a4fc <UART_SetConfig+0x2e0>)
 800a248:	4013      	ands	r3, r2
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	6812      	ldr	r2, [r2, #0]
 800a24e:	69f9      	ldr	r1, [r7, #28]
 800a250:	430b      	orrs	r3, r1
 800a252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4aa2      	ldr	r2, [pc, #648]	; (800a500 <UART_SetConfig+0x2e4>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d004      	beq.n	800a284 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	4313      	orrs	r3, r2
 800a282:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	69fa      	ldr	r2, [r7, #28]
 800a294:	430a      	orrs	r2, r1
 800a296:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a99      	ldr	r2, [pc, #612]	; (800a504 <UART_SetConfig+0x2e8>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d121      	bne.n	800a2e6 <UART_SetConfig+0xca>
 800a2a2:	4b99      	ldr	r3, [pc, #612]	; (800a508 <UART_SetConfig+0x2ec>)
 800a2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a8:	f003 0303 	and.w	r3, r3, #3
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d817      	bhi.n	800a2e0 <UART_SetConfig+0xc4>
 800a2b0:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <UART_SetConfig+0x9c>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a2c9 	.word	0x0800a2c9
 800a2bc:	0800a2d5 	.word	0x0800a2d5
 800a2c0:	0800a2cf 	.word	0x0800a2cf
 800a2c4:	0800a2db 	.word	0x0800a2db
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	76fb      	strb	r3, [r7, #27]
 800a2cc:	e0e7      	b.n	800a49e <UART_SetConfig+0x282>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	76fb      	strb	r3, [r7, #27]
 800a2d2:	e0e4      	b.n	800a49e <UART_SetConfig+0x282>
 800a2d4:	2304      	movs	r3, #4
 800a2d6:	76fb      	strb	r3, [r7, #27]
 800a2d8:	e0e1      	b.n	800a49e <UART_SetConfig+0x282>
 800a2da:	2308      	movs	r3, #8
 800a2dc:	76fb      	strb	r3, [r7, #27]
 800a2de:	e0de      	b.n	800a49e <UART_SetConfig+0x282>
 800a2e0:	2310      	movs	r3, #16
 800a2e2:	76fb      	strb	r3, [r7, #27]
 800a2e4:	e0db      	b.n	800a49e <UART_SetConfig+0x282>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a88      	ldr	r2, [pc, #544]	; (800a50c <UART_SetConfig+0x2f0>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d132      	bne.n	800a356 <UART_SetConfig+0x13a>
 800a2f0:	4b85      	ldr	r3, [pc, #532]	; (800a508 <UART_SetConfig+0x2ec>)
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f6:	f003 030c 	and.w	r3, r3, #12
 800a2fa:	2b0c      	cmp	r3, #12
 800a2fc:	d828      	bhi.n	800a350 <UART_SetConfig+0x134>
 800a2fe:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <UART_SetConfig+0xe8>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a339 	.word	0x0800a339
 800a308:	0800a351 	.word	0x0800a351
 800a30c:	0800a351 	.word	0x0800a351
 800a310:	0800a351 	.word	0x0800a351
 800a314:	0800a345 	.word	0x0800a345
 800a318:	0800a351 	.word	0x0800a351
 800a31c:	0800a351 	.word	0x0800a351
 800a320:	0800a351 	.word	0x0800a351
 800a324:	0800a33f 	.word	0x0800a33f
 800a328:	0800a351 	.word	0x0800a351
 800a32c:	0800a351 	.word	0x0800a351
 800a330:	0800a351 	.word	0x0800a351
 800a334:	0800a34b 	.word	0x0800a34b
 800a338:	2300      	movs	r3, #0
 800a33a:	76fb      	strb	r3, [r7, #27]
 800a33c:	e0af      	b.n	800a49e <UART_SetConfig+0x282>
 800a33e:	2302      	movs	r3, #2
 800a340:	76fb      	strb	r3, [r7, #27]
 800a342:	e0ac      	b.n	800a49e <UART_SetConfig+0x282>
 800a344:	2304      	movs	r3, #4
 800a346:	76fb      	strb	r3, [r7, #27]
 800a348:	e0a9      	b.n	800a49e <UART_SetConfig+0x282>
 800a34a:	2308      	movs	r3, #8
 800a34c:	76fb      	strb	r3, [r7, #27]
 800a34e:	e0a6      	b.n	800a49e <UART_SetConfig+0x282>
 800a350:	2310      	movs	r3, #16
 800a352:	76fb      	strb	r3, [r7, #27]
 800a354:	e0a3      	b.n	800a49e <UART_SetConfig+0x282>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a6d      	ldr	r2, [pc, #436]	; (800a510 <UART_SetConfig+0x2f4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d120      	bne.n	800a3a2 <UART_SetConfig+0x186>
 800a360:	4b69      	ldr	r3, [pc, #420]	; (800a508 <UART_SetConfig+0x2ec>)
 800a362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a366:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a36a:	2b30      	cmp	r3, #48	; 0x30
 800a36c:	d013      	beq.n	800a396 <UART_SetConfig+0x17a>
 800a36e:	2b30      	cmp	r3, #48	; 0x30
 800a370:	d814      	bhi.n	800a39c <UART_SetConfig+0x180>
 800a372:	2b20      	cmp	r3, #32
 800a374:	d009      	beq.n	800a38a <UART_SetConfig+0x16e>
 800a376:	2b20      	cmp	r3, #32
 800a378:	d810      	bhi.n	800a39c <UART_SetConfig+0x180>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d002      	beq.n	800a384 <UART_SetConfig+0x168>
 800a37e:	2b10      	cmp	r3, #16
 800a380:	d006      	beq.n	800a390 <UART_SetConfig+0x174>
 800a382:	e00b      	b.n	800a39c <UART_SetConfig+0x180>
 800a384:	2300      	movs	r3, #0
 800a386:	76fb      	strb	r3, [r7, #27]
 800a388:	e089      	b.n	800a49e <UART_SetConfig+0x282>
 800a38a:	2302      	movs	r3, #2
 800a38c:	76fb      	strb	r3, [r7, #27]
 800a38e:	e086      	b.n	800a49e <UART_SetConfig+0x282>
 800a390:	2304      	movs	r3, #4
 800a392:	76fb      	strb	r3, [r7, #27]
 800a394:	e083      	b.n	800a49e <UART_SetConfig+0x282>
 800a396:	2308      	movs	r3, #8
 800a398:	76fb      	strb	r3, [r7, #27]
 800a39a:	e080      	b.n	800a49e <UART_SetConfig+0x282>
 800a39c:	2310      	movs	r3, #16
 800a39e:	76fb      	strb	r3, [r7, #27]
 800a3a0:	e07d      	b.n	800a49e <UART_SetConfig+0x282>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a5b      	ldr	r2, [pc, #364]	; (800a514 <UART_SetConfig+0x2f8>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d120      	bne.n	800a3ee <UART_SetConfig+0x1d2>
 800a3ac:	4b56      	ldr	r3, [pc, #344]	; (800a508 <UART_SetConfig+0x2ec>)
 800a3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a3b8:	d013      	beq.n	800a3e2 <UART_SetConfig+0x1c6>
 800a3ba:	2bc0      	cmp	r3, #192	; 0xc0
 800a3bc:	d814      	bhi.n	800a3e8 <UART_SetConfig+0x1cc>
 800a3be:	2b80      	cmp	r3, #128	; 0x80
 800a3c0:	d009      	beq.n	800a3d6 <UART_SetConfig+0x1ba>
 800a3c2:	2b80      	cmp	r3, #128	; 0x80
 800a3c4:	d810      	bhi.n	800a3e8 <UART_SetConfig+0x1cc>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <UART_SetConfig+0x1b4>
 800a3ca:	2b40      	cmp	r3, #64	; 0x40
 800a3cc:	d006      	beq.n	800a3dc <UART_SetConfig+0x1c0>
 800a3ce:	e00b      	b.n	800a3e8 <UART_SetConfig+0x1cc>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	76fb      	strb	r3, [r7, #27]
 800a3d4:	e063      	b.n	800a49e <UART_SetConfig+0x282>
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	76fb      	strb	r3, [r7, #27]
 800a3da:	e060      	b.n	800a49e <UART_SetConfig+0x282>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	76fb      	strb	r3, [r7, #27]
 800a3e0:	e05d      	b.n	800a49e <UART_SetConfig+0x282>
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	76fb      	strb	r3, [r7, #27]
 800a3e6:	e05a      	b.n	800a49e <UART_SetConfig+0x282>
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	76fb      	strb	r3, [r7, #27]
 800a3ec:	e057      	b.n	800a49e <UART_SetConfig+0x282>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a49      	ldr	r2, [pc, #292]	; (800a518 <UART_SetConfig+0x2fc>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d125      	bne.n	800a444 <UART_SetConfig+0x228>
 800a3f8:	4b43      	ldr	r3, [pc, #268]	; (800a508 <UART_SetConfig+0x2ec>)
 800a3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a406:	d017      	beq.n	800a438 <UART_SetConfig+0x21c>
 800a408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a40c:	d817      	bhi.n	800a43e <UART_SetConfig+0x222>
 800a40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a412:	d00b      	beq.n	800a42c <UART_SetConfig+0x210>
 800a414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a418:	d811      	bhi.n	800a43e <UART_SetConfig+0x222>
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <UART_SetConfig+0x20a>
 800a41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a422:	d006      	beq.n	800a432 <UART_SetConfig+0x216>
 800a424:	e00b      	b.n	800a43e <UART_SetConfig+0x222>
 800a426:	2300      	movs	r3, #0
 800a428:	76fb      	strb	r3, [r7, #27]
 800a42a:	e038      	b.n	800a49e <UART_SetConfig+0x282>
 800a42c:	2302      	movs	r3, #2
 800a42e:	76fb      	strb	r3, [r7, #27]
 800a430:	e035      	b.n	800a49e <UART_SetConfig+0x282>
 800a432:	2304      	movs	r3, #4
 800a434:	76fb      	strb	r3, [r7, #27]
 800a436:	e032      	b.n	800a49e <UART_SetConfig+0x282>
 800a438:	2308      	movs	r3, #8
 800a43a:	76fb      	strb	r3, [r7, #27]
 800a43c:	e02f      	b.n	800a49e <UART_SetConfig+0x282>
 800a43e:	2310      	movs	r3, #16
 800a440:	76fb      	strb	r3, [r7, #27]
 800a442:	e02c      	b.n	800a49e <UART_SetConfig+0x282>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a2d      	ldr	r2, [pc, #180]	; (800a500 <UART_SetConfig+0x2e4>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d125      	bne.n	800a49a <UART_SetConfig+0x27e>
 800a44e:	4b2e      	ldr	r3, [pc, #184]	; (800a508 <UART_SetConfig+0x2ec>)
 800a450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a45c:	d017      	beq.n	800a48e <UART_SetConfig+0x272>
 800a45e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a462:	d817      	bhi.n	800a494 <UART_SetConfig+0x278>
 800a464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a468:	d00b      	beq.n	800a482 <UART_SetConfig+0x266>
 800a46a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a46e:	d811      	bhi.n	800a494 <UART_SetConfig+0x278>
 800a470:	2b00      	cmp	r3, #0
 800a472:	d003      	beq.n	800a47c <UART_SetConfig+0x260>
 800a474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a478:	d006      	beq.n	800a488 <UART_SetConfig+0x26c>
 800a47a:	e00b      	b.n	800a494 <UART_SetConfig+0x278>
 800a47c:	2300      	movs	r3, #0
 800a47e:	76fb      	strb	r3, [r7, #27]
 800a480:	e00d      	b.n	800a49e <UART_SetConfig+0x282>
 800a482:	2302      	movs	r3, #2
 800a484:	76fb      	strb	r3, [r7, #27]
 800a486:	e00a      	b.n	800a49e <UART_SetConfig+0x282>
 800a488:	2304      	movs	r3, #4
 800a48a:	76fb      	strb	r3, [r7, #27]
 800a48c:	e007      	b.n	800a49e <UART_SetConfig+0x282>
 800a48e:	2308      	movs	r3, #8
 800a490:	76fb      	strb	r3, [r7, #27]
 800a492:	e004      	b.n	800a49e <UART_SetConfig+0x282>
 800a494:	2310      	movs	r3, #16
 800a496:	76fb      	strb	r3, [r7, #27]
 800a498:	e001      	b.n	800a49e <UART_SetConfig+0x282>
 800a49a:	2310      	movs	r3, #16
 800a49c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a17      	ldr	r2, [pc, #92]	; (800a500 <UART_SetConfig+0x2e4>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	f040 8087 	bne.w	800a5b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4aa:	7efb      	ldrb	r3, [r7, #27]
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d837      	bhi.n	800a520 <UART_SetConfig+0x304>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <UART_SetConfig+0x29c>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4dd 	.word	0x0800a4dd
 800a4bc:	0800a521 	.word	0x0800a521
 800a4c0:	0800a4e5 	.word	0x0800a4e5
 800a4c4:	0800a521 	.word	0x0800a521
 800a4c8:	0800a4eb 	.word	0x0800a4eb
 800a4cc:	0800a521 	.word	0x0800a521
 800a4d0:	0800a521 	.word	0x0800a521
 800a4d4:	0800a521 	.word	0x0800a521
 800a4d8:	0800a4f3 	.word	0x0800a4f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4dc:	f7fc fc80 	bl	8006de0 <HAL_RCC_GetPCLK1Freq>
 800a4e0:	6178      	str	r0, [r7, #20]
        break;
 800a4e2:	e022      	b.n	800a52a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4e4:	4b0d      	ldr	r3, [pc, #52]	; (800a51c <UART_SetConfig+0x300>)
 800a4e6:	617b      	str	r3, [r7, #20]
        break;
 800a4e8:	e01f      	b.n	800a52a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4ea:	f7fc fbe1 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 800a4ee:	6178      	str	r0, [r7, #20]
        break;
 800a4f0:	e01b      	b.n	800a52a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4f6:	617b      	str	r3, [r7, #20]
        break;
 800a4f8:	e017      	b.n	800a52a <UART_SetConfig+0x30e>
 800a4fa:	bf00      	nop
 800a4fc:	efff69f3 	.word	0xefff69f3
 800a500:	40008000 	.word	0x40008000
 800a504:	40013800 	.word	0x40013800
 800a508:	40021000 	.word	0x40021000
 800a50c:	40004400 	.word	0x40004400
 800a510:	40004800 	.word	0x40004800
 800a514:	40004c00 	.word	0x40004c00
 800a518:	40005000 	.word	0x40005000
 800a51c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	76bb      	strb	r3, [r7, #26]
        break;
 800a528:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 80f1 	beq.w	800a714 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	4613      	mov	r3, r2
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	4413      	add	r3, r2
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d305      	bcc.n	800a54e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d902      	bls.n	800a554 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	76bb      	strb	r3, [r7, #26]
 800a552:	e0df      	b.n	800a714 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	4618      	mov	r0, r3
 800a558:	f04f 0100 	mov.w	r1, #0
 800a55c:	f04f 0200 	mov.w	r2, #0
 800a560:	f04f 0300 	mov.w	r3, #0
 800a564:	020b      	lsls	r3, r1, #8
 800a566:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a56a:	0202      	lsls	r2, r0, #8
 800a56c:	6879      	ldr	r1, [r7, #4]
 800a56e:	6849      	ldr	r1, [r1, #4]
 800a570:	0849      	lsrs	r1, r1, #1
 800a572:	4608      	mov	r0, r1
 800a574:	f04f 0100 	mov.w	r1, #0
 800a578:	1814      	adds	r4, r2, r0
 800a57a:	eb43 0501 	adc.w	r5, r3, r1
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	461a      	mov	r2, r3
 800a584:	f04f 0300 	mov.w	r3, #0
 800a588:	4620      	mov	r0, r4
 800a58a:	4629      	mov	r1, r5
 800a58c:	f7f6 fb5e 	bl	8000c4c <__aeabi_uldivmod>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4613      	mov	r3, r2
 800a596:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a59e:	d308      	bcc.n	800a5b2 <UART_SetConfig+0x396>
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5a6:	d204      	bcs.n	800a5b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	60da      	str	r2, [r3, #12]
 800a5b0:	e0b0      	b.n	800a714 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	76bb      	strb	r3, [r7, #26]
 800a5b6:	e0ad      	b.n	800a714 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5c0:	d15c      	bne.n	800a67c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a5c2:	7efb      	ldrb	r3, [r7, #27]
 800a5c4:	2b08      	cmp	r3, #8
 800a5c6:	d828      	bhi.n	800a61a <UART_SetConfig+0x3fe>
 800a5c8:	a201      	add	r2, pc, #4	; (adr r2, 800a5d0 <UART_SetConfig+0x3b4>)
 800a5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ce:	bf00      	nop
 800a5d0:	0800a5f5 	.word	0x0800a5f5
 800a5d4:	0800a5fd 	.word	0x0800a5fd
 800a5d8:	0800a605 	.word	0x0800a605
 800a5dc:	0800a61b 	.word	0x0800a61b
 800a5e0:	0800a60b 	.word	0x0800a60b
 800a5e4:	0800a61b 	.word	0x0800a61b
 800a5e8:	0800a61b 	.word	0x0800a61b
 800a5ec:	0800a61b 	.word	0x0800a61b
 800a5f0:	0800a613 	.word	0x0800a613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5f4:	f7fc fbf4 	bl	8006de0 <HAL_RCC_GetPCLK1Freq>
 800a5f8:	6178      	str	r0, [r7, #20]
        break;
 800a5fa:	e013      	b.n	800a624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5fc:	f7fc fc06 	bl	8006e0c <HAL_RCC_GetPCLK2Freq>
 800a600:	6178      	str	r0, [r7, #20]
        break;
 800a602:	e00f      	b.n	800a624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a604:	4b49      	ldr	r3, [pc, #292]	; (800a72c <UART_SetConfig+0x510>)
 800a606:	617b      	str	r3, [r7, #20]
        break;
 800a608:	e00c      	b.n	800a624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a60a:	f7fc fb51 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 800a60e:	6178      	str	r0, [r7, #20]
        break;
 800a610:	e008      	b.n	800a624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a616:	617b      	str	r3, [r7, #20]
        break;
 800a618:	e004      	b.n	800a624 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	76bb      	strb	r3, [r7, #26]
        break;
 800a622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d074      	beq.n	800a714 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	005a      	lsls	r2, r3, #1
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	085b      	lsrs	r3, r3, #1
 800a634:	441a      	add	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63e:	b29b      	uxth	r3, r3
 800a640:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	2b0f      	cmp	r3, #15
 800a646:	d916      	bls.n	800a676 <UART_SetConfig+0x45a>
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a64e:	d212      	bcs.n	800a676 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	b29b      	uxth	r3, r3
 800a654:	f023 030f 	bic.w	r3, r3, #15
 800a658:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	085b      	lsrs	r3, r3, #1
 800a65e:	b29b      	uxth	r3, r3
 800a660:	f003 0307 	and.w	r3, r3, #7
 800a664:	b29a      	uxth	r2, r3
 800a666:	89fb      	ldrh	r3, [r7, #14]
 800a668:	4313      	orrs	r3, r2
 800a66a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	89fa      	ldrh	r2, [r7, #14]
 800a672:	60da      	str	r2, [r3, #12]
 800a674:	e04e      	b.n	800a714 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	76bb      	strb	r3, [r7, #26]
 800a67a:	e04b      	b.n	800a714 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a67c:	7efb      	ldrb	r3, [r7, #27]
 800a67e:	2b08      	cmp	r3, #8
 800a680:	d827      	bhi.n	800a6d2 <UART_SetConfig+0x4b6>
 800a682:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <UART_SetConfig+0x46c>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a6ad 	.word	0x0800a6ad
 800a68c:	0800a6b5 	.word	0x0800a6b5
 800a690:	0800a6bd 	.word	0x0800a6bd
 800a694:	0800a6d3 	.word	0x0800a6d3
 800a698:	0800a6c3 	.word	0x0800a6c3
 800a69c:	0800a6d3 	.word	0x0800a6d3
 800a6a0:	0800a6d3 	.word	0x0800a6d3
 800a6a4:	0800a6d3 	.word	0x0800a6d3
 800a6a8:	0800a6cb 	.word	0x0800a6cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6ac:	f7fc fb98 	bl	8006de0 <HAL_RCC_GetPCLK1Freq>
 800a6b0:	6178      	str	r0, [r7, #20]
        break;
 800a6b2:	e013      	b.n	800a6dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6b4:	f7fc fbaa 	bl	8006e0c <HAL_RCC_GetPCLK2Freq>
 800a6b8:	6178      	str	r0, [r7, #20]
        break;
 800a6ba:	e00f      	b.n	800a6dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6bc:	4b1b      	ldr	r3, [pc, #108]	; (800a72c <UART_SetConfig+0x510>)
 800a6be:	617b      	str	r3, [r7, #20]
        break;
 800a6c0:	e00c      	b.n	800a6dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6c2:	f7fc faf5 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 800a6c6:	6178      	str	r0, [r7, #20]
        break;
 800a6c8:	e008      	b.n	800a6dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ce:	617b      	str	r3, [r7, #20]
        break;
 800a6d0:	e004      	b.n	800a6dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	76bb      	strb	r3, [r7, #26]
        break;
 800a6da:	bf00      	nop
    }

    if (pclk != 0U)
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d018      	beq.n	800a714 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	085a      	lsrs	r2, r3, #1
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	441a      	add	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	2b0f      	cmp	r3, #15
 800a6fc:	d908      	bls.n	800a710 <UART_SetConfig+0x4f4>
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a704:	d204      	bcs.n	800a710 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	60da      	str	r2, [r3, #12]
 800a70e:	e001      	b.n	800a714 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a720:	7ebb      	ldrb	r3, [r7, #26]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3720      	adds	r7, #32
 800a726:	46bd      	mov	sp, r7
 800a728:	bdb0      	pop	{r4, r5, r7, pc}
 800a72a:	bf00      	nop
 800a72c:	00f42400 	.word	0x00f42400

0800a730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00a      	beq.n	800a75a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	f003 0302 	and.w	r3, r3, #2
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00a      	beq.n	800a79e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a2:	f003 0308 	and.w	r3, r3, #8
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00a      	beq.n	800a7c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	430a      	orrs	r2, r1
 800a7be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	f003 0310 	and.w	r3, r3, #16
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00a      	beq.n	800a7e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e6:	f003 0320 	and.w	r3, r3, #32
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00a      	beq.n	800a804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	430a      	orrs	r2, r1
 800a802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d01a      	beq.n	800a846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a82e:	d10a      	bne.n	800a846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	430a      	orrs	r2, r1
 800a844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00a      	beq.n	800a868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	605a      	str	r2, [r3, #4]
  }
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af02      	add	r7, sp, #8
 800a87a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a884:	f7f9 fc62 	bl	800414c <HAL_GetTick>
 800a888:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0308 	and.w	r3, r3, #8
 800a894:	2b08      	cmp	r3, #8
 800a896:	d10e      	bne.n	800a8b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f82d 	bl	800a906 <UART_WaitOnFlagUntilTimeout>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e023      	b.n	800a8fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b04      	cmp	r3, #4
 800a8c2:	d10e      	bne.n	800a8e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f817 	bl	800a906 <UART_WaitOnFlagUntilTimeout>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e00d      	b.n	800a8fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2220      	movs	r2, #32
 800a8e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	603b      	str	r3, [r7, #0]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a916:	e05e      	b.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a91e:	d05a      	beq.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a920:	f7f9 fc14 	bl	800414c <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d302      	bcc.n	800a936 <UART_WaitOnFlagUntilTimeout+0x30>
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d11b      	bne.n	800a96e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a944:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689a      	ldr	r2, [r3, #8]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f022 0201 	bic.w	r2, r2, #1
 800a954:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2220      	movs	r2, #32
 800a95a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2220      	movs	r2, #32
 800a960:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a96a:	2303      	movs	r3, #3
 800a96c:	e043      	b.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0304 	and.w	r3, r3, #4
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d02c      	beq.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a98a:	d124      	bne.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a994:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689a      	ldr	r2, [r3, #8]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f022 0201 	bic.w	r2, r2, #1
 800a9b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2220      	movs	r2, #32
 800a9c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2220      	movs	r2, #32
 800a9c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e00f      	b.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	69da      	ldr	r2, [r3, #28]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	bf0c      	ite	eq
 800a9e6:	2301      	moveq	r3, #1
 800a9e8:	2300      	movne	r3, #0
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d091      	beq.n	800a918 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
	...

0800aa00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa04:	4904      	ldr	r1, [pc, #16]	; (800aa18 <MX_FATFS_Init+0x18>)
 800aa06:	4805      	ldr	r0, [pc, #20]	; (800aa1c <MX_FATFS_Init+0x1c>)
 800aa08:	f000 f8ae 	bl	800ab68 <FATFS_LinkDriver>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	461a      	mov	r2, r3
 800aa10:	4b03      	ldr	r3, [pc, #12]	; (800aa20 <MX_FATFS_Init+0x20>)
 800aa12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa14:	bf00      	nop
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	2000e364 	.word	0x2000e364
 800aa1c:	200000a0 	.word	0x200000a0
 800aa20:	2000e368 	.word	0x2000e368

0800aa24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 800aa2e:	79fb      	ldrb	r3, [r7, #7]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7f6 fc3b 	bl	80012ac <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800aa36:	bf00      	nop
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4603      	mov	r3, r0
 800aa48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7f6 fd13 	bl	8001478 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800aa52:	bf00      	nop
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	603b      	str	r3, [r7, #0]
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 800aa6c:	7bf8      	ldrb	r0, [r7, #15]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	f7f6 fd16 	bl	80014a4 <SD_disk_read>
  /* USER CODE END READ */
}
 800aa78:	bf00      	nop
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b084      	sub	sp, #16
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
 800aa8e:	4603      	mov	r3, r0
 800aa90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 800aa92:	7bf8      	ldrb	r0, [r7, #15]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	68b9      	ldr	r1, [r7, #8]
 800aa9a:	f7f6 fd6d 	bl	8001578 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800aa9e:	bf00      	nop
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	603a      	str	r2, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
 800aab4:	460b      	mov	r3, r1
 800aab6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 800aab8:	79fb      	ldrb	r3, [r7, #7]
 800aaba:	79b9      	ldrb	r1, [r7, #6]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7f6 fdde 	bl	8001680 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800aac4:	bf00      	nop
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	4613      	mov	r3, r2
 800aadc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aade:	2301      	movs	r3, #1
 800aae0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aae6:	4b1f      	ldr	r3, [pc, #124]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800aae8:	7a5b      	ldrb	r3, [r3, #9]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d131      	bne.n	800ab54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aaf0:	4b1c      	ldr	r3, [pc, #112]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800aaf2:	7a5b      	ldrb	r3, [r3, #9]
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	4b1a      	ldr	r3, [pc, #104]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800aafa:	2100      	movs	r1, #0
 800aafc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aafe:	4b19      	ldr	r3, [pc, #100]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab00:	7a5b      	ldrb	r3, [r3, #9]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	4a17      	ldr	r2, [pc, #92]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ab0e:	4b15      	ldr	r3, [pc, #84]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab10:	7a5b      	ldrb	r3, [r3, #9]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	4b13      	ldr	r3, [pc, #76]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab18:	4413      	add	r3, r2
 800ab1a:	79fa      	ldrb	r2, [r7, #7]
 800ab1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab1e:	4b11      	ldr	r3, [pc, #68]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab20:	7a5b      	ldrb	r3, [r3, #9]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	b2d1      	uxtb	r1, r2
 800ab28:	4a0e      	ldr	r2, [pc, #56]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab2a:	7251      	strb	r1, [r2, #9]
 800ab2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab2e:	7dbb      	ldrb	r3, [r7, #22]
 800ab30:	3330      	adds	r3, #48	; 0x30
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	223a      	movs	r2, #58	; 0x3a
 800ab3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	3302      	adds	r3, #2
 800ab44:	222f      	movs	r2, #47	; 0x2f
 800ab46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	3303      	adds	r3, #3
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	371c      	adds	r7, #28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	20000144 	.word	0x20000144

0800ab68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab72:	2200      	movs	r2, #0
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7ff ffaa 	bl	800aad0 <FATFS_LinkDriverEx>
 800ab7c:	4603      	mov	r3, r0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <__NVIC_SetPriority>:
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6039      	str	r1, [r7, #0]
 800ab92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	db0a      	blt.n	800abb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	490c      	ldr	r1, [pc, #48]	; (800abd4 <__NVIC_SetPriority+0x4c>)
 800aba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aba6:	0112      	lsls	r2, r2, #4
 800aba8:	b2d2      	uxtb	r2, r2
 800abaa:	440b      	add	r3, r1
 800abac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800abb0:	e00a      	b.n	800abc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	4908      	ldr	r1, [pc, #32]	; (800abd8 <__NVIC_SetPriority+0x50>)
 800abb8:	79fb      	ldrb	r3, [r7, #7]
 800abba:	f003 030f 	and.w	r3, r3, #15
 800abbe:	3b04      	subs	r3, #4
 800abc0:	0112      	lsls	r2, r2, #4
 800abc2:	b2d2      	uxtb	r2, r2
 800abc4:	440b      	add	r3, r1
 800abc6:	761a      	strb	r2, [r3, #24]
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr
 800abd4:	e000e100 	.word	0xe000e100
 800abd8:	e000ed00 	.word	0xe000ed00

0800abdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800abdc:	b580      	push	{r7, lr}
 800abde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <SysTick_Handler+0x1c>)
 800abe2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800abe4:	f001 ffcc 	bl	800cb80 <xTaskGetSchedulerState>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b01      	cmp	r3, #1
 800abec:	d001      	beq.n	800abf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800abee:	f002 fdcb 	bl	800d788 <xPortSysTickHandler>
  }
}
 800abf2:	bf00      	nop
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	e000e010 	.word	0xe000e010

0800abfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac00:	2100      	movs	r1, #0
 800ac02:	f06f 0004 	mvn.w	r0, #4
 800ac06:	f7ff ffbf 	bl	800ab88 <__NVIC_SetPriority>
#endif
}
 800ac0a:	bf00      	nop
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac16:	f3ef 8305 	mrs	r3, IPSR
 800ac1a:	603b      	str	r3, [r7, #0]
  return(result);
 800ac1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ac22:	f06f 0305 	mvn.w	r3, #5
 800ac26:	607b      	str	r3, [r7, #4]
 800ac28:	e00c      	b.n	800ac44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ac2a:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <osKernelInitialize+0x44>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d105      	bne.n	800ac3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ac32:	4b08      	ldr	r3, [pc, #32]	; (800ac54 <osKernelInitialize+0x44>)
 800ac34:	2201      	movs	r2, #1
 800ac36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	607b      	str	r3, [r7, #4]
 800ac3c:	e002      	b.n	800ac44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ac3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac44:	687b      	ldr	r3, [r7, #4]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20000150 	.word	0x20000150

0800ac58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac5e:	f3ef 8305 	mrs	r3, IPSR
 800ac62:	603b      	str	r3, [r7, #0]
  return(result);
 800ac64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ac6a:	f06f 0305 	mvn.w	r3, #5
 800ac6e:	607b      	str	r3, [r7, #4]
 800ac70:	e010      	b.n	800ac94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ac72:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <osKernelStart+0x48>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d109      	bne.n	800ac8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ac7a:	f7ff ffbf 	bl	800abfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ac7e:	4b08      	ldr	r3, [pc, #32]	; (800aca0 <osKernelStart+0x48>)
 800ac80:	2202      	movs	r2, #2
 800ac82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ac84:	f001 faf8 	bl	800c278 <vTaskStartScheduler>
      stat = osOK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	607b      	str	r3, [r7, #4]
 800ac8c:	e002      	b.n	800ac94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ac8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac94:	687b      	ldr	r3, [r7, #4]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20000150 	.word	0x20000150

0800aca4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08e      	sub	sp, #56	; 0x38
 800aca8:	af04      	add	r7, sp, #16
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800acb0:	2300      	movs	r3, #0
 800acb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acb4:	f3ef 8305 	mrs	r3, IPSR
 800acb8:	617b      	str	r3, [r7, #20]
  return(result);
 800acba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d17e      	bne.n	800adbe <osThreadNew+0x11a>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d07b      	beq.n	800adbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800acc6:	2380      	movs	r3, #128	; 0x80
 800acc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800acca:	2318      	movs	r3, #24
 800accc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800acd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d045      	beq.n	800ad6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d002      	beq.n	800acec <osThreadNew+0x48>
        name = attr->name;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d008      	beq.n	800ad12 <osThreadNew+0x6e>
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	2b38      	cmp	r3, #56	; 0x38
 800ad04:	d805      	bhi.n	800ad12 <osThreadNew+0x6e>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <osThreadNew+0x72>
        return (NULL);
 800ad12:	2300      	movs	r3, #0
 800ad14:	e054      	b.n	800adc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d003      	beq.n	800ad26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	695b      	ldr	r3, [r3, #20]
 800ad22:	089b      	lsrs	r3, r3, #2
 800ad24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00e      	beq.n	800ad4c <osThreadNew+0xa8>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	2b5b      	cmp	r3, #91	; 0x5b
 800ad34:	d90a      	bls.n	800ad4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d006      	beq.n	800ad4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <osThreadNew+0xa8>
        mem = 1;
 800ad46:	2301      	movs	r3, #1
 800ad48:	61bb      	str	r3, [r7, #24]
 800ad4a:	e010      	b.n	800ad6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10c      	bne.n	800ad6e <osThreadNew+0xca>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d108      	bne.n	800ad6e <osThreadNew+0xca>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d104      	bne.n	800ad6e <osThreadNew+0xca>
          mem = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61bb      	str	r3, [r7, #24]
 800ad68:	e001      	b.n	800ad6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d110      	bne.n	800ad96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad7c:	9202      	str	r2, [sp, #8]
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	6a3a      	ldr	r2, [r7, #32]
 800ad88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f001 f820 	bl	800bdd0 <xTaskCreateStatic>
 800ad90:	4603      	mov	r3, r0
 800ad92:	613b      	str	r3, [r7, #16]
 800ad94:	e013      	b.n	800adbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d110      	bne.n	800adbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ad9c:	6a3b      	ldr	r3, [r7, #32]
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	f107 0310 	add.w	r3, r7, #16
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f001 f86b 	bl	800be8a <xTaskCreate>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d001      	beq.n	800adbe <osThreadNew+0x11a>
            hTask = NULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800adbe:	693b      	ldr	r3, [r7, #16]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3728      	adds	r7, #40	; 0x28
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800add0:	f3ef 8305 	mrs	r3, IPSR
 800add4:	60bb      	str	r3, [r7, #8]
  return(result);
 800add6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <osDelay+0x1c>
    stat = osErrorISR;
 800addc:	f06f 0305 	mvn.w	r3, #5
 800ade0:	60fb      	str	r3, [r7, #12]
 800ade2:	e007      	b.n	800adf4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d002      	beq.n	800adf4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f001 fa0e 	bl	800c210 <vTaskDelay>
    }
  }

  return (stat);
 800adf4:	68fb      	ldr	r3, [r7, #12]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b086      	sub	sp, #24
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae06:	f3ef 8305 	mrs	r3, IPSR
 800ae0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ae12:	f06f 0305 	mvn.w	r3, #5
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	e019      	b.n	800ae4e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ae1e:	f001 fb3d 	bl	800c49c <xTaskGetTickCount>
 800ae22:	4603      	mov	r3, r0
 800ae24:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d009      	beq.n	800ae48 <osDelayUntil+0x4a>
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	db06      	blt.n	800ae48 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800ae3a:	f107 0308 	add.w	r3, r7, #8
 800ae3e:	6939      	ldr	r1, [r7, #16]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 f967 	bl	800c114 <vTaskDelayUntil>
 800ae46:	e002      	b.n	800ae4e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ae48:	f06f 0303 	mvn.w	r3, #3
 800ae4c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ae4e:	697b      	ldr	r3, [r7, #20]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3718      	adds	r7, #24
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae64:	f3ef 8305 	mrs	r3, IPSR
 800ae68:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae6a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d12d      	bne.n	800aecc <osEventFlagsNew+0x74>
    mem = -1;
 800ae70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae74:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d015      	beq.n	800aea8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d006      	beq.n	800ae92 <osEventFlagsNew+0x3a>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	2b1f      	cmp	r3, #31
 800ae8a:	d902      	bls.n	800ae92 <osEventFlagsNew+0x3a>
        mem = 1;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	613b      	str	r3, [r7, #16]
 800ae90:	e00c      	b.n	800aeac <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d108      	bne.n	800aeac <osEventFlagsNew+0x54>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d104      	bne.n	800aeac <osEventFlagsNew+0x54>
          mem = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	613b      	str	r3, [r7, #16]
 800aea6:	e001      	b.n	800aeac <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d106      	bne.n	800aec0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 f8a8 	bl	800b00c <xEventGroupCreateStatic>
 800aebc:	6178      	str	r0, [r7, #20]
 800aebe:	e005      	b.n	800aecc <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d102      	bne.n	800aecc <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800aec6:	f000 f8d8 	bl	800b07a <xEventGroupCreate>
 800aeca:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800aecc:	697b      	ldr	r3, [r7, #20]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3718      	adds	r7, #24
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b08c      	sub	sp, #48	; 0x30
 800aeda:	af02      	add	r7, sp, #8
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
 800aee2:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d004      	beq.n	800aef8 <osEventFlagsWait+0x22>
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800aef8:	f06f 0303 	mvn.w	r3, #3
 800aefc:	61fb      	str	r3, [r7, #28]
 800aefe:	e04b      	b.n	800af98 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af00:	f3ef 8305 	mrs	r3, IPSR
 800af04:	617b      	str	r3, [r7, #20]
  return(result);
 800af06:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800af0c:	f06f 0305 	mvn.w	r3, #5
 800af10:	61fb      	str	r3, [r7, #28]
 800af12:	e041      	b.n	800af98 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800af1e:	2301      	movs	r3, #1
 800af20:	627b      	str	r3, [r7, #36]	; 0x24
 800af22:	e001      	b.n	800af28 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800af24:	2300      	movs	r3, #0
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f003 0302 	and.w	r3, r3, #2
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d002      	beq.n	800af38 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800af32:	2300      	movs	r3, #0
 800af34:	623b      	str	r3, [r7, #32]
 800af36:	e001      	b.n	800af3c <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800af38:	2301      	movs	r3, #1
 800af3a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	6a3a      	ldr	r2, [r7, #32]
 800af44:	68b9      	ldr	r1, [r7, #8]
 800af46:	69b8      	ldr	r0, [r7, #24]
 800af48:	f000 f8b2 	bl	800b0b0 <xEventGroupWaitBits>
 800af4c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f003 0301 	and.w	r3, r3, #1
 800af54:	2b00      	cmp	r3, #0
 800af56:	d010      	beq.n	800af7a <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	4013      	ands	r3, r2
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	429a      	cmp	r2, r3
 800af62:	d019      	beq.n	800af98 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800af6a:	f06f 0301 	mvn.w	r3, #1
 800af6e:	61fb      	str	r3, [r7, #28]
 800af70:	e012      	b.n	800af98 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800af72:	f06f 0302 	mvn.w	r3, #2
 800af76:	61fb      	str	r3, [r7, #28]
 800af78:	e00e      	b.n	800af98 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	4013      	ands	r3, r2
 800af80:	2b00      	cmp	r3, #0
 800af82:	d109      	bne.n	800af98 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d003      	beq.n	800af92 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800af8a:	f06f 0301 	mvn.w	r3, #1
 800af8e:	61fb      	str	r3, [r7, #28]
 800af90:	e002      	b.n	800af98 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800af92:	f06f 0302 	mvn.w	r3, #2
 800af96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800af98:	69fb      	ldr	r3, [r7, #28]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3728      	adds	r7, #40	; 0x28
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4a07      	ldr	r2, [pc, #28]	; (800afd0 <vApplicationGetIdleTaskMemory+0x2c>)
 800afb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4a06      	ldr	r2, [pc, #24]	; (800afd4 <vApplicationGetIdleTaskMemory+0x30>)
 800afba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2280      	movs	r2, #128	; 0x80
 800afc0:	601a      	str	r2, [r3, #0]
}
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	20000154 	.word	0x20000154
 800afd4:	200001b0 	.word	0x200001b0

0800afd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4a07      	ldr	r2, [pc, #28]	; (800b004 <vApplicationGetTimerTaskMemory+0x2c>)
 800afe8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	4a06      	ldr	r2, [pc, #24]	; (800b008 <vApplicationGetTimerTaskMemory+0x30>)
 800afee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aff6:	601a      	str	r2, [r3, #0]
}
 800aff8:	bf00      	nop
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	200003b0 	.word	0x200003b0
 800b008:	2000040c 	.word	0x2000040c

0800b00c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10a      	bne.n	800b030 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b02c:	bf00      	nop
 800b02e:	e7fe      	b.n	800b02e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800b030:	2320      	movs	r3, #32
 800b032:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b20      	cmp	r3, #32
 800b038:	d00a      	beq.n	800b050 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800b03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	60fb      	str	r3, [r7, #12]
}
 800b04c:	bf00      	nop
 800b04e:	e7fe      	b.n	800b04e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	3304      	adds	r3, #4
 800b064:	4618      	mov	r0, r3
 800b066:	f000 f913 	bl	800b290 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2201      	movs	r2, #1
 800b06e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800b070:	697b      	ldr	r3, [r7, #20]
	}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b082      	sub	sp, #8
 800b07e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b080:	2020      	movs	r0, #32
 800b082:	f002 fc11 	bl	800d8a8 <pvPortMalloc>
 800b086:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3304      	adds	r3, #4
 800b098:	4618      	mov	r0, r3
 800b09a:	f000 f8f9 	bl	800b290 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b0a4:	687b      	ldr	r3, [r7, #4]
	}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b090      	sub	sp, #64	; 0x40
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <xEventGroupWaitBits+0x36>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	623b      	str	r3, [r7, #32]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <xEventGroupWaitBits+0x56>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	61fb      	str	r3, [r7, #28]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10a      	bne.n	800b122 <xEventGroupWaitBits+0x72>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	61bb      	str	r3, [r7, #24]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b122:	f001 fd2d 	bl	800cb80 <xTaskGetSchedulerState>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d102      	bne.n	800b132 <xEventGroupWaitBits+0x82>
 800b12c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <xEventGroupWaitBits+0x86>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <xEventGroupWaitBits+0x88>
 800b136:	2300      	movs	r3, #0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	617b      	str	r3, [r7, #20]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800b152:	f001 f8f7 	bl	800c344 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800b156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	68b9      	ldr	r1, [r7, #8]
 800b160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b162:	f000 f873 	bl	800b24c <prvTestWaitCondition>
 800b166:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00e      	beq.n	800b18c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800b16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b170:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800b172:	2300      	movs	r3, #0
 800b174:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d028      	beq.n	800b1ce <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	43db      	mvns	r3, r3
 800b184:	401a      	ands	r2, r3
 800b186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	e020      	b.n	800b1ce <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800b18c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d104      	bne.n	800b19c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800b196:	2301      	movs	r3, #1
 800b198:	633b      	str	r3, [r7, #48]	; 0x30
 800b19a:	e018      	b.n	800b1ce <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1a8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1b6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ba:	1d18      	adds	r0, r3, #4
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	f001 fab5 	bl	800c734 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800b1ce:	f001 f8c7 	bl	800c360 <xTaskResumeAll>
 800b1d2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800b1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d031      	beq.n	800b23e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d107      	bne.n	800b1f0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800b1e0:	4b19      	ldr	r3, [pc, #100]	; (800b248 <xEventGroupWaitBits+0x198>)
 800b1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e6:	601a      	str	r2, [r3, #0]
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800b1f0:	f001 fd52 	bl	800cc98 <uxTaskResetEventItemValue>
 800b1f4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800b1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d11a      	bne.n	800b236 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800b200:	f002 fa30 	bl	800d664 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800b204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b210:	f000 f81c 	bl	800b24c <prvTestWaitCondition>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d009      	beq.n	800b22e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d006      	beq.n	800b22e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	43db      	mvns	r3, r3
 800b228:	401a      	ands	r2, r3
 800b22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800b22e:	2301      	movs	r3, #1
 800b230:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800b232:	f002 fa47 	bl	800d6c4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b23c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800b23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b240:	4618      	mov	r0, r3
 800b242:	3740      	adds	r7, #64	; 0x40
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800b258:	2300      	movs	r3, #0
 800b25a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d107      	bne.n	800b272 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	4013      	ands	r3, r2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00a      	beq.n	800b282 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b26c:	2301      	movs	r3, #1
 800b26e:	617b      	str	r3, [r7, #20]
 800b270:	e007      	b.n	800b282 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	4013      	ands	r3, r2
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d101      	bne.n	800b282 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b27e:	2301      	movs	r3, #1
 800b280:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800b282:	697b      	ldr	r3, [r7, #20]
}
 800b284:	4618      	mov	r0, r3
 800b286:	371c      	adds	r7, #28
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f103 0208 	add.w	r2, r3, #8
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f103 0208 	add.w	r2, r3, #8
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f103 0208 	add.w	r2, r3, #8
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b2de:	bf00      	nop
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b085      	sub	sp, #20
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	689a      	ldr	r2, [r3, #8]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	1c5a      	adds	r2, r3, #1
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	601a      	str	r2, [r3, #0]
}
 800b326:	bf00      	nop
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b332:	b480      	push	{r7}
 800b334:	b085      	sub	sp, #20
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b348:	d103      	bne.n	800b352 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	e00c      	b.n	800b36c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	3308      	adds	r3, #8
 800b356:	60fb      	str	r3, [r7, #12]
 800b358:	e002      	b.n	800b360 <vListInsert+0x2e>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	60fb      	str	r3, [r7, #12]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d2f6      	bcs.n	800b35a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	1c5a      	adds	r2, r3, #1
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	601a      	str	r2, [r3, #0]
}
 800b398:	bf00      	nop
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	6892      	ldr	r2, [r2, #8]
 800b3ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6852      	ldr	r2, [r2, #4]
 800b3c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d103      	bne.n	800b3d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689a      	ldr	r2, [r3, #8]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	1e5a      	subs	r2, r3, #1
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10a      	bne.n	800b422 <xQueueGenericReset+0x2a>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	60bb      	str	r3, [r7, #8]
}
 800b41e:	bf00      	nop
 800b420:	e7fe      	b.n	800b420 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b422:	f002 f91f 	bl	800d664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b42e:	68f9      	ldr	r1, [r7, #12]
 800b430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b432:	fb01 f303 	mul.w	r3, r1, r3
 800b436:	441a      	add	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b452:	3b01      	subs	r3, #1
 800b454:	68f9      	ldr	r1, [r7, #12]
 800b456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b458:	fb01 f303 	mul.w	r3, r1, r3
 800b45c:	441a      	add	r2, r3
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	22ff      	movs	r2, #255	; 0xff
 800b466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	22ff      	movs	r2, #255	; 0xff
 800b46e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d114      	bne.n	800b4a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01a      	beq.n	800b4b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3310      	adds	r3, #16
 800b484:	4618      	mov	r0, r3
 800b486:	f001 f9bd 	bl	800c804 <xTaskRemoveFromEventList>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d012      	beq.n	800b4b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b490:	4b0c      	ldr	r3, [pc, #48]	; (800b4c4 <xQueueGenericReset+0xcc>)
 800b492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	e009      	b.n	800b4b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3310      	adds	r3, #16
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff fef2 	bl	800b290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3324      	adds	r3, #36	; 0x24
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff feed 	bl	800b290 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b4b6:	f002 f905 	bl	800d6c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b4ba:	2301      	movs	r3, #1
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	e000ed04 	.word	0xe000ed04

0800b4c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08e      	sub	sp, #56	; 0x38
 800b4cc:	af02      	add	r7, sp, #8
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10a      	bne.n	800b4f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10a      	bne.n	800b50e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <xQueueGenericCreateStatic+0x52>
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <xQueueGenericCreateStatic+0x56>
 800b51a:	2301      	movs	r3, #1
 800b51c:	e000      	b.n	800b520 <xQueueGenericCreateStatic+0x58>
 800b51e:	2300      	movs	r3, #0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	623b      	str	r3, [r7, #32]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d102      	bne.n	800b546 <xQueueGenericCreateStatic+0x7e>
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <xQueueGenericCreateStatic+0x82>
 800b546:	2301      	movs	r3, #1
 800b548:	e000      	b.n	800b54c <xQueueGenericCreateStatic+0x84>
 800b54a:	2300      	movs	r3, #0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10a      	bne.n	800b566 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	61fb      	str	r3, [r7, #28]
}
 800b562:	bf00      	nop
 800b564:	e7fe      	b.n	800b564 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b566:	2350      	movs	r3, #80	; 0x50
 800b568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b50      	cmp	r3, #80	; 0x50
 800b56e:	d00a      	beq.n	800b586 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	61bb      	str	r3, [r7, #24]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b586:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00d      	beq.n	800b5ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	2201      	movs	r2, #1
 800b596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b59a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	68b9      	ldr	r1, [r7, #8]
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 f805 	bl	800b5b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3730      	adds	r7, #48	; 0x30
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d103      	bne.n	800b5d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	e002      	b.n	800b5da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	69b8      	ldr	r0, [r7, #24]
 800b5ea:	f7ff ff05 	bl	800b3f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5f6:	bf00      	nop
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
	...

0800b600 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08e      	sub	sp, #56	; 0x38
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b60e:	2300      	movs	r3, #0
 800b610:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10a      	bne.n	800b632 <xQueueGenericSend+0x32>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d103      	bne.n	800b640 <xQueueGenericSend+0x40>
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <xQueueGenericSend+0x44>
 800b640:	2301      	movs	r3, #1
 800b642:	e000      	b.n	800b646 <xQueueGenericSend+0x46>
 800b644:	2300      	movs	r3, #0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10a      	bne.n	800b660 <xQueueGenericSend+0x60>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2b02      	cmp	r3, #2
 800b664:	d103      	bne.n	800b66e <xQueueGenericSend+0x6e>
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d101      	bne.n	800b672 <xQueueGenericSend+0x72>
 800b66e:	2301      	movs	r3, #1
 800b670:	e000      	b.n	800b674 <xQueueGenericSend+0x74>
 800b672:	2300      	movs	r3, #0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10a      	bne.n	800b68e <xQueueGenericSend+0x8e>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	623b      	str	r3, [r7, #32]
}
 800b68a:	bf00      	nop
 800b68c:	e7fe      	b.n	800b68c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b68e:	f001 fa77 	bl	800cb80 <xTaskGetSchedulerState>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <xQueueGenericSend+0x9e>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <xQueueGenericSend+0xa2>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e000      	b.n	800b6a4 <xQueueGenericSend+0xa4>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10a      	bne.n	800b6be <xQueueGenericSend+0xbe>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	61fb      	str	r3, [r7, #28]
}
 800b6ba:	bf00      	nop
 800b6bc:	e7fe      	b.n	800b6bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6be:	f001 ffd1 	bl	800d664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d302      	bcc.n	800b6d4 <xQueueGenericSend+0xd4>
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d129      	bne.n	800b728 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	68b9      	ldr	r1, [r7, #8]
 800b6d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6da:	f000 fa0b 	bl	800baf4 <prvCopyDataToQueue>
 800b6de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d010      	beq.n	800b70a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	3324      	adds	r3, #36	; 0x24
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f001 f889 	bl	800c804 <xTaskRemoveFromEventList>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d013      	beq.n	800b720 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b6f8:	4b3f      	ldr	r3, [pc, #252]	; (800b7f8 <xQueueGenericSend+0x1f8>)
 800b6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6fe:	601a      	str	r2, [r3, #0]
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	e00a      	b.n	800b720 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d007      	beq.n	800b720 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b710:	4b39      	ldr	r3, [pc, #228]	; (800b7f8 <xQueueGenericSend+0x1f8>)
 800b712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b716:	601a      	str	r2, [r3, #0]
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b720:	f001 ffd0 	bl	800d6c4 <vPortExitCritical>
				return pdPASS;
 800b724:	2301      	movs	r3, #1
 800b726:	e063      	b.n	800b7f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d103      	bne.n	800b736 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b72e:	f001 ffc9 	bl	800d6c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b732:	2300      	movs	r3, #0
 800b734:	e05c      	b.n	800b7f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d106      	bne.n	800b74a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b73c:	f107 0314 	add.w	r3, r7, #20
 800b740:	4618      	mov	r0, r3
 800b742:	f001 f8c3 	bl	800c8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b746:	2301      	movs	r3, #1
 800b748:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b74a:	f001 ffbb 	bl	800d6c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b74e:	f000 fdf9 	bl	800c344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b752:	f001 ff87 	bl	800d664 <vPortEnterCritical>
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b75c:	b25b      	sxtb	r3, r3
 800b75e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b762:	d103      	bne.n	800b76c <xQueueGenericSend+0x16c>
 800b764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b766:	2200      	movs	r2, #0
 800b768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b772:	b25b      	sxtb	r3, r3
 800b774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b778:	d103      	bne.n	800b782 <xQueueGenericSend+0x182>
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b782:	f001 ff9f 	bl	800d6c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b786:	1d3a      	adds	r2, r7, #4
 800b788:	f107 0314 	add.w	r3, r7, #20
 800b78c:	4611      	mov	r1, r2
 800b78e:	4618      	mov	r0, r3
 800b790:	f001 f8b2 	bl	800c8f8 <xTaskCheckForTimeOut>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d124      	bne.n	800b7e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b79a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b79c:	f000 faa2 	bl	800bce4 <prvIsQueueFull>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d018      	beq.n	800b7d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	3310      	adds	r3, #16
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 ff9c 	bl	800c6ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7b6:	f000 fa2d 	bl	800bc14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7ba:	f000 fdd1 	bl	800c360 <xTaskResumeAll>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f47f af7c 	bne.w	800b6be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b7c6:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <xQueueGenericSend+0x1f8>)
 800b7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	e772      	b.n	800b6be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b7d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7da:	f000 fa1b 	bl	800bc14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7de:	f000 fdbf 	bl	800c360 <xTaskResumeAll>
 800b7e2:	e76c      	b.n	800b6be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b7e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7e6:	f000 fa15 	bl	800bc14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7ea:	f000 fdb9 	bl	800c360 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b7ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3738      	adds	r7, #56	; 0x38
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	e000ed04 	.word	0xe000ed04

0800b7fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b090      	sub	sp, #64	; 0x40
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10a      	bne.n	800b82a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b826:	bf00      	nop
 800b828:	e7fe      	b.n	800b828 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d103      	bne.n	800b838 <xQueueGenericSendFromISR+0x3c>
 800b830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <xQueueGenericSendFromISR+0x40>
 800b838:	2301      	movs	r3, #1
 800b83a:	e000      	b.n	800b83e <xQueueGenericSendFromISR+0x42>
 800b83c:	2300      	movs	r3, #0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10a      	bne.n	800b858 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b854:	bf00      	nop
 800b856:	e7fe      	b.n	800b856 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d103      	bne.n	800b866 <xQueueGenericSendFromISR+0x6a>
 800b85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b862:	2b01      	cmp	r3, #1
 800b864:	d101      	bne.n	800b86a <xQueueGenericSendFromISR+0x6e>
 800b866:	2301      	movs	r3, #1
 800b868:	e000      	b.n	800b86c <xQueueGenericSendFromISR+0x70>
 800b86a:	2300      	movs	r3, #0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10a      	bne.n	800b886 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	623b      	str	r3, [r7, #32]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b886:	f001 ffcf 	bl	800d828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b88a:	f3ef 8211 	mrs	r2, BASEPRI
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	61fa      	str	r2, [r7, #28]
 800b8a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b8a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d302      	bcc.n	800b8b8 <xQueueGenericSendFromISR+0xbc>
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d12f      	bne.n	800b918 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8ce:	f000 f911 	bl	800baf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b8d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8da:	d112      	bne.n	800b902 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d016      	beq.n	800b912 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e6:	3324      	adds	r3, #36	; 0x24
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f000 ff8b 	bl	800c804 <xTaskRemoveFromEventList>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00e      	beq.n	800b912 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00b      	beq.n	800b912 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	601a      	str	r2, [r3, #0]
 800b900:	e007      	b.n	800b912 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b902:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b906:	3301      	adds	r3, #1
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	b25a      	sxtb	r2, r3
 800b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b912:	2301      	movs	r3, #1
 800b914:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b916:	e001      	b.n	800b91c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b918:	2300      	movs	r3, #0
 800b91a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b91e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b926:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3740      	adds	r7, #64	; 0x40
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
	...

0800b934 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08c      	sub	sp, #48	; 0x30
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b940:	2300      	movs	r3, #0
 800b942:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10a      	bne.n	800b964 <xQueueReceive+0x30>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	623b      	str	r3, [r7, #32]
}
 800b960:	bf00      	nop
 800b962:	e7fe      	b.n	800b962 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d103      	bne.n	800b972 <xQueueReceive+0x3e>
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <xQueueReceive+0x42>
 800b972:	2301      	movs	r3, #1
 800b974:	e000      	b.n	800b978 <xQueueReceive+0x44>
 800b976:	2300      	movs	r3, #0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <xQueueReceive+0x5e>
	__asm volatile
 800b97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b980:	f383 8811 	msr	BASEPRI, r3
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	61fb      	str	r3, [r7, #28]
}
 800b98e:	bf00      	nop
 800b990:	e7fe      	b.n	800b990 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b992:	f001 f8f5 	bl	800cb80 <xTaskGetSchedulerState>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d102      	bne.n	800b9a2 <xQueueReceive+0x6e>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <xQueueReceive+0x72>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e000      	b.n	800b9a8 <xQueueReceive+0x74>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10a      	bne.n	800b9c2 <xQueueReceive+0x8e>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	61bb      	str	r3, [r7, #24]
}
 800b9be:	bf00      	nop
 800b9c0:	e7fe      	b.n	800b9c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9c2:	f001 fe4f 	bl	800d664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d01f      	beq.n	800ba12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9d2:	68b9      	ldr	r1, [r7, #8]
 800b9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9d6:	f000 f8f7 	bl	800bbc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	1e5a      	subs	r2, r3, #1
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00f      	beq.n	800ba0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	3310      	adds	r3, #16
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 ff08 	bl	800c804 <xTaskRemoveFromEventList>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d007      	beq.n	800ba0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9fa:	4b3d      	ldr	r3, [pc, #244]	; (800baf0 <xQueueReceive+0x1bc>)
 800b9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba00:	601a      	str	r2, [r3, #0]
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba0a:	f001 fe5b 	bl	800d6c4 <vPortExitCritical>
				return pdPASS;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e069      	b.n	800bae6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d103      	bne.n	800ba20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba18:	f001 fe54 	bl	800d6c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e062      	b.n	800bae6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d106      	bne.n	800ba34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba26:	f107 0310 	add.w	r3, r7, #16
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 ff4e 	bl	800c8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba30:	2301      	movs	r3, #1
 800ba32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba34:	f001 fe46 	bl	800d6c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba38:	f000 fc84 	bl	800c344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba3c:	f001 fe12 	bl	800d664 <vPortEnterCritical>
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba46:	b25b      	sxtb	r3, r3
 800ba48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba4c:	d103      	bne.n	800ba56 <xQueueReceive+0x122>
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba5c:	b25b      	sxtb	r3, r3
 800ba5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba62:	d103      	bne.n	800ba6c <xQueueReceive+0x138>
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba6c:	f001 fe2a 	bl	800d6c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba70:	1d3a      	adds	r2, r7, #4
 800ba72:	f107 0310 	add.w	r3, r7, #16
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f000 ff3d 	bl	800c8f8 <xTaskCheckForTimeOut>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d123      	bne.n	800bacc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba86:	f000 f917 	bl	800bcb8 <prvIsQueueEmpty>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d017      	beq.n	800bac0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	3324      	adds	r3, #36	; 0x24
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fe27 	bl	800c6ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baa0:	f000 f8b8 	bl	800bc14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800baa4:	f000 fc5c 	bl	800c360 <xTaskResumeAll>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d189      	bne.n	800b9c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800baae:	4b10      	ldr	r3, [pc, #64]	; (800baf0 <xQueueReceive+0x1bc>)
 800bab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	e780      	b.n	800b9c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bac2:	f000 f8a7 	bl	800bc14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bac6:	f000 fc4b 	bl	800c360 <xTaskResumeAll>
 800baca:	e77a      	b.n	800b9c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bacc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bace:	f000 f8a1 	bl	800bc14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bad2:	f000 fc45 	bl	800c360 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bad8:	f000 f8ee 	bl	800bcb8 <prvIsQueueEmpty>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f43f af6f 	beq.w	800b9c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bae4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3730      	adds	r7, #48	; 0x30
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb00:	2300      	movs	r3, #0
 800bb02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10d      	bne.n	800bb2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d14d      	bne.n	800bbb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f001 f84c 	bl	800cbbc <xTaskPriorityDisinherit>
 800bb24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	609a      	str	r2, [r3, #8]
 800bb2c:	e043      	b.n	800bbb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d119      	bne.n	800bb68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6858      	ldr	r0, [r3, #4]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	68b9      	ldr	r1, [r7, #8]
 800bb40:	f002 f8c6 	bl	800dcd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4c:	441a      	add	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d32b      	bcc.n	800bbb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	605a      	str	r2, [r3, #4]
 800bb66:	e026      	b.n	800bbb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	68d8      	ldr	r0, [r3, #12]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb70:	461a      	mov	r2, r3
 800bb72:	68b9      	ldr	r1, [r7, #8]
 800bb74:	f002 f8ac 	bl	800dcd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	68da      	ldr	r2, [r3, #12]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb80:	425b      	negs	r3, r3
 800bb82:	441a      	add	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	68da      	ldr	r2, [r3, #12]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d207      	bcs.n	800bba4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	689a      	ldr	r2, [r3, #8]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9c:	425b      	negs	r3, r3
 800bb9e:	441a      	add	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	d105      	bne.n	800bbb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bbbe:	697b      	ldr	r3, [r7, #20]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d018      	beq.n	800bc0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	68da      	ldr	r2, [r3, #12]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	441a      	add	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	68da      	ldr	r2, [r3, #12]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d303      	bcc.n	800bbfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	68d9      	ldr	r1, [r3, #12]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc04:	461a      	mov	r2, r3
 800bc06:	6838      	ldr	r0, [r7, #0]
 800bc08:	f002 f862 	bl	800dcd0 <memcpy>
	}
}
 800bc0c:	bf00      	nop
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc1c:	f001 fd22 	bl	800d664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc28:	e011      	b.n	800bc4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d012      	beq.n	800bc58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	3324      	adds	r3, #36	; 0x24
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fde4 	bl	800c804 <xTaskRemoveFromEventList>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc42:	f000 febb 	bl	800c9bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc46:	7bfb      	ldrb	r3, [r7, #15]
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	dce9      	bgt.n	800bc2a <prvUnlockQueue+0x16>
 800bc56:	e000      	b.n	800bc5a <prvUnlockQueue+0x46>
					break;
 800bc58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	22ff      	movs	r2, #255	; 0xff
 800bc5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc62:	f001 fd2f 	bl	800d6c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc66:	f001 fcfd 	bl	800d664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc72:	e011      	b.n	800bc98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d012      	beq.n	800bca2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	3310      	adds	r3, #16
 800bc80:	4618      	mov	r0, r3
 800bc82:	f000 fdbf 	bl	800c804 <xTaskRemoveFromEventList>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d001      	beq.n	800bc90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc8c:	f000 fe96 	bl	800c9bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc90:	7bbb      	ldrb	r3, [r7, #14]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dce9      	bgt.n	800bc74 <prvUnlockQueue+0x60>
 800bca0:	e000      	b.n	800bca4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bca2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	22ff      	movs	r2, #255	; 0xff
 800bca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bcac:	f001 fd0a 	bl	800d6c4 <vPortExitCritical>
}
 800bcb0:	bf00      	nop
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcc0:	f001 fcd0 	bl	800d664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d102      	bne.n	800bcd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bccc:	2301      	movs	r3, #1
 800bcce:	60fb      	str	r3, [r7, #12]
 800bcd0:	e001      	b.n	800bcd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcd6:	f001 fcf5 	bl	800d6c4 <vPortExitCritical>

	return xReturn;
 800bcda:	68fb      	ldr	r3, [r7, #12]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcec:	f001 fcba 	bl	800d664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d102      	bne.n	800bd02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	e001      	b.n	800bd06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd06:	f001 fcdd 	bl	800d6c4 <vPortExitCritical>

	return xReturn;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60fb      	str	r3, [r7, #12]
 800bd22:	e014      	b.n	800bd4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd24:	4a0f      	ldr	r2, [pc, #60]	; (800bd64 <vQueueAddToRegistry+0x50>)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10b      	bne.n	800bd48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd30:	490c      	ldr	r1, [pc, #48]	; (800bd64 <vQueueAddToRegistry+0x50>)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd3a:	4a0a      	ldr	r2, [pc, #40]	; (800bd64 <vQueueAddToRegistry+0x50>)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	4413      	add	r3, r2
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd46:	e006      	b.n	800bd56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	60fb      	str	r3, [r7, #12]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b07      	cmp	r3, #7
 800bd52:	d9e7      	bls.n	800bd24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd54:	bf00      	nop
 800bd56:	bf00      	nop
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	200103d8 	.word	0x200103d8

0800bd68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd78:	f001 fc74 	bl	800d664 <vPortEnterCritical>
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd82:	b25b      	sxtb	r3, r3
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd88:	d103      	bne.n	800bd92 <vQueueWaitForMessageRestricted+0x2a>
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd98:	b25b      	sxtb	r3, r3
 800bd9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd9e:	d103      	bne.n	800bda8 <vQueueWaitForMessageRestricted+0x40>
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bda8:	f001 fc8c 	bl	800d6c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d106      	bne.n	800bdc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	3324      	adds	r3, #36	; 0x24
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	68b9      	ldr	r1, [r7, #8]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 fcf5 	bl	800c7ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bdc2:	6978      	ldr	r0, [r7, #20]
 800bdc4:	f7ff ff26 	bl	800bc14 <prvUnlockQueue>
	}
 800bdc8:	bf00      	nop
 800bdca:	3718      	adds	r7, #24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08e      	sub	sp, #56	; 0x38
 800bdd4:	af04      	add	r7, sp, #16
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10a      	bne.n	800bdfa <xTaskCreateStatic+0x2a>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	623b      	str	r3, [r7, #32]
}
 800bdf6:	bf00      	nop
 800bdf8:	e7fe      	b.n	800bdf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10a      	bne.n	800be16 <xTaskCreateStatic+0x46>
	__asm volatile
 800be00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	61fb      	str	r3, [r7, #28]
}
 800be12:	bf00      	nop
 800be14:	e7fe      	b.n	800be14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be16:	235c      	movs	r3, #92	; 0x5c
 800be18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	2b5c      	cmp	r3, #92	; 0x5c
 800be1e:	d00a      	beq.n	800be36 <xTaskCreateStatic+0x66>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	61bb      	str	r3, [r7, #24]
}
 800be32:	bf00      	nop
 800be34:	e7fe      	b.n	800be34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d01e      	beq.n	800be7c <xTaskCreateStatic+0xac>
 800be3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be40:	2b00      	cmp	r3, #0
 800be42:	d01b      	beq.n	800be7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	2202      	movs	r2, #2
 800be52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be56:	2300      	movs	r3, #0
 800be58:	9303      	str	r3, [sp, #12]
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	9302      	str	r3, [sp, #8]
 800be5e:	f107 0314 	add.w	r3, r7, #20
 800be62:	9301      	str	r3, [sp, #4]
 800be64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	68b9      	ldr	r1, [r7, #8]
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f000 f850 	bl	800bf14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be76:	f000 f8dd 	bl	800c034 <prvAddNewTaskToReadyList>
 800be7a:	e001      	b.n	800be80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800be7c:	2300      	movs	r3, #0
 800be7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be80:	697b      	ldr	r3, [r7, #20]
	}
 800be82:	4618      	mov	r0, r3
 800be84:	3728      	adds	r7, #40	; 0x28
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b08c      	sub	sp, #48	; 0x30
 800be8e:	af04      	add	r7, sp, #16
 800be90:	60f8      	str	r0, [r7, #12]
 800be92:	60b9      	str	r1, [r7, #8]
 800be94:	603b      	str	r3, [r7, #0]
 800be96:	4613      	mov	r3, r2
 800be98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	4618      	mov	r0, r3
 800bea0:	f001 fd02 	bl	800d8a8 <pvPortMalloc>
 800bea4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00e      	beq.n	800beca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800beac:	205c      	movs	r0, #92	; 0x5c
 800beae:	f001 fcfb 	bl	800d8a8 <pvPortMalloc>
 800beb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d003      	beq.n	800bec2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	631a      	str	r2, [r3, #48]	; 0x30
 800bec0:	e005      	b.n	800bece <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bec2:	6978      	ldr	r0, [r7, #20]
 800bec4:	f001 fdbc 	bl	800da40 <vPortFree>
 800bec8:	e001      	b.n	800bece <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800beca:	2300      	movs	r3, #0
 800becc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d017      	beq.n	800bf04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bedc:	88fa      	ldrh	r2, [r7, #6]
 800bede:	2300      	movs	r3, #0
 800bee0:	9303      	str	r3, [sp, #12]
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	9302      	str	r3, [sp, #8]
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	9301      	str	r3, [sp, #4]
 800beea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f000 f80e 	bl	800bf14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bef8:	69f8      	ldr	r0, [r7, #28]
 800befa:	f000 f89b 	bl	800c034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800befe:	2301      	movs	r3, #1
 800bf00:	61bb      	str	r3, [r7, #24]
 800bf02:	e002      	b.n	800bf0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf0a:	69bb      	ldr	r3, [r7, #24]
	}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3720      	adds	r7, #32
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
 800bf20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	21a5      	movs	r1, #165	; 0xa5
 800bf2e:	f001 fedd 	bl	800dcec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	f023 0307 	bic.w	r3, r3, #7
 800bf4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	f003 0307 	and.w	r3, r3, #7
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <prvInitialiseNewTask+0x58>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	617b      	str	r3, [r7, #20]
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d01f      	beq.n	800bfb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf72:	2300      	movs	r3, #0
 800bf74:	61fb      	str	r3, [r7, #28]
 800bf76:	e012      	b.n	800bf9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	7819      	ldrb	r1, [r3, #0]
 800bf80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	4413      	add	r3, r2
 800bf86:	3334      	adds	r3, #52	; 0x34
 800bf88:	460a      	mov	r2, r1
 800bf8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	4413      	add	r3, r2
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d006      	beq.n	800bfa6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	61fb      	str	r3, [r7, #28]
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	2b0f      	cmp	r3, #15
 800bfa2:	d9e9      	bls.n	800bf78 <prvInitialiseNewTask+0x64>
 800bfa4:	e000      	b.n	800bfa8 <prvInitialiseNewTask+0x94>
			{
				break;
 800bfa6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfb0:	e003      	b.n	800bfba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	2b37      	cmp	r3, #55	; 0x37
 800bfbe:	d901      	bls.n	800bfc4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bfc0:	2337      	movs	r3, #55	; 0x37
 800bfc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	3304      	adds	r3, #4
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff f978 	bl	800b2d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	3318      	adds	r3, #24
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7ff f973 	bl	800b2d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bffe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	2200      	movs	r2, #0
 800c004:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	68f9      	ldr	r1, [r7, #12]
 800c012:	69b8      	ldr	r0, [r7, #24]
 800c014:	f001 f9fa 	bl	800d40c <pxPortInitialiseStack>
 800c018:	4602      	mov	r2, r0
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c028:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c02a:	bf00      	nop
 800c02c:	3720      	adds	r7, #32
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c03c:	f001 fb12 	bl	800d664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c040:	4b2d      	ldr	r3, [pc, #180]	; (800c0f8 <prvAddNewTaskToReadyList+0xc4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3301      	adds	r3, #1
 800c046:	4a2c      	ldr	r2, [pc, #176]	; (800c0f8 <prvAddNewTaskToReadyList+0xc4>)
 800c048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c04a:	4b2c      	ldr	r3, [pc, #176]	; (800c0fc <prvAddNewTaskToReadyList+0xc8>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d109      	bne.n	800c066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c052:	4a2a      	ldr	r2, [pc, #168]	; (800c0fc <prvAddNewTaskToReadyList+0xc8>)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c058:	4b27      	ldr	r3, [pc, #156]	; (800c0f8 <prvAddNewTaskToReadyList+0xc4>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d110      	bne.n	800c082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c060:	f000 fcd0 	bl	800ca04 <prvInitialiseTaskLists>
 800c064:	e00d      	b.n	800c082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c066:	4b26      	ldr	r3, [pc, #152]	; (800c100 <prvAddNewTaskToReadyList+0xcc>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d109      	bne.n	800c082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c06e:	4b23      	ldr	r3, [pc, #140]	; (800c0fc <prvAddNewTaskToReadyList+0xc8>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c078:	429a      	cmp	r2, r3
 800c07a:	d802      	bhi.n	800c082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c07c:	4a1f      	ldr	r2, [pc, #124]	; (800c0fc <prvAddNewTaskToReadyList+0xc8>)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c082:	4b20      	ldr	r3, [pc, #128]	; (800c104 <prvAddNewTaskToReadyList+0xd0>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	3301      	adds	r3, #1
 800c088:	4a1e      	ldr	r2, [pc, #120]	; (800c104 <prvAddNewTaskToReadyList+0xd0>)
 800c08a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c08c:	4b1d      	ldr	r3, [pc, #116]	; (800c104 <prvAddNewTaskToReadyList+0xd0>)
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c098:	4b1b      	ldr	r3, [pc, #108]	; (800c108 <prvAddNewTaskToReadyList+0xd4>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d903      	bls.n	800c0a8 <prvAddNewTaskToReadyList+0x74>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a4:	4a18      	ldr	r2, [pc, #96]	; (800c108 <prvAddNewTaskToReadyList+0xd4>)
 800c0a6:	6013      	str	r3, [r2, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4a15      	ldr	r2, [pc, #84]	; (800c10c <prvAddNewTaskToReadyList+0xd8>)
 800c0b6:	441a      	add	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	f7ff f913 	bl	800b2ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c0c4:	f001 fafe 	bl	800d6c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c0c8:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <prvAddNewTaskToReadyList+0xcc>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00e      	beq.n	800c0ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c0d0:	4b0a      	ldr	r3, [pc, #40]	; (800c0fc <prvAddNewTaskToReadyList+0xc8>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d207      	bcs.n	800c0ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c0de:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <prvAddNewTaskToReadyList+0xdc>)
 800c0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0ee:	bf00      	nop
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000ce0 	.word	0x20000ce0
 800c0fc:	2000080c 	.word	0x2000080c
 800c100:	20000cec 	.word	0x20000cec
 800c104:	20000cfc 	.word	0x20000cfc
 800c108:	20000ce8 	.word	0x20000ce8
 800c10c:	20000810 	.word	0x20000810
 800c110:	e000ed04 	.word	0xe000ed04

0800c114 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c114:	b580      	push	{r7, lr}
 800c116:	b08a      	sub	sp, #40	; 0x28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c11e:	2300      	movs	r3, #0
 800c120:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <vTaskDelayUntil+0x2a>
	__asm volatile
 800c128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	617b      	str	r3, [r7, #20]
}
 800c13a:	bf00      	nop
 800c13c:	e7fe      	b.n	800c13c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <vTaskDelayUntil+0x46>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	613b      	str	r3, [r7, #16]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c15a:	4b2a      	ldr	r3, [pc, #168]	; (800c204 <vTaskDelayUntil+0xf0>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00a      	beq.n	800c178 <vTaskDelayUntil+0x64>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	60fb      	str	r3, [r7, #12]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c178:	f000 f8e4 	bl	800c344 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c17c:	4b22      	ldr	r3, [pc, #136]	; (800c208 <vTaskDelayUntil+0xf4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	4413      	add	r3, r2
 800c18a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6a3a      	ldr	r2, [r7, #32]
 800c192:	429a      	cmp	r2, r3
 800c194:	d20b      	bcs.n	800c1ae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69fa      	ldr	r2, [r7, #28]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d211      	bcs.n	800c1c4 <vTaskDelayUntil+0xb0>
 800c1a0:	69fa      	ldr	r2, [r7, #28]
 800c1a2:	6a3b      	ldr	r3, [r7, #32]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d90d      	bls.n	800c1c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ac:	e00a      	b.n	800c1c4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69fa      	ldr	r2, [r7, #28]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d303      	bcc.n	800c1c0 <vTaskDelayUntil+0xac>
 800c1b8:	69fa      	ldr	r2, [r7, #28]
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d901      	bls.n	800c1c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	69fa      	ldr	r2, [r7, #28]
 800c1c8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d006      	beq.n	800c1de <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c1d0:	69fa      	ldr	r2, [r7, #28]
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fd75 	bl	800ccc8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c1de:	f000 f8bf 	bl	800c360 <xTaskResumeAll>
 800c1e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d107      	bne.n	800c1fa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c1ea:	4b08      	ldr	r3, [pc, #32]	; (800c20c <vTaskDelayUntil+0xf8>)
 800c1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f0:	601a      	str	r2, [r3, #0]
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1fa:	bf00      	nop
 800c1fc:	3728      	adds	r7, #40	; 0x28
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20000d08 	.word	0x20000d08
 800c208:	20000ce4 	.word	0x20000ce4
 800c20c:	e000ed04 	.word	0xe000ed04

0800c210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d017      	beq.n	800c252 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c222:	4b13      	ldr	r3, [pc, #76]	; (800c270 <vTaskDelay+0x60>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00a      	beq.n	800c240 <vTaskDelay+0x30>
	__asm volatile
 800c22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	60bb      	str	r3, [r7, #8]
}
 800c23c:	bf00      	nop
 800c23e:	e7fe      	b.n	800c23e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c240:	f000 f880 	bl	800c344 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c244:	2100      	movs	r1, #0
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fd3e 	bl	800ccc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c24c:	f000 f888 	bl	800c360 <xTaskResumeAll>
 800c250:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d107      	bne.n	800c268 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c258:	4b06      	ldr	r3, [pc, #24]	; (800c274 <vTaskDelay+0x64>)
 800c25a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25e:	601a      	str	r2, [r3, #0]
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c268:	bf00      	nop
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	20000d08 	.word	0x20000d08
 800c274:	e000ed04 	.word	0xe000ed04

0800c278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b08a      	sub	sp, #40	; 0x28
 800c27c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c27e:	2300      	movs	r3, #0
 800c280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c286:	463a      	mov	r2, r7
 800c288:	1d39      	adds	r1, r7, #4
 800c28a:	f107 0308 	add.w	r3, r7, #8
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fe fe88 	bl	800afa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	9202      	str	r2, [sp, #8]
 800c29c:	9301      	str	r3, [sp, #4]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	460a      	mov	r2, r1
 800c2a6:	4921      	ldr	r1, [pc, #132]	; (800c32c <vTaskStartScheduler+0xb4>)
 800c2a8:	4821      	ldr	r0, [pc, #132]	; (800c330 <vTaskStartScheduler+0xb8>)
 800c2aa:	f7ff fd91 	bl	800bdd0 <xTaskCreateStatic>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	4a20      	ldr	r2, [pc, #128]	; (800c334 <vTaskStartScheduler+0xbc>)
 800c2b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c2b4:	4b1f      	ldr	r3, [pc, #124]	; (800c334 <vTaskStartScheduler+0xbc>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	617b      	str	r3, [r7, #20]
 800c2c0:	e001      	b.n	800c2c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d102      	bne.n	800c2d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c2cc:	f000 fd50 	bl	800cd70 <xTimerCreateTimerTask>
 800c2d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d116      	bne.n	800c306 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	613b      	str	r3, [r7, #16]
}
 800c2ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2ec:	4b12      	ldr	r3, [pc, #72]	; (800c338 <vTaskStartScheduler+0xc0>)
 800c2ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2f4:	4b11      	ldr	r3, [pc, #68]	; (800c33c <vTaskStartScheduler+0xc4>)
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <vTaskStartScheduler+0xc8>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c300:	f001 f90e 	bl	800d520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c304:	e00e      	b.n	800c324 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c30c:	d10a      	bne.n	800c324 <vTaskStartScheduler+0xac>
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	60fb      	str	r3, [r7, #12]
}
 800c320:	bf00      	nop
 800c322:	e7fe      	b.n	800c322 <vTaskStartScheduler+0xaa>
}
 800c324:	bf00      	nop
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	0800ff5c 	.word	0x0800ff5c
 800c330:	0800c9d5 	.word	0x0800c9d5
 800c334:	20000d04 	.word	0x20000d04
 800c338:	20000d00 	.word	0x20000d00
 800c33c:	20000cec 	.word	0x20000cec
 800c340:	20000ce4 	.word	0x20000ce4

0800c344 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c344:	b480      	push	{r7}
 800c346:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c348:	4b04      	ldr	r3, [pc, #16]	; (800c35c <vTaskSuspendAll+0x18>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3301      	adds	r3, #1
 800c34e:	4a03      	ldr	r2, [pc, #12]	; (800c35c <vTaskSuspendAll+0x18>)
 800c350:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c352:	bf00      	nop
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	20000d08 	.word	0x20000d08

0800c360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c36a:	2300      	movs	r3, #0
 800c36c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c36e:	4b42      	ldr	r3, [pc, #264]	; (800c478 <xTaskResumeAll+0x118>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10a      	bne.n	800c38c <xTaskResumeAll+0x2c>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	603b      	str	r3, [r7, #0]
}
 800c388:	bf00      	nop
 800c38a:	e7fe      	b.n	800c38a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c38c:	f001 f96a 	bl	800d664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c390:	4b39      	ldr	r3, [pc, #228]	; (800c478 <xTaskResumeAll+0x118>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	3b01      	subs	r3, #1
 800c396:	4a38      	ldr	r2, [pc, #224]	; (800c478 <xTaskResumeAll+0x118>)
 800c398:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c39a:	4b37      	ldr	r3, [pc, #220]	; (800c478 <xTaskResumeAll+0x118>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d162      	bne.n	800c468 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3a2:	4b36      	ldr	r3, [pc, #216]	; (800c47c <xTaskResumeAll+0x11c>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d05e      	beq.n	800c468 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3aa:	e02f      	b.n	800c40c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ac:	4b34      	ldr	r3, [pc, #208]	; (800c480 <xTaskResumeAll+0x120>)
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3318      	adds	r3, #24
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fe fff3 	bl	800b3a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fe ffee 	bl	800b3a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3cc:	4b2d      	ldr	r3, [pc, #180]	; (800c484 <xTaskResumeAll+0x124>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d903      	bls.n	800c3dc <xTaskResumeAll+0x7c>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d8:	4a2a      	ldr	r2, [pc, #168]	; (800c484 <xTaskResumeAll+0x124>)
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4a27      	ldr	r2, [pc, #156]	; (800c488 <xTaskResumeAll+0x128>)
 800c3ea:	441a      	add	r2, r3
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	3304      	adds	r3, #4
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	f7fe ff79 	bl	800b2ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3fc:	4b23      	ldr	r3, [pc, #140]	; (800c48c <xTaskResumeAll+0x12c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c402:	429a      	cmp	r2, r3
 800c404:	d302      	bcc.n	800c40c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c406:	4b22      	ldr	r3, [pc, #136]	; (800c490 <xTaskResumeAll+0x130>)
 800c408:	2201      	movs	r2, #1
 800c40a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c40c:	4b1c      	ldr	r3, [pc, #112]	; (800c480 <xTaskResumeAll+0x120>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1cb      	bne.n	800c3ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c41a:	f000 fb91 	bl	800cb40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c41e:	4b1d      	ldr	r3, [pc, #116]	; (800c494 <xTaskResumeAll+0x134>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d010      	beq.n	800c44c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c42a:	f000 f847 	bl	800c4bc <xTaskIncrementTick>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c434:	4b16      	ldr	r3, [pc, #88]	; (800c490 <xTaskResumeAll+0x130>)
 800c436:	2201      	movs	r2, #1
 800c438:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1f1      	bne.n	800c42a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c446:	4b13      	ldr	r3, [pc, #76]	; (800c494 <xTaskResumeAll+0x134>)
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c44c:	4b10      	ldr	r3, [pc, #64]	; (800c490 <xTaskResumeAll+0x130>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d009      	beq.n	800c468 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c454:	2301      	movs	r3, #1
 800c456:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c458:	4b0f      	ldr	r3, [pc, #60]	; (800c498 <xTaskResumeAll+0x138>)
 800c45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c45e:	601a      	str	r2, [r3, #0]
 800c460:	f3bf 8f4f 	dsb	sy
 800c464:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c468:	f001 f92c 	bl	800d6c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c46c:	68bb      	ldr	r3, [r7, #8]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20000d08 	.word	0x20000d08
 800c47c:	20000ce0 	.word	0x20000ce0
 800c480:	20000ca0 	.word	0x20000ca0
 800c484:	20000ce8 	.word	0x20000ce8
 800c488:	20000810 	.word	0x20000810
 800c48c:	2000080c 	.word	0x2000080c
 800c490:	20000cf4 	.word	0x20000cf4
 800c494:	20000cf0 	.word	0x20000cf0
 800c498:	e000ed04 	.word	0xe000ed04

0800c49c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c4a2:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <xTaskGetTickCount+0x1c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4a8:	687b      	ldr	r3, [r7, #4]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	20000ce4 	.word	0x20000ce4

0800c4bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4c6:	4b4f      	ldr	r3, [pc, #316]	; (800c604 <xTaskIncrementTick+0x148>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f040 808f 	bne.w	800c5ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4d0:	4b4d      	ldr	r3, [pc, #308]	; (800c608 <xTaskIncrementTick+0x14c>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4d8:	4a4b      	ldr	r2, [pc, #300]	; (800c608 <xTaskIncrementTick+0x14c>)
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d120      	bne.n	800c526 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4e4:	4b49      	ldr	r3, [pc, #292]	; (800c60c <xTaskIncrementTick+0x150>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00a      	beq.n	800c504 <xTaskIncrementTick+0x48>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	603b      	str	r3, [r7, #0]
}
 800c500:	bf00      	nop
 800c502:	e7fe      	b.n	800c502 <xTaskIncrementTick+0x46>
 800c504:	4b41      	ldr	r3, [pc, #260]	; (800c60c <xTaskIncrementTick+0x150>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	60fb      	str	r3, [r7, #12]
 800c50a:	4b41      	ldr	r3, [pc, #260]	; (800c610 <xTaskIncrementTick+0x154>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a3f      	ldr	r2, [pc, #252]	; (800c60c <xTaskIncrementTick+0x150>)
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	4a3f      	ldr	r2, [pc, #252]	; (800c610 <xTaskIncrementTick+0x154>)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	4b3e      	ldr	r3, [pc, #248]	; (800c614 <xTaskIncrementTick+0x158>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3301      	adds	r3, #1
 800c51e:	4a3d      	ldr	r2, [pc, #244]	; (800c614 <xTaskIncrementTick+0x158>)
 800c520:	6013      	str	r3, [r2, #0]
 800c522:	f000 fb0d 	bl	800cb40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c526:	4b3c      	ldr	r3, [pc, #240]	; (800c618 <xTaskIncrementTick+0x15c>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d349      	bcc.n	800c5c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c530:	4b36      	ldr	r3, [pc, #216]	; (800c60c <xTaskIncrementTick+0x150>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d104      	bne.n	800c544 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c53a:	4b37      	ldr	r3, [pc, #220]	; (800c618 <xTaskIncrementTick+0x15c>)
 800c53c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c540:	601a      	str	r2, [r3, #0]
					break;
 800c542:	e03f      	b.n	800c5c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c544:	4b31      	ldr	r3, [pc, #196]	; (800c60c <xTaskIncrementTick+0x150>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c554:	693a      	ldr	r2, [r7, #16]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d203      	bcs.n	800c564 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c55c:	4a2e      	ldr	r2, [pc, #184]	; (800c618 <xTaskIncrementTick+0x15c>)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c562:	e02f      	b.n	800c5c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	3304      	adds	r3, #4
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fe ff1b 	bl	800b3a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c572:	2b00      	cmp	r3, #0
 800c574:	d004      	beq.n	800c580 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	3318      	adds	r3, #24
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fe ff12 	bl	800b3a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c584:	4b25      	ldr	r3, [pc, #148]	; (800c61c <xTaskIncrementTick+0x160>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d903      	bls.n	800c594 <xTaskIncrementTick+0xd8>
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c590:	4a22      	ldr	r2, [pc, #136]	; (800c61c <xTaskIncrementTick+0x160>)
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c598:	4613      	mov	r3, r2
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4413      	add	r3, r2
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	4a1f      	ldr	r2, [pc, #124]	; (800c620 <xTaskIncrementTick+0x164>)
 800c5a2:	441a      	add	r2, r3
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	f7fe fe9d 	bl	800b2ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b4:	4b1b      	ldr	r3, [pc, #108]	; (800c624 <xTaskIncrementTick+0x168>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d3b8      	bcc.n	800c530 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5c2:	e7b5      	b.n	800c530 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5c4:	4b17      	ldr	r3, [pc, #92]	; (800c624 <xTaskIncrementTick+0x168>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ca:	4915      	ldr	r1, [pc, #84]	; (800c620 <xTaskIncrementTick+0x164>)
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4413      	add	r3, r2
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	440b      	add	r3, r1
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d901      	bls.n	800c5e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c5e0:	4b11      	ldr	r3, [pc, #68]	; (800c628 <xTaskIncrementTick+0x16c>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d007      	beq.n	800c5f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	617b      	str	r3, [r7, #20]
 800c5ec:	e004      	b.n	800c5f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <xTaskIncrementTick+0x170>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	4a0d      	ldr	r2, [pc, #52]	; (800c62c <xTaskIncrementTick+0x170>)
 800c5f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c5f8:	697b      	ldr	r3, [r7, #20]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3718      	adds	r7, #24
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	20000d08 	.word	0x20000d08
 800c608:	20000ce4 	.word	0x20000ce4
 800c60c:	20000c98 	.word	0x20000c98
 800c610:	20000c9c 	.word	0x20000c9c
 800c614:	20000cf8 	.word	0x20000cf8
 800c618:	20000d00 	.word	0x20000d00
 800c61c:	20000ce8 	.word	0x20000ce8
 800c620:	20000810 	.word	0x20000810
 800c624:	2000080c 	.word	0x2000080c
 800c628:	20000cf4 	.word	0x20000cf4
 800c62c:	20000cf0 	.word	0x20000cf0

0800c630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c636:	4b28      	ldr	r3, [pc, #160]	; (800c6d8 <vTaskSwitchContext+0xa8>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d003      	beq.n	800c646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c63e:	4b27      	ldr	r3, [pc, #156]	; (800c6dc <vTaskSwitchContext+0xac>)
 800c640:	2201      	movs	r2, #1
 800c642:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c644:	e041      	b.n	800c6ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c646:	4b25      	ldr	r3, [pc, #148]	; (800c6dc <vTaskSwitchContext+0xac>)
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c64c:	4b24      	ldr	r3, [pc, #144]	; (800c6e0 <vTaskSwitchContext+0xb0>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	60fb      	str	r3, [r7, #12]
 800c652:	e010      	b.n	800c676 <vTaskSwitchContext+0x46>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10a      	bne.n	800c670 <vTaskSwitchContext+0x40>
	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	607b      	str	r3, [r7, #4]
}
 800c66c:	bf00      	nop
 800c66e:	e7fe      	b.n	800c66e <vTaskSwitchContext+0x3e>
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	3b01      	subs	r3, #1
 800c674:	60fb      	str	r3, [r7, #12]
 800c676:	491b      	ldr	r1, [pc, #108]	; (800c6e4 <vTaskSwitchContext+0xb4>)
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	4613      	mov	r3, r2
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	440b      	add	r3, r1
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d0e4      	beq.n	800c654 <vTaskSwitchContext+0x24>
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	4613      	mov	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	4a13      	ldr	r2, [pc, #76]	; (800c6e4 <vTaskSwitchContext+0xb4>)
 800c696:	4413      	add	r3, r2
 800c698:	60bb      	str	r3, [r7, #8]
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	605a      	str	r2, [r3, #4]
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	685a      	ldr	r2, [r3, #4]
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	3308      	adds	r3, #8
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d104      	bne.n	800c6ba <vTaskSwitchContext+0x8a>
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	685a      	ldr	r2, [r3, #4]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	605a      	str	r2, [r3, #4]
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	4a09      	ldr	r2, [pc, #36]	; (800c6e8 <vTaskSwitchContext+0xb8>)
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	4a06      	ldr	r2, [pc, #24]	; (800c6e0 <vTaskSwitchContext+0xb0>)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6013      	str	r3, [r2, #0]
}
 800c6ca:	bf00      	nop
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	20000d08 	.word	0x20000d08
 800c6dc:	20000cf4 	.word	0x20000cf4
 800c6e0:	20000ce8 	.word	0x20000ce8
 800c6e4:	20000810 	.word	0x20000810
 800c6e8:	2000080c 	.word	0x2000080c

0800c6ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10a      	bne.n	800c712 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	f383 8811 	msr	BASEPRI, r3
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	60fb      	str	r3, [r7, #12]
}
 800c70e:	bf00      	nop
 800c710:	e7fe      	b.n	800c710 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c712:	4b07      	ldr	r3, [pc, #28]	; (800c730 <vTaskPlaceOnEventList+0x44>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3318      	adds	r3, #24
 800c718:	4619      	mov	r1, r3
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7fe fe09 	bl	800b332 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c720:	2101      	movs	r1, #1
 800c722:	6838      	ldr	r0, [r7, #0]
 800c724:	f000 fad0 	bl	800ccc8 <prvAddCurrentTaskToDelayedList>
}
 800c728:	bf00      	nop
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	2000080c 	.word	0x2000080c

0800c734 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10a      	bne.n	800c75c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	617b      	str	r3, [r7, #20]
}
 800c758:	bf00      	nop
 800c75a:	e7fe      	b.n	800c75a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800c75c:	4b11      	ldr	r3, [pc, #68]	; (800c7a4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10a      	bne.n	800c77a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	613b      	str	r3, [r7, #16]
}
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c77a:	4b0b      	ldr	r3, [pc, #44]	; (800c7a8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c784:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c786:	4b08      	ldr	r3, [pc, #32]	; (800c7a8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3318      	adds	r3, #24
 800c78c:	4619      	mov	r1, r3
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f7fe fdab 	bl	800b2ea <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c794:	2101      	movs	r1, #1
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fa96 	bl	800ccc8 <prvAddCurrentTaskToDelayedList>
}
 800c79c:	bf00      	nop
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	20000d08 	.word	0x20000d08
 800c7a8:	2000080c 	.word	0x2000080c

0800c7ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10a      	bne.n	800c7d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	617b      	str	r3, [r7, #20]
}
 800c7d0:	bf00      	nop
 800c7d2:	e7fe      	b.n	800c7d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7d4:	4b0a      	ldr	r3, [pc, #40]	; (800c800 <vTaskPlaceOnEventListRestricted+0x54>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	3318      	adds	r3, #24
 800c7da:	4619      	mov	r1, r3
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f7fe fd84 	bl	800b2ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c7e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	68b8      	ldr	r0, [r7, #8]
 800c7f2:	f000 fa69 	bl	800ccc8 <prvAddCurrentTaskToDelayedList>
	}
 800c7f6:	bf00      	nop
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	2000080c 	.word	0x2000080c

0800c804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d10a      	bne.n	800c830 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81e:	f383 8811 	msr	BASEPRI, r3
 800c822:	f3bf 8f6f 	isb	sy
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	60fb      	str	r3, [r7, #12]
}
 800c82c:	bf00      	nop
 800c82e:	e7fe      	b.n	800c82e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	3318      	adds	r3, #24
 800c834:	4618      	mov	r0, r3
 800c836:	f7fe fdb5 	bl	800b3a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c83a:	4b1e      	ldr	r3, [pc, #120]	; (800c8b4 <xTaskRemoveFromEventList+0xb0>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d11d      	bne.n	800c87e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	3304      	adds	r3, #4
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe fdac 	bl	800b3a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c850:	4b19      	ldr	r3, [pc, #100]	; (800c8b8 <xTaskRemoveFromEventList+0xb4>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	429a      	cmp	r2, r3
 800c856:	d903      	bls.n	800c860 <xTaskRemoveFromEventList+0x5c>
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85c:	4a16      	ldr	r2, [pc, #88]	; (800c8b8 <xTaskRemoveFromEventList+0xb4>)
 800c85e:	6013      	str	r3, [r2, #0]
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c864:	4613      	mov	r3, r2
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	4413      	add	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4a13      	ldr	r2, [pc, #76]	; (800c8bc <xTaskRemoveFromEventList+0xb8>)
 800c86e:	441a      	add	r2, r3
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	3304      	adds	r3, #4
 800c874:	4619      	mov	r1, r3
 800c876:	4610      	mov	r0, r2
 800c878:	f7fe fd37 	bl	800b2ea <vListInsertEnd>
 800c87c:	e005      	b.n	800c88a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	3318      	adds	r3, #24
 800c882:	4619      	mov	r1, r3
 800c884:	480e      	ldr	r0, [pc, #56]	; (800c8c0 <xTaskRemoveFromEventList+0xbc>)
 800c886:	f7fe fd30 	bl	800b2ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88e:	4b0d      	ldr	r3, [pc, #52]	; (800c8c4 <xTaskRemoveFromEventList+0xc0>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c894:	429a      	cmp	r2, r3
 800c896:	d905      	bls.n	800c8a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c898:	2301      	movs	r3, #1
 800c89a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c89c:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <xTaskRemoveFromEventList+0xc4>)
 800c89e:	2201      	movs	r2, #1
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	e001      	b.n	800c8a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8a8:	697b      	ldr	r3, [r7, #20]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3718      	adds	r7, #24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20000d08 	.word	0x20000d08
 800c8b8:	20000ce8 	.word	0x20000ce8
 800c8bc:	20000810 	.word	0x20000810
 800c8c0:	20000ca0 	.word	0x20000ca0
 800c8c4:	2000080c 	.word	0x2000080c
 800c8c8:	20000cf4 	.word	0x20000cf4

0800c8cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8d4:	4b06      	ldr	r3, [pc, #24]	; (800c8f0 <vTaskInternalSetTimeOutState+0x24>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8dc:	4b05      	ldr	r3, [pc, #20]	; (800c8f4 <vTaskInternalSetTimeOutState+0x28>)
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	605a      	str	r2, [r3, #4]
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	20000cf8 	.word	0x20000cf8
 800c8f4:	20000ce4 	.word	0x20000ce4

0800c8f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b088      	sub	sp, #32
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10a      	bne.n	800c91e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	613b      	str	r3, [r7, #16]
}
 800c91a:	bf00      	nop
 800c91c:	e7fe      	b.n	800c91c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10a      	bne.n	800c93a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	60fb      	str	r3, [r7, #12]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c93a:	f000 fe93 	bl	800d664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c93e:	4b1d      	ldr	r3, [pc, #116]	; (800c9b4 <xTaskCheckForTimeOut+0xbc>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	1ad3      	subs	r3, r2, r3
 800c94c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c956:	d102      	bne.n	800c95e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c958:	2300      	movs	r3, #0
 800c95a:	61fb      	str	r3, [r7, #28]
 800c95c:	e023      	b.n	800c9a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <xTaskCheckForTimeOut+0xc0>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d007      	beq.n	800c97a <xTaskCheckForTimeOut+0x82>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	429a      	cmp	r2, r3
 800c972:	d302      	bcc.n	800c97a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c974:	2301      	movs	r3, #1
 800c976:	61fb      	str	r3, [r7, #28]
 800c978:	e015      	b.n	800c9a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	429a      	cmp	r2, r3
 800c982:	d20b      	bcs.n	800c99c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	1ad2      	subs	r2, r2, r3
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7ff ff9b 	bl	800c8cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c996:	2300      	movs	r3, #0
 800c998:	61fb      	str	r3, [r7, #28]
 800c99a:	e004      	b.n	800c9a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9a6:	f000 fe8d 	bl	800d6c4 <vPortExitCritical>

	return xReturn;
 800c9aa:	69fb      	ldr	r3, [r7, #28]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3720      	adds	r7, #32
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	20000ce4 	.word	0x20000ce4
 800c9b8:	20000cf8 	.word	0x20000cf8

0800c9bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9bc:	b480      	push	{r7}
 800c9be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9c0:	4b03      	ldr	r3, [pc, #12]	; (800c9d0 <vTaskMissedYield+0x14>)
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	601a      	str	r2, [r3, #0]
}
 800c9c6:	bf00      	nop
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr
 800c9d0:	20000cf4 	.word	0x20000cf4

0800c9d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9dc:	f000 f852 	bl	800ca84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9e0:	4b06      	ldr	r3, [pc, #24]	; (800c9fc <prvIdleTask+0x28>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d9f9      	bls.n	800c9dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9e8:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <prvIdleTask+0x2c>)
 800c9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9f8:	e7f0      	b.n	800c9dc <prvIdleTask+0x8>
 800c9fa:	bf00      	nop
 800c9fc:	20000810 	.word	0x20000810
 800ca00:	e000ed04 	.word	0xe000ed04

0800ca04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	607b      	str	r3, [r7, #4]
 800ca0e:	e00c      	b.n	800ca2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	4613      	mov	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4a12      	ldr	r2, [pc, #72]	; (800ca64 <prvInitialiseTaskLists+0x60>)
 800ca1c:	4413      	add	r3, r2
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe fc36 	bl	800b290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3301      	adds	r3, #1
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b37      	cmp	r3, #55	; 0x37
 800ca2e:	d9ef      	bls.n	800ca10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca30:	480d      	ldr	r0, [pc, #52]	; (800ca68 <prvInitialiseTaskLists+0x64>)
 800ca32:	f7fe fc2d 	bl	800b290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca36:	480d      	ldr	r0, [pc, #52]	; (800ca6c <prvInitialiseTaskLists+0x68>)
 800ca38:	f7fe fc2a 	bl	800b290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca3c:	480c      	ldr	r0, [pc, #48]	; (800ca70 <prvInitialiseTaskLists+0x6c>)
 800ca3e:	f7fe fc27 	bl	800b290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca42:	480c      	ldr	r0, [pc, #48]	; (800ca74 <prvInitialiseTaskLists+0x70>)
 800ca44:	f7fe fc24 	bl	800b290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca48:	480b      	ldr	r0, [pc, #44]	; (800ca78 <prvInitialiseTaskLists+0x74>)
 800ca4a:	f7fe fc21 	bl	800b290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca4e:	4b0b      	ldr	r3, [pc, #44]	; (800ca7c <prvInitialiseTaskLists+0x78>)
 800ca50:	4a05      	ldr	r2, [pc, #20]	; (800ca68 <prvInitialiseTaskLists+0x64>)
 800ca52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca54:	4b0a      	ldr	r3, [pc, #40]	; (800ca80 <prvInitialiseTaskLists+0x7c>)
 800ca56:	4a05      	ldr	r2, [pc, #20]	; (800ca6c <prvInitialiseTaskLists+0x68>)
 800ca58:	601a      	str	r2, [r3, #0]
}
 800ca5a:	bf00      	nop
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20000810 	.word	0x20000810
 800ca68:	20000c70 	.word	0x20000c70
 800ca6c:	20000c84 	.word	0x20000c84
 800ca70:	20000ca0 	.word	0x20000ca0
 800ca74:	20000cb4 	.word	0x20000cb4
 800ca78:	20000ccc 	.word	0x20000ccc
 800ca7c:	20000c98 	.word	0x20000c98
 800ca80:	20000c9c 	.word	0x20000c9c

0800ca84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca8a:	e019      	b.n	800cac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca8c:	f000 fdea 	bl	800d664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca90:	4b10      	ldr	r3, [pc, #64]	; (800cad4 <prvCheckTasksWaitingTermination+0x50>)
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe fc81 	bl	800b3a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800caa2:	4b0d      	ldr	r3, [pc, #52]	; (800cad8 <prvCheckTasksWaitingTermination+0x54>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	4a0b      	ldr	r2, [pc, #44]	; (800cad8 <prvCheckTasksWaitingTermination+0x54>)
 800caaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800caac:	4b0b      	ldr	r3, [pc, #44]	; (800cadc <prvCheckTasksWaitingTermination+0x58>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	4a0a      	ldr	r2, [pc, #40]	; (800cadc <prvCheckTasksWaitingTermination+0x58>)
 800cab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cab6:	f000 fe05 	bl	800d6c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f810 	bl	800cae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cac0:	4b06      	ldr	r3, [pc, #24]	; (800cadc <prvCheckTasksWaitingTermination+0x58>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1e1      	bne.n	800ca8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	20000cb4 	.word	0x20000cb4
 800cad8:	20000ce0 	.word	0x20000ce0
 800cadc:	20000cc8 	.word	0x20000cc8

0800cae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d108      	bne.n	800cb04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 ffa2 	bl	800da40 <vPortFree>
				vPortFree( pxTCB );
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 ff9f 	bl	800da40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb02:	e018      	b.n	800cb36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d103      	bne.n	800cb16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 ff96 	bl	800da40 <vPortFree>
	}
 800cb14:	e00f      	b.n	800cb36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d00a      	beq.n	800cb36 <prvDeleteTCB+0x56>
	__asm volatile
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	f383 8811 	msr	BASEPRI, r3
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	60fb      	str	r3, [r7, #12]
}
 800cb32:	bf00      	nop
 800cb34:	e7fe      	b.n	800cb34 <prvDeleteTCB+0x54>
	}
 800cb36:	bf00      	nop
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
	...

0800cb40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb46:	4b0c      	ldr	r3, [pc, #48]	; (800cb78 <prvResetNextTaskUnblockTime+0x38>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d104      	bne.n	800cb5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <prvResetNextTaskUnblockTime+0x3c>)
 800cb52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb58:	e008      	b.n	800cb6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb5a:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <prvResetNextTaskUnblockTime+0x38>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	4a04      	ldr	r2, [pc, #16]	; (800cb7c <prvResetNextTaskUnblockTime+0x3c>)
 800cb6a:	6013      	str	r3, [r2, #0]
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr
 800cb78:	20000c98 	.word	0x20000c98
 800cb7c:	20000d00 	.word	0x20000d00

0800cb80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb86:	4b0b      	ldr	r3, [pc, #44]	; (800cbb4 <xTaskGetSchedulerState+0x34>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d102      	bne.n	800cb94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	607b      	str	r3, [r7, #4]
 800cb92:	e008      	b.n	800cba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb94:	4b08      	ldr	r3, [pc, #32]	; (800cbb8 <xTaskGetSchedulerState+0x38>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d102      	bne.n	800cba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	607b      	str	r3, [r7, #4]
 800cba0:	e001      	b.n	800cba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cba2:	2300      	movs	r3, #0
 800cba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cba6:	687b      	ldr	r3, [r7, #4]
	}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	20000cec 	.word	0x20000cec
 800cbb8:	20000d08 	.word	0x20000d08

0800cbbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d056      	beq.n	800cc80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cbd2:	4b2e      	ldr	r3, [pc, #184]	; (800cc8c <xTaskPriorityDisinherit+0xd0>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d00a      	beq.n	800cbf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	60fb      	str	r3, [r7, #12]
}
 800cbee:	bf00      	nop
 800cbf0:	e7fe      	b.n	800cbf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d10a      	bne.n	800cc10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	60bb      	str	r3, [r7, #8]
}
 800cc0c:	bf00      	nop
 800cc0e:	e7fe      	b.n	800cc0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc14:	1e5a      	subs	r2, r3, #1
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d02c      	beq.n	800cc80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d128      	bne.n	800cc80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	3304      	adds	r3, #4
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fe fbb6 	bl	800b3a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc50:	4b0f      	ldr	r3, [pc, #60]	; (800cc90 <xTaskPriorityDisinherit+0xd4>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d903      	bls.n	800cc60 <xTaskPriorityDisinherit+0xa4>
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5c:	4a0c      	ldr	r2, [pc, #48]	; (800cc90 <xTaskPriorityDisinherit+0xd4>)
 800cc5e:	6013      	str	r3, [r2, #0]
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc64:	4613      	mov	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4a09      	ldr	r2, [pc, #36]	; (800cc94 <xTaskPriorityDisinherit+0xd8>)
 800cc6e:	441a      	add	r2, r3
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	3304      	adds	r3, #4
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	f7fe fb37 	bl	800b2ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc80:	697b      	ldr	r3, [r7, #20]
	}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	2000080c 	.word	0x2000080c
 800cc90:	20000ce8 	.word	0x20000ce8
 800cc94:	20000810 	.word	0x20000810

0800cc98 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800cc9e:	4b09      	ldr	r3, [pc, #36]	; (800ccc4 <uxTaskResetEventItemValue+0x2c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	699b      	ldr	r3, [r3, #24]
 800cca4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cca6:	4b07      	ldr	r3, [pc, #28]	; (800ccc4 <uxTaskResetEventItemValue+0x2c>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccac:	4b05      	ldr	r3, [pc, #20]	; (800ccc4 <uxTaskResetEventItemValue+0x2c>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ccb4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ccb6:	687b      	ldr	r3, [r7, #4]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr
 800ccc4:	2000080c 	.word	0x2000080c

0800ccc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ccd2:	4b21      	ldr	r3, [pc, #132]	; (800cd58 <prvAddCurrentTaskToDelayedList+0x90>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccd8:	4b20      	ldr	r3, [pc, #128]	; (800cd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3304      	adds	r3, #4
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fe fb60 	bl	800b3a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccea:	d10a      	bne.n	800cd02 <prvAddCurrentTaskToDelayedList+0x3a>
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d007      	beq.n	800cd02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccf2:	4b1a      	ldr	r3, [pc, #104]	; (800cd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	3304      	adds	r3, #4
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	4819      	ldr	r0, [pc, #100]	; (800cd60 <prvAddCurrentTaskToDelayedList+0x98>)
 800ccfc:	f7fe faf5 	bl	800b2ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd00:	e026      	b.n	800cd50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4413      	add	r3, r2
 800cd08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd0a:	4b14      	ldr	r3, [pc, #80]	; (800cd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d209      	bcs.n	800cd2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd1a:	4b12      	ldr	r3, [pc, #72]	; (800cd64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	4b0f      	ldr	r3, [pc, #60]	; (800cd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3304      	adds	r3, #4
 800cd24:	4619      	mov	r1, r3
 800cd26:	4610      	mov	r0, r2
 800cd28:	f7fe fb03 	bl	800b332 <vListInsert>
}
 800cd2c:	e010      	b.n	800cd50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd2e:	4b0e      	ldr	r3, [pc, #56]	; (800cd68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	3304      	adds	r3, #4
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	f7fe faf9 	bl	800b332 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd40:	4b0a      	ldr	r3, [pc, #40]	; (800cd6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68ba      	ldr	r2, [r7, #8]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d202      	bcs.n	800cd50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cd4a:	4a08      	ldr	r2, [pc, #32]	; (800cd6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	6013      	str	r3, [r2, #0]
}
 800cd50:	bf00      	nop
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	20000ce4 	.word	0x20000ce4
 800cd5c:	2000080c 	.word	0x2000080c
 800cd60:	20000ccc 	.word	0x20000ccc
 800cd64:	20000c9c 	.word	0x20000c9c
 800cd68:	20000c98 	.word	0x20000c98
 800cd6c:	20000d00 	.word	0x20000d00

0800cd70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b08a      	sub	sp, #40	; 0x28
 800cd74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd76:	2300      	movs	r3, #0
 800cd78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd7a:	f000 fb07 	bl	800d38c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd7e:	4b1c      	ldr	r3, [pc, #112]	; (800cdf0 <xTimerCreateTimerTask+0x80>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d021      	beq.n	800cdca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd8e:	1d3a      	adds	r2, r7, #4
 800cd90:	f107 0108 	add.w	r1, r7, #8
 800cd94:	f107 030c 	add.w	r3, r7, #12
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fe f91d 	bl	800afd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	9202      	str	r2, [sp, #8]
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	2302      	movs	r3, #2
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	2300      	movs	r3, #0
 800cdae:	460a      	mov	r2, r1
 800cdb0:	4910      	ldr	r1, [pc, #64]	; (800cdf4 <xTimerCreateTimerTask+0x84>)
 800cdb2:	4811      	ldr	r0, [pc, #68]	; (800cdf8 <xTimerCreateTimerTask+0x88>)
 800cdb4:	f7ff f80c 	bl	800bdd0 <xTaskCreateStatic>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	4a10      	ldr	r2, [pc, #64]	; (800cdfc <xTimerCreateTimerTask+0x8c>)
 800cdbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cdbe:	4b0f      	ldr	r3, [pc, #60]	; (800cdfc <xTimerCreateTimerTask+0x8c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10a      	bne.n	800cde6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	613b      	str	r3, [r7, #16]
}
 800cde2:	bf00      	nop
 800cde4:	e7fe      	b.n	800cde4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cde6:	697b      	ldr	r3, [r7, #20]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	20000d3c 	.word	0x20000d3c
 800cdf4:	0800ff64 	.word	0x0800ff64
 800cdf8:	0800cf35 	.word	0x0800cf35
 800cdfc:	20000d40 	.word	0x20000d40

0800ce00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b08a      	sub	sp, #40	; 0x28
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
 800ce0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10a      	bne.n	800ce2e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ce18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1c:	f383 8811 	msr	BASEPRI, r3
 800ce20:	f3bf 8f6f 	isb	sy
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	623b      	str	r3, [r7, #32]
}
 800ce2a:	bf00      	nop
 800ce2c:	e7fe      	b.n	800ce2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce2e:	4b1a      	ldr	r3, [pc, #104]	; (800ce98 <xTimerGenericCommand+0x98>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d02a      	beq.n	800ce8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	2b05      	cmp	r3, #5
 800ce46:	dc18      	bgt.n	800ce7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce48:	f7ff fe9a 	bl	800cb80 <xTaskGetSchedulerState>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d109      	bne.n	800ce66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce52:	4b11      	ldr	r3, [pc, #68]	; (800ce98 <xTimerGenericCommand+0x98>)
 800ce54:	6818      	ldr	r0, [r3, #0]
 800ce56:	f107 0110 	add.w	r1, r7, #16
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce5e:	f7fe fbcf 	bl	800b600 <xQueueGenericSend>
 800ce62:	6278      	str	r0, [r7, #36]	; 0x24
 800ce64:	e012      	b.n	800ce8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce66:	4b0c      	ldr	r3, [pc, #48]	; (800ce98 <xTimerGenericCommand+0x98>)
 800ce68:	6818      	ldr	r0, [r3, #0]
 800ce6a:	f107 0110 	add.w	r1, r7, #16
 800ce6e:	2300      	movs	r3, #0
 800ce70:	2200      	movs	r2, #0
 800ce72:	f7fe fbc5 	bl	800b600 <xQueueGenericSend>
 800ce76:	6278      	str	r0, [r7, #36]	; 0x24
 800ce78:	e008      	b.n	800ce8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce7a:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <xTimerGenericCommand+0x98>)
 800ce7c:	6818      	ldr	r0, [r3, #0]
 800ce7e:	f107 0110 	add.w	r1, r7, #16
 800ce82:	2300      	movs	r3, #0
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	f7fe fcb9 	bl	800b7fc <xQueueGenericSendFromISR>
 800ce8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3728      	adds	r7, #40	; 0x28
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	20000d3c 	.word	0x20000d3c

0800ce9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b088      	sub	sp, #32
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cea6:	4b22      	ldr	r3, [pc, #136]	; (800cf30 <prvProcessExpiredTimer+0x94>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fe fa75 	bl	800b3a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cec0:	f003 0304 	and.w	r3, r3, #4
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d022      	beq.n	800cf0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	699a      	ldr	r2, [r3, #24]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	18d1      	adds	r1, r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	6978      	ldr	r0, [r7, #20]
 800ced6:	f000 f8d1 	bl	800d07c <prvInsertTimerInActiveList>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d01f      	beq.n	800cf20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cee0:	2300      	movs	r3, #0
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	2300      	movs	r3, #0
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	2100      	movs	r1, #0
 800ceea:	6978      	ldr	r0, [r7, #20]
 800ceec:	f7ff ff88 	bl	800ce00 <xTimerGenericCommand>
 800cef0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d113      	bne.n	800cf20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	60fb      	str	r3, [r7, #12]
}
 800cf0a:	bf00      	nop
 800cf0c:	e7fe      	b.n	800cf0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf14:	f023 0301 	bic.w	r3, r3, #1
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	6a1b      	ldr	r3, [r3, #32]
 800cf24:	6978      	ldr	r0, [r7, #20]
 800cf26:	4798      	blx	r3
}
 800cf28:	bf00      	nop
 800cf2a:	3718      	adds	r7, #24
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20000d34 	.word	0x20000d34

0800cf34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf3c:	f107 0308 	add.w	r3, r7, #8
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 f857 	bl	800cff4 <prvGetNextExpireTime>
 800cf46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f000 f803 	bl	800cf58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf52:	f000 f8d5 	bl	800d100 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf56:	e7f1      	b.n	800cf3c <prvTimerTask+0x8>

0800cf58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf62:	f7ff f9ef 	bl	800c344 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf66:	f107 0308 	add.w	r3, r7, #8
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f000 f866 	bl	800d03c <prvSampleTimeNow>
 800cf70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d130      	bne.n	800cfda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10a      	bne.n	800cf94 <prvProcessTimerOrBlockTask+0x3c>
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d806      	bhi.n	800cf94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf86:	f7ff f9eb 	bl	800c360 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf8a:	68f9      	ldr	r1, [r7, #12]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7ff ff85 	bl	800ce9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf92:	e024      	b.n	800cfde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d008      	beq.n	800cfac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf9a:	4b13      	ldr	r3, [pc, #76]	; (800cfe8 <prvProcessTimerOrBlockTask+0x90>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d101      	bne.n	800cfa8 <prvProcessTimerOrBlockTask+0x50>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e000      	b.n	800cfaa <prvProcessTimerOrBlockTask+0x52>
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cfac:	4b0f      	ldr	r3, [pc, #60]	; (800cfec <prvProcessTimerOrBlockTask+0x94>)
 800cfae:	6818      	ldr	r0, [r3, #0]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	683a      	ldr	r2, [r7, #0]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	f7fe fed5 	bl	800bd68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cfbe:	f7ff f9cf 	bl	800c360 <xTaskResumeAll>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10a      	bne.n	800cfde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cfc8:	4b09      	ldr	r3, [pc, #36]	; (800cff0 <prvProcessTimerOrBlockTask+0x98>)
 800cfca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfce:	601a      	str	r2, [r3, #0]
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	f3bf 8f6f 	isb	sy
}
 800cfd8:	e001      	b.n	800cfde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cfda:	f7ff f9c1 	bl	800c360 <xTaskResumeAll>
}
 800cfde:	bf00      	nop
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	20000d38 	.word	0x20000d38
 800cfec:	20000d3c 	.word	0x20000d3c
 800cff0:	e000ed04 	.word	0xe000ed04

0800cff4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cffc:	4b0e      	ldr	r3, [pc, #56]	; (800d038 <prvGetNextExpireTime+0x44>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d101      	bne.n	800d00a <prvGetNextExpireTime+0x16>
 800d006:	2201      	movs	r2, #1
 800d008:	e000      	b.n	800d00c <prvGetNextExpireTime+0x18>
 800d00a:	2200      	movs	r2, #0
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d105      	bne.n	800d024 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d018:	4b07      	ldr	r3, [pc, #28]	; (800d038 <prvGetNextExpireTime+0x44>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	60fb      	str	r3, [r7, #12]
 800d022:	e001      	b.n	800d028 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d024:	2300      	movs	r3, #0
 800d026:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d028:	68fb      	ldr	r3, [r7, #12]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	20000d34 	.word	0x20000d34

0800d03c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d044:	f7ff fa2a 	bl	800c49c <xTaskGetTickCount>
 800d048:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d04a:	4b0b      	ldr	r3, [pc, #44]	; (800d078 <prvSampleTimeNow+0x3c>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	429a      	cmp	r2, r3
 800d052:	d205      	bcs.n	800d060 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d054:	f000 f936 	bl	800d2c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	601a      	str	r2, [r3, #0]
 800d05e:	e002      	b.n	800d066 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d066:	4a04      	ldr	r2, [pc, #16]	; (800d078 <prvSampleTimeNow+0x3c>)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d06c:	68fb      	ldr	r3, [r7, #12]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	20000d44 	.word	0x20000d44

0800d07c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
 800d088:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d08a:	2300      	movs	r3, #0
 800d08c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d812      	bhi.n	800d0c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	1ad2      	subs	r2, r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	699b      	ldr	r3, [r3, #24]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d302      	bcc.n	800d0b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	617b      	str	r3, [r7, #20]
 800d0b4:	e01b      	b.n	800d0ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d0b6:	4b10      	ldr	r3, [pc, #64]	; (800d0f8 <prvInsertTimerInActiveList+0x7c>)
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	4619      	mov	r1, r3
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	f7fe f936 	bl	800b332 <vListInsert>
 800d0c6:	e012      	b.n	800d0ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d206      	bcs.n	800d0de <prvInsertTimerInActiveList+0x62>
 800d0d0:	68ba      	ldr	r2, [r7, #8]
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d302      	bcc.n	800d0de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	617b      	str	r3, [r7, #20]
 800d0dc:	e007      	b.n	800d0ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0de:	4b07      	ldr	r3, [pc, #28]	; (800d0fc <prvInsertTimerInActiveList+0x80>)
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	f7fe f922 	bl	800b332 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0ee:	697b      	ldr	r3, [r7, #20]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3718      	adds	r7, #24
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	20000d38 	.word	0x20000d38
 800d0fc:	20000d34 	.word	0x20000d34

0800d100 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b08e      	sub	sp, #56	; 0x38
 800d104:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d106:	e0ca      	b.n	800d29e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	da18      	bge.n	800d140 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d10e:	1d3b      	adds	r3, r7, #4
 800d110:	3304      	adds	r3, #4
 800d112:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10a      	bne.n	800d130 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	61fb      	str	r3, [r7, #28]
}
 800d12c:	bf00      	nop
 800d12e:	e7fe      	b.n	800d12e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d136:	6850      	ldr	r0, [r2, #4]
 800d138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d13a:	6892      	ldr	r2, [r2, #8]
 800d13c:	4611      	mov	r1, r2
 800d13e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	f2c0 80aa 	blt.w	800d29c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d004      	beq.n	800d15e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d156:	3304      	adds	r3, #4
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fe f923 	bl	800b3a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d15e:	463b      	mov	r3, r7
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff ff6b 	bl	800d03c <prvSampleTimeNow>
 800d166:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b09      	cmp	r3, #9
 800d16c:	f200 8097 	bhi.w	800d29e <prvProcessReceivedCommands+0x19e>
 800d170:	a201      	add	r2, pc, #4	; (adr r2, 800d178 <prvProcessReceivedCommands+0x78>)
 800d172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d176:	bf00      	nop
 800d178:	0800d1a1 	.word	0x0800d1a1
 800d17c:	0800d1a1 	.word	0x0800d1a1
 800d180:	0800d1a1 	.word	0x0800d1a1
 800d184:	0800d215 	.word	0x0800d215
 800d188:	0800d229 	.word	0x0800d229
 800d18c:	0800d273 	.word	0x0800d273
 800d190:	0800d1a1 	.word	0x0800d1a1
 800d194:	0800d1a1 	.word	0x0800d1a1
 800d198:	0800d215 	.word	0x0800d215
 800d19c:	0800d229 	.word	0x0800d229
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1a6:	f043 0301 	orr.w	r3, r3, #1
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	18d1      	adds	r1, r2, r3
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c0:	f7ff ff5c 	bl	800d07c <prvInsertTimerInActiveList>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d069      	beq.n	800d29e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1d8:	f003 0304 	and.w	r3, r3, #4
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d05e      	beq.n	800d29e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d1e0:	68ba      	ldr	r2, [r7, #8]
 800d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e4:	699b      	ldr	r3, [r3, #24]
 800d1e6:	441a      	add	r2, r3
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1f2:	f7ff fe05 	bl	800ce00 <xTimerGenericCommand>
 800d1f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d1f8:	6a3b      	ldr	r3, [r7, #32]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d14f      	bne.n	800d29e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	f383 8811 	msr	BASEPRI, r3
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	61bb      	str	r3, [r7, #24]
}
 800d210:	bf00      	nop
 800d212:	e7fe      	b.n	800d212 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d21a:	f023 0301 	bic.w	r3, r3, #1
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d226:	e03a      	b.n	800d29e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d22e:	f043 0301 	orr.w	r3, r3, #1
 800d232:	b2da      	uxtb	r2, r3
 800d234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d242:	699b      	ldr	r3, [r3, #24]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10a      	bne.n	800d25e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	f383 8811 	msr	BASEPRI, r3
 800d250:	f3bf 8f6f 	isb	sy
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	617b      	str	r3, [r7, #20]
}
 800d25a:	bf00      	nop
 800d25c:	e7fe      	b.n	800d25c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d260:	699a      	ldr	r2, [r3, #24]
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	18d1      	adds	r1, r2, r3
 800d266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26c:	f7ff ff06 	bl	800d07c <prvInsertTimerInActiveList>
					break;
 800d270:	e015      	b.n	800d29e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d278:	f003 0302 	and.w	r3, r3, #2
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d103      	bne.n	800d288 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d282:	f000 fbdd 	bl	800da40 <vPortFree>
 800d286:	e00a      	b.n	800d29e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d28e:	f023 0301 	bic.w	r3, r3, #1
 800d292:	b2da      	uxtb	r2, r3
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d29a:	e000      	b.n	800d29e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d29c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d29e:	4b08      	ldr	r3, [pc, #32]	; (800d2c0 <prvProcessReceivedCommands+0x1c0>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	1d39      	adds	r1, r7, #4
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe fb44 	bl	800b934 <xQueueReceive>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f47f af2a 	bne.w	800d108 <prvProcessReceivedCommands+0x8>
	}
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop
 800d2b8:	3730      	adds	r7, #48	; 0x30
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	20000d3c 	.word	0x20000d3c

0800d2c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2ca:	e048      	b.n	800d35e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2cc:	4b2d      	ldr	r3, [pc, #180]	; (800d384 <prvSwitchTimerLists+0xc0>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2d6:	4b2b      	ldr	r3, [pc, #172]	; (800d384 <prvSwitchTimerLists+0xc0>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe f85d 	bl	800b3a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2f8:	f003 0304 	and.w	r3, r3, #4
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d02e      	beq.n	800d35e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	4413      	add	r3, r2
 800d308:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d90e      	bls.n	800d330 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d31e:	4b19      	ldr	r3, [pc, #100]	; (800d384 <prvSwitchTimerLists+0xc0>)
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3304      	adds	r3, #4
 800d326:	4619      	mov	r1, r3
 800d328:	4610      	mov	r0, r2
 800d32a:	f7fe f802 	bl	800b332 <vListInsert>
 800d32e:	e016      	b.n	800d35e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d330:	2300      	movs	r3, #0
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	2300      	movs	r3, #0
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	2100      	movs	r1, #0
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7ff fd60 	bl	800ce00 <xTimerGenericCommand>
 800d340:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10a      	bne.n	800d35e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	603b      	str	r3, [r7, #0]
}
 800d35a:	bf00      	nop
 800d35c:	e7fe      	b.n	800d35c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d35e:	4b09      	ldr	r3, [pc, #36]	; (800d384 <prvSwitchTimerLists+0xc0>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d1b1      	bne.n	800d2cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d368:	4b06      	ldr	r3, [pc, #24]	; (800d384 <prvSwitchTimerLists+0xc0>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d36e:	4b06      	ldr	r3, [pc, #24]	; (800d388 <prvSwitchTimerLists+0xc4>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a04      	ldr	r2, [pc, #16]	; (800d384 <prvSwitchTimerLists+0xc0>)
 800d374:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d376:	4a04      	ldr	r2, [pc, #16]	; (800d388 <prvSwitchTimerLists+0xc4>)
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	6013      	str	r3, [r2, #0]
}
 800d37c:	bf00      	nop
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	20000d34 	.word	0x20000d34
 800d388:	20000d38 	.word	0x20000d38

0800d38c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d392:	f000 f967 	bl	800d664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d396:	4b15      	ldr	r3, [pc, #84]	; (800d3ec <prvCheckForValidListAndQueue+0x60>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d120      	bne.n	800d3e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d39e:	4814      	ldr	r0, [pc, #80]	; (800d3f0 <prvCheckForValidListAndQueue+0x64>)
 800d3a0:	f7fd ff76 	bl	800b290 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d3a4:	4813      	ldr	r0, [pc, #76]	; (800d3f4 <prvCheckForValidListAndQueue+0x68>)
 800d3a6:	f7fd ff73 	bl	800b290 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d3aa:	4b13      	ldr	r3, [pc, #76]	; (800d3f8 <prvCheckForValidListAndQueue+0x6c>)
 800d3ac:	4a10      	ldr	r2, [pc, #64]	; (800d3f0 <prvCheckForValidListAndQueue+0x64>)
 800d3ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d3b0:	4b12      	ldr	r3, [pc, #72]	; (800d3fc <prvCheckForValidListAndQueue+0x70>)
 800d3b2:	4a10      	ldr	r2, [pc, #64]	; (800d3f4 <prvCheckForValidListAndQueue+0x68>)
 800d3b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	4b11      	ldr	r3, [pc, #68]	; (800d400 <prvCheckForValidListAndQueue+0x74>)
 800d3bc:	4a11      	ldr	r2, [pc, #68]	; (800d404 <prvCheckForValidListAndQueue+0x78>)
 800d3be:	2110      	movs	r1, #16
 800d3c0:	200a      	movs	r0, #10
 800d3c2:	f7fe f881 	bl	800b4c8 <xQueueGenericCreateStatic>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	4a08      	ldr	r2, [pc, #32]	; (800d3ec <prvCheckForValidListAndQueue+0x60>)
 800d3ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d3cc:	4b07      	ldr	r3, [pc, #28]	; (800d3ec <prvCheckForValidListAndQueue+0x60>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d005      	beq.n	800d3e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d3d4:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <prvCheckForValidListAndQueue+0x60>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	490b      	ldr	r1, [pc, #44]	; (800d408 <prvCheckForValidListAndQueue+0x7c>)
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fc9a 	bl	800bd14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3e0:	f000 f970 	bl	800d6c4 <vPortExitCritical>
}
 800d3e4:	bf00      	nop
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	20000d3c 	.word	0x20000d3c
 800d3f0:	20000d0c 	.word	0x20000d0c
 800d3f4:	20000d20 	.word	0x20000d20
 800d3f8:	20000d34 	.word	0x20000d34
 800d3fc:	20000d38 	.word	0x20000d38
 800d400:	20000de8 	.word	0x20000de8
 800d404:	20000d48 	.word	0x20000d48
 800d408:	0800ff6c 	.word	0x0800ff6c

0800d40c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	3b04      	subs	r3, #4
 800d41c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3b04      	subs	r3, #4
 800d42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	f023 0201 	bic.w	r2, r3, #1
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	3b04      	subs	r3, #4
 800d43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d43c:	4a0c      	ldr	r2, [pc, #48]	; (800d470 <pxPortInitialiseStack+0x64>)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3b14      	subs	r3, #20
 800d446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3b04      	subs	r3, #4
 800d452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f06f 0202 	mvn.w	r2, #2
 800d45a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	3b20      	subs	r3, #32
 800d460:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d462:	68fb      	ldr	r3, [r7, #12]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3714      	adds	r7, #20
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr
 800d470:	0800d475 	.word	0x0800d475

0800d474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d47e:	4b12      	ldr	r3, [pc, #72]	; (800d4c8 <prvTaskExitError+0x54>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d486:	d00a      	beq.n	800d49e <prvTaskExitError+0x2a>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	60fb      	str	r3, [r7, #12]
}
 800d49a:	bf00      	nop
 800d49c:	e7fe      	b.n	800d49c <prvTaskExitError+0x28>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	60bb      	str	r3, [r7, #8]
}
 800d4b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d4b2:	bf00      	nop
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d0fc      	beq.n	800d4b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d4ba:	bf00      	nop
 800d4bc:	bf00      	nop
 800d4be:	3714      	adds	r7, #20
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	200000b4 	.word	0x200000b4
 800d4cc:	00000000 	.word	0x00000000

0800d4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <pxCurrentTCBConst2>)
 800d4d2:	6819      	ldr	r1, [r3, #0]
 800d4d4:	6808      	ldr	r0, [r1, #0]
 800d4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4da:	f380 8809 	msr	PSP, r0
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f04f 0000 	mov.w	r0, #0
 800d4e6:	f380 8811 	msr	BASEPRI, r0
 800d4ea:	4770      	bx	lr
 800d4ec:	f3af 8000 	nop.w

0800d4f0 <pxCurrentTCBConst2>:
 800d4f0:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop

0800d4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4f8:	4808      	ldr	r0, [pc, #32]	; (800d51c <prvPortStartFirstTask+0x24>)
 800d4fa:	6800      	ldr	r0, [r0, #0]
 800d4fc:	6800      	ldr	r0, [r0, #0]
 800d4fe:	f380 8808 	msr	MSP, r0
 800d502:	f04f 0000 	mov.w	r0, #0
 800d506:	f380 8814 	msr	CONTROL, r0
 800d50a:	b662      	cpsie	i
 800d50c:	b661      	cpsie	f
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	df00      	svc	0
 800d518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d51a:	bf00      	nop
 800d51c:	e000ed08 	.word	0xe000ed08

0800d520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d526:	4b46      	ldr	r3, [pc, #280]	; (800d640 <xPortStartScheduler+0x120>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a46      	ldr	r2, [pc, #280]	; (800d644 <xPortStartScheduler+0x124>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d10a      	bne.n	800d546 <xPortStartScheduler+0x26>
	__asm volatile
 800d530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	613b      	str	r3, [r7, #16]
}
 800d542:	bf00      	nop
 800d544:	e7fe      	b.n	800d544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d546:	4b3e      	ldr	r3, [pc, #248]	; (800d640 <xPortStartScheduler+0x120>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a3f      	ldr	r2, [pc, #252]	; (800d648 <xPortStartScheduler+0x128>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d10a      	bne.n	800d566 <xPortStartScheduler+0x46>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	60fb      	str	r3, [r7, #12]
}
 800d562:	bf00      	nop
 800d564:	e7fe      	b.n	800d564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d566:	4b39      	ldr	r3, [pc, #228]	; (800d64c <xPortStartScheduler+0x12c>)
 800d568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	22ff      	movs	r2, #255	; 0xff
 800d576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d580:	78fb      	ldrb	r3, [r7, #3]
 800d582:	b2db      	uxtb	r3, r3
 800d584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d588:	b2da      	uxtb	r2, r3
 800d58a:	4b31      	ldr	r3, [pc, #196]	; (800d650 <xPortStartScheduler+0x130>)
 800d58c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d58e:	4b31      	ldr	r3, [pc, #196]	; (800d654 <xPortStartScheduler+0x134>)
 800d590:	2207      	movs	r2, #7
 800d592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d594:	e009      	b.n	800d5aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d596:	4b2f      	ldr	r3, [pc, #188]	; (800d654 <xPortStartScheduler+0x134>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	4a2d      	ldr	r2, [pc, #180]	; (800d654 <xPortStartScheduler+0x134>)
 800d59e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5aa:	78fb      	ldrb	r3, [r7, #3]
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5b2:	2b80      	cmp	r3, #128	; 0x80
 800d5b4:	d0ef      	beq.n	800d596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d5b6:	4b27      	ldr	r3, [pc, #156]	; (800d654 <xPortStartScheduler+0x134>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f1c3 0307 	rsb	r3, r3, #7
 800d5be:	2b04      	cmp	r3, #4
 800d5c0:	d00a      	beq.n	800d5d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	60bb      	str	r3, [r7, #8]
}
 800d5d4:	bf00      	nop
 800d5d6:	e7fe      	b.n	800d5d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d5d8:	4b1e      	ldr	r3, [pc, #120]	; (800d654 <xPortStartScheduler+0x134>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	021b      	lsls	r3, r3, #8
 800d5de:	4a1d      	ldr	r2, [pc, #116]	; (800d654 <xPortStartScheduler+0x134>)
 800d5e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5e2:	4b1c      	ldr	r3, [pc, #112]	; (800d654 <xPortStartScheduler+0x134>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5ea:	4a1a      	ldr	r2, [pc, #104]	; (800d654 <xPortStartScheduler+0x134>)
 800d5ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5f6:	4b18      	ldr	r3, [pc, #96]	; (800d658 <xPortStartScheduler+0x138>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a17      	ldr	r2, [pc, #92]	; (800d658 <xPortStartScheduler+0x138>)
 800d5fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d602:	4b15      	ldr	r3, [pc, #84]	; (800d658 <xPortStartScheduler+0x138>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a14      	ldr	r2, [pc, #80]	; (800d658 <xPortStartScheduler+0x138>)
 800d608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d60c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d60e:	f000 f8dd 	bl	800d7cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d612:	4b12      	ldr	r3, [pc, #72]	; (800d65c <xPortStartScheduler+0x13c>)
 800d614:	2200      	movs	r2, #0
 800d616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d618:	f000 f8fc 	bl	800d814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d61c:	4b10      	ldr	r3, [pc, #64]	; (800d660 <xPortStartScheduler+0x140>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a0f      	ldr	r2, [pc, #60]	; (800d660 <xPortStartScheduler+0x140>)
 800d622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d628:	f7ff ff66 	bl	800d4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d62c:	f7ff f800 	bl	800c630 <vTaskSwitchContext>
	prvTaskExitError();
 800d630:	f7ff ff20 	bl	800d474 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3718      	adds	r7, #24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	e000ed00 	.word	0xe000ed00
 800d644:	410fc271 	.word	0x410fc271
 800d648:	410fc270 	.word	0x410fc270
 800d64c:	e000e400 	.word	0xe000e400
 800d650:	20000e38 	.word	0x20000e38
 800d654:	20000e3c 	.word	0x20000e3c
 800d658:	e000ed20 	.word	0xe000ed20
 800d65c:	200000b4 	.word	0x200000b4
 800d660:	e000ef34 	.word	0xe000ef34

0800d664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	607b      	str	r3, [r7, #4]
}
 800d67c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d67e:	4b0f      	ldr	r3, [pc, #60]	; (800d6bc <vPortEnterCritical+0x58>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	3301      	adds	r3, #1
 800d684:	4a0d      	ldr	r2, [pc, #52]	; (800d6bc <vPortEnterCritical+0x58>)
 800d686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d688:	4b0c      	ldr	r3, [pc, #48]	; (800d6bc <vPortEnterCritical+0x58>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d10f      	bne.n	800d6b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d690:	4b0b      	ldr	r3, [pc, #44]	; (800d6c0 <vPortEnterCritical+0x5c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	b2db      	uxtb	r3, r3
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00a      	beq.n	800d6b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69e:	f383 8811 	msr	BASEPRI, r3
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	f3bf 8f4f 	dsb	sy
 800d6aa:	603b      	str	r3, [r7, #0]
}
 800d6ac:	bf00      	nop
 800d6ae:	e7fe      	b.n	800d6ae <vPortEnterCritical+0x4a>
	}
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	200000b4 	.word	0x200000b4
 800d6c0:	e000ed04 	.word	0xe000ed04

0800d6c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d6ca:	4b12      	ldr	r3, [pc, #72]	; (800d714 <vPortExitCritical+0x50>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d10a      	bne.n	800d6e8 <vPortExitCritical+0x24>
	__asm volatile
 800d6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	607b      	str	r3, [r7, #4]
}
 800d6e4:	bf00      	nop
 800d6e6:	e7fe      	b.n	800d6e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d6e8:	4b0a      	ldr	r3, [pc, #40]	; (800d714 <vPortExitCritical+0x50>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	4a09      	ldr	r2, [pc, #36]	; (800d714 <vPortExitCritical+0x50>)
 800d6f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6f2:	4b08      	ldr	r3, [pc, #32]	; (800d714 <vPortExitCritical+0x50>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d105      	bne.n	800d706 <vPortExitCritical+0x42>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	f383 8811 	msr	BASEPRI, r3
}
 800d704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d706:	bf00      	nop
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	200000b4 	.word	0x200000b4
	...

0800d720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d720:	f3ef 8009 	mrs	r0, PSP
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	4b15      	ldr	r3, [pc, #84]	; (800d780 <pxCurrentTCBConst>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	f01e 0f10 	tst.w	lr, #16
 800d730:	bf08      	it	eq
 800d732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73a:	6010      	str	r0, [r2, #0]
 800d73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d740:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d744:	f380 8811 	msr	BASEPRI, r0
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f7fe ff6e 	bl	800c630 <vTaskSwitchContext>
 800d754:	f04f 0000 	mov.w	r0, #0
 800d758:	f380 8811 	msr	BASEPRI, r0
 800d75c:	bc09      	pop	{r0, r3}
 800d75e:	6819      	ldr	r1, [r3, #0]
 800d760:	6808      	ldr	r0, [r1, #0]
 800d762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d766:	f01e 0f10 	tst.w	lr, #16
 800d76a:	bf08      	it	eq
 800d76c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d770:	f380 8809 	msr	PSP, r0
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop
 800d77c:	f3af 8000 	nop.w

0800d780 <pxCurrentTCBConst>:
 800d780:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d784:	bf00      	nop
 800d786:	bf00      	nop

0800d788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	607b      	str	r3, [r7, #4]
}
 800d7a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d7a2:	f7fe fe8b 	bl	800c4bc <xTaskIncrementTick>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d003      	beq.n	800d7b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d7ac:	4b06      	ldr	r3, [pc, #24]	; (800d7c8 <xPortSysTickHandler+0x40>)
 800d7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	f383 8811 	msr	BASEPRI, r3
}
 800d7be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d7c0:	bf00      	nop
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	e000ed04 	.word	0xe000ed04

0800d7cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7d0:	4b0b      	ldr	r3, [pc, #44]	; (800d800 <vPortSetupTimerInterrupt+0x34>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d7d6:	4b0b      	ldr	r3, [pc, #44]	; (800d804 <vPortSetupTimerInterrupt+0x38>)
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7dc:	4b0a      	ldr	r3, [pc, #40]	; (800d808 <vPortSetupTimerInterrupt+0x3c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a0a      	ldr	r2, [pc, #40]	; (800d80c <vPortSetupTimerInterrupt+0x40>)
 800d7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7e6:	099b      	lsrs	r3, r3, #6
 800d7e8:	4a09      	ldr	r2, [pc, #36]	; (800d810 <vPortSetupTimerInterrupt+0x44>)
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7ee:	4b04      	ldr	r3, [pc, #16]	; (800d800 <vPortSetupTimerInterrupt+0x34>)
 800d7f0:	2207      	movs	r2, #7
 800d7f2:	601a      	str	r2, [r3, #0]
}
 800d7f4:	bf00      	nop
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop
 800d800:	e000e010 	.word	0xe000e010
 800d804:	e000e018 	.word	0xe000e018
 800d808:	20000094 	.word	0x20000094
 800d80c:	10624dd3 	.word	0x10624dd3
 800d810:	e000e014 	.word	0xe000e014

0800d814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d824 <vPortEnableVFP+0x10>
 800d818:	6801      	ldr	r1, [r0, #0]
 800d81a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d81e:	6001      	str	r1, [r0, #0]
 800d820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d822:	bf00      	nop
 800d824:	e000ed88 	.word	0xe000ed88

0800d828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d82e:	f3ef 8305 	mrs	r3, IPSR
 800d832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b0f      	cmp	r3, #15
 800d838:	d914      	bls.n	800d864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d83a:	4a17      	ldr	r2, [pc, #92]	; (800d898 <vPortValidateInterruptPriority+0x70>)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	4413      	add	r3, r2
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d844:	4b15      	ldr	r3, [pc, #84]	; (800d89c <vPortValidateInterruptPriority+0x74>)
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	7afa      	ldrb	r2, [r7, #11]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d20a      	bcs.n	800d864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	607b      	str	r3, [r7, #4]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d864:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <vPortValidateInterruptPriority+0x78>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d86c:	4b0d      	ldr	r3, [pc, #52]	; (800d8a4 <vPortValidateInterruptPriority+0x7c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	429a      	cmp	r2, r3
 800d872:	d90a      	bls.n	800d88a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	603b      	str	r3, [r7, #0]
}
 800d886:	bf00      	nop
 800d888:	e7fe      	b.n	800d888 <vPortValidateInterruptPriority+0x60>
	}
 800d88a:	bf00      	nop
 800d88c:	3714      	adds	r7, #20
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	e000e3f0 	.word	0xe000e3f0
 800d89c:	20000e38 	.word	0x20000e38
 800d8a0:	e000ed0c 	.word	0xe000ed0c
 800d8a4:	20000e3c 	.word	0x20000e3c

0800d8a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b08a      	sub	sp, #40	; 0x28
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d8b4:	f7fe fd46 	bl	800c344 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d8b8:	4b5b      	ldr	r3, [pc, #364]	; (800da28 <pvPortMalloc+0x180>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d8c0:	f000 f920 	bl	800db04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d8c4:	4b59      	ldr	r3, [pc, #356]	; (800da2c <pvPortMalloc+0x184>)
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f040 8093 	bne.w	800d9f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d01d      	beq.n	800d914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d8d8:	2208      	movs	r2, #8
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4413      	add	r3, r2
 800d8de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f003 0307 	and.w	r3, r3, #7
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d014      	beq.n	800d914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f023 0307 	bic.w	r3, r3, #7
 800d8f0:	3308      	adds	r3, #8
 800d8f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f003 0307 	and.w	r3, r3, #7
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00a      	beq.n	800d914 <pvPortMalloc+0x6c>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	617b      	str	r3, [r7, #20]
}
 800d910:	bf00      	nop
 800d912:	e7fe      	b.n	800d912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d06e      	beq.n	800d9f8 <pvPortMalloc+0x150>
 800d91a:	4b45      	ldr	r3, [pc, #276]	; (800da30 <pvPortMalloc+0x188>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	429a      	cmp	r2, r3
 800d922:	d869      	bhi.n	800d9f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d924:	4b43      	ldr	r3, [pc, #268]	; (800da34 <pvPortMalloc+0x18c>)
 800d926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d928:	4b42      	ldr	r3, [pc, #264]	; (800da34 <pvPortMalloc+0x18c>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d92e:	e004      	b.n	800d93a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	429a      	cmp	r2, r3
 800d942:	d903      	bls.n	800d94c <pvPortMalloc+0xa4>
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1f1      	bne.n	800d930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d94c:	4b36      	ldr	r3, [pc, #216]	; (800da28 <pvPortMalloc+0x180>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d952:	429a      	cmp	r2, r3
 800d954:	d050      	beq.n	800d9f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d956:	6a3b      	ldr	r3, [r7, #32]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2208      	movs	r2, #8
 800d95c:	4413      	add	r3, r2
 800d95e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	6a3b      	ldr	r3, [r7, #32]
 800d966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	1ad2      	subs	r2, r2, r3
 800d970:	2308      	movs	r3, #8
 800d972:	005b      	lsls	r3, r3, #1
 800d974:	429a      	cmp	r2, r3
 800d976:	d91f      	bls.n	800d9b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4413      	add	r3, r2
 800d97e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	f003 0307 	and.w	r3, r3, #7
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00a      	beq.n	800d9a0 <pvPortMalloc+0xf8>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98e:	f383 8811 	msr	BASEPRI, r3
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	613b      	str	r3, [r7, #16]
}
 800d99c:	bf00      	nop
 800d99e:	e7fe      	b.n	800d99e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	1ad2      	subs	r2, r2, r3
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d9b2:	69b8      	ldr	r0, [r7, #24]
 800d9b4:	f000 f908 	bl	800dbc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d9b8:	4b1d      	ldr	r3, [pc, #116]	; (800da30 <pvPortMalloc+0x188>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	4a1b      	ldr	r2, [pc, #108]	; (800da30 <pvPortMalloc+0x188>)
 800d9c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d9c6:	4b1a      	ldr	r3, [pc, #104]	; (800da30 <pvPortMalloc+0x188>)
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	4b1b      	ldr	r3, [pc, #108]	; (800da38 <pvPortMalloc+0x190>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d203      	bcs.n	800d9da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9d2:	4b17      	ldr	r3, [pc, #92]	; (800da30 <pvPortMalloc+0x188>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a18      	ldr	r2, [pc, #96]	; (800da38 <pvPortMalloc+0x190>)
 800d9d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	4b13      	ldr	r3, [pc, #76]	; (800da2c <pvPortMalloc+0x184>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	431a      	orrs	r2, r3
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d9ee:	4b13      	ldr	r3, [pc, #76]	; (800da3c <pvPortMalloc+0x194>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	4a11      	ldr	r2, [pc, #68]	; (800da3c <pvPortMalloc+0x194>)
 800d9f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d9f8:	f7fe fcb2 	bl	800c360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	f003 0307 	and.w	r3, r3, #7
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00a      	beq.n	800da1c <pvPortMalloc+0x174>
	__asm volatile
 800da06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	60fb      	str	r3, [r7, #12]
}
 800da18:	bf00      	nop
 800da1a:	e7fe      	b.n	800da1a <pvPortMalloc+0x172>
	return pvReturn;
 800da1c:	69fb      	ldr	r3, [r7, #28]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3728      	adds	r7, #40	; 0x28
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	20003558 	.word	0x20003558
 800da2c:	2000356c 	.word	0x2000356c
 800da30:	2000355c 	.word	0x2000355c
 800da34:	20003550 	.word	0x20003550
 800da38:	20003560 	.word	0x20003560
 800da3c:	20003564 	.word	0x20003564

0800da40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d04d      	beq.n	800daee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da52:	2308      	movs	r3, #8
 800da54:	425b      	negs	r3, r3
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	4413      	add	r3, r2
 800da5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	685a      	ldr	r2, [r3, #4]
 800da64:	4b24      	ldr	r3, [pc, #144]	; (800daf8 <vPortFree+0xb8>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4013      	ands	r3, r2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10a      	bne.n	800da84 <vPortFree+0x44>
	__asm volatile
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	60fb      	str	r3, [r7, #12]
}
 800da80:	bf00      	nop
 800da82:	e7fe      	b.n	800da82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00a      	beq.n	800daa2 <vPortFree+0x62>
	__asm volatile
 800da8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da90:	f383 8811 	msr	BASEPRI, r3
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	60bb      	str	r3, [r7, #8]
}
 800da9e:	bf00      	nop
 800daa0:	e7fe      	b.n	800daa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	4b14      	ldr	r3, [pc, #80]	; (800daf8 <vPortFree+0xb8>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4013      	ands	r3, r2
 800daac:	2b00      	cmp	r3, #0
 800daae:	d01e      	beq.n	800daee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d11a      	bne.n	800daee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	685a      	ldr	r2, [r3, #4]
 800dabc:	4b0e      	ldr	r3, [pc, #56]	; (800daf8 <vPortFree+0xb8>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	43db      	mvns	r3, r3
 800dac2:	401a      	ands	r2, r3
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dac8:	f7fe fc3c 	bl	800c344 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	685a      	ldr	r2, [r3, #4]
 800dad0:	4b0a      	ldr	r3, [pc, #40]	; (800dafc <vPortFree+0xbc>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4413      	add	r3, r2
 800dad6:	4a09      	ldr	r2, [pc, #36]	; (800dafc <vPortFree+0xbc>)
 800dad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dada:	6938      	ldr	r0, [r7, #16]
 800dadc:	f000 f874 	bl	800dbc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dae0:	4b07      	ldr	r3, [pc, #28]	; (800db00 <vPortFree+0xc0>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3301      	adds	r3, #1
 800dae6:	4a06      	ldr	r2, [pc, #24]	; (800db00 <vPortFree+0xc0>)
 800dae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800daea:	f7fe fc39 	bl	800c360 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800daee:	bf00      	nop
 800daf0:	3718      	adds	r7, #24
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	2000356c 	.word	0x2000356c
 800dafc:	2000355c 	.word	0x2000355c
 800db00:	20003568 	.word	0x20003568

0800db04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db0a:	f242 7310 	movw	r3, #10000	; 0x2710
 800db0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db10:	4b27      	ldr	r3, [pc, #156]	; (800dbb0 <prvHeapInit+0xac>)
 800db12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f003 0307 	and.w	r3, r3, #7
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00c      	beq.n	800db38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	3307      	adds	r3, #7
 800db22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f023 0307 	bic.w	r3, r3, #7
 800db2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	4a1f      	ldr	r2, [pc, #124]	; (800dbb0 <prvHeapInit+0xac>)
 800db34:	4413      	add	r3, r2
 800db36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db3c:	4a1d      	ldr	r2, [pc, #116]	; (800dbb4 <prvHeapInit+0xb0>)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db42:	4b1c      	ldr	r3, [pc, #112]	; (800dbb4 <prvHeapInit+0xb0>)
 800db44:	2200      	movs	r2, #0
 800db46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	4413      	add	r3, r2
 800db4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db50:	2208      	movs	r2, #8
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	1a9b      	subs	r3, r3, r2
 800db56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f023 0307 	bic.w	r3, r3, #7
 800db5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	4a15      	ldr	r2, [pc, #84]	; (800dbb8 <prvHeapInit+0xb4>)
 800db64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db66:	4b14      	ldr	r3, [pc, #80]	; (800dbb8 <prvHeapInit+0xb4>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2200      	movs	r2, #0
 800db6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db6e:	4b12      	ldr	r3, [pc, #72]	; (800dbb8 <prvHeapInit+0xb4>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	1ad2      	subs	r2, r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db84:	4b0c      	ldr	r3, [pc, #48]	; (800dbb8 <prvHeapInit+0xb4>)
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	4a0a      	ldr	r2, [pc, #40]	; (800dbbc <prvHeapInit+0xb8>)
 800db92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	4a09      	ldr	r2, [pc, #36]	; (800dbc0 <prvHeapInit+0xbc>)
 800db9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db9c:	4b09      	ldr	r3, [pc, #36]	; (800dbc4 <prvHeapInit+0xc0>)
 800db9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dba2:	601a      	str	r2, [r3, #0]
}
 800dba4:	bf00      	nop
 800dba6:	3714      	adds	r7, #20
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr
 800dbb0:	20000e40 	.word	0x20000e40
 800dbb4:	20003550 	.word	0x20003550
 800dbb8:	20003558 	.word	0x20003558
 800dbbc:	20003560 	.word	0x20003560
 800dbc0:	2000355c 	.word	0x2000355c
 800dbc4:	2000356c 	.word	0x2000356c

0800dbc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dbd0:	4b28      	ldr	r3, [pc, #160]	; (800dc74 <prvInsertBlockIntoFreeList+0xac>)
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	e002      	b.n	800dbdc <prvInsertBlockIntoFreeList+0x14>
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	60fb      	str	r3, [r7, #12]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d8f7      	bhi.n	800dbd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d108      	bne.n	800dc0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	441a      	add	r2, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	68ba      	ldr	r2, [r7, #8]
 800dc14:	441a      	add	r2, r3
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d118      	bne.n	800dc50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	4b15      	ldr	r3, [pc, #84]	; (800dc78 <prvInsertBlockIntoFreeList+0xb0>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d00d      	beq.n	800dc46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	441a      	add	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	e008      	b.n	800dc58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc46:	4b0c      	ldr	r3, [pc, #48]	; (800dc78 <prvInsertBlockIntoFreeList+0xb0>)
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	e003      	b.n	800dc58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d002      	beq.n	800dc66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc66:	bf00      	nop
 800dc68:	3714      	adds	r7, #20
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	20003550 	.word	0x20003550
 800dc78:	20003558 	.word	0x20003558

0800dc7c <__errno>:
 800dc7c:	4b01      	ldr	r3, [pc, #4]	; (800dc84 <__errno+0x8>)
 800dc7e:	6818      	ldr	r0, [r3, #0]
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	200000b8 	.word	0x200000b8

0800dc88 <__libc_init_array>:
 800dc88:	b570      	push	{r4, r5, r6, lr}
 800dc8a:	4d0d      	ldr	r5, [pc, #52]	; (800dcc0 <__libc_init_array+0x38>)
 800dc8c:	4c0d      	ldr	r4, [pc, #52]	; (800dcc4 <__libc_init_array+0x3c>)
 800dc8e:	1b64      	subs	r4, r4, r5
 800dc90:	10a4      	asrs	r4, r4, #2
 800dc92:	2600      	movs	r6, #0
 800dc94:	42a6      	cmp	r6, r4
 800dc96:	d109      	bne.n	800dcac <__libc_init_array+0x24>
 800dc98:	4d0b      	ldr	r5, [pc, #44]	; (800dcc8 <__libc_init_array+0x40>)
 800dc9a:	4c0c      	ldr	r4, [pc, #48]	; (800dccc <__libc_init_array+0x44>)
 800dc9c:	f002 f85e 	bl	800fd5c <_init>
 800dca0:	1b64      	subs	r4, r4, r5
 800dca2:	10a4      	asrs	r4, r4, #2
 800dca4:	2600      	movs	r6, #0
 800dca6:	42a6      	cmp	r6, r4
 800dca8:	d105      	bne.n	800dcb6 <__libc_init_array+0x2e>
 800dcaa:	bd70      	pop	{r4, r5, r6, pc}
 800dcac:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcb0:	4798      	blx	r3
 800dcb2:	3601      	adds	r6, #1
 800dcb4:	e7ee      	b.n	800dc94 <__libc_init_array+0xc>
 800dcb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcba:	4798      	blx	r3
 800dcbc:	3601      	adds	r6, #1
 800dcbe:	e7f2      	b.n	800dca6 <__libc_init_array+0x1e>
 800dcc0:	080102c0 	.word	0x080102c0
 800dcc4:	080102c0 	.word	0x080102c0
 800dcc8:	080102c0 	.word	0x080102c0
 800dccc:	080102c4 	.word	0x080102c4

0800dcd0 <memcpy>:
 800dcd0:	440a      	add	r2, r1
 800dcd2:	4291      	cmp	r1, r2
 800dcd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dcd8:	d100      	bne.n	800dcdc <memcpy+0xc>
 800dcda:	4770      	bx	lr
 800dcdc:	b510      	push	{r4, lr}
 800dcde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dce6:	4291      	cmp	r1, r2
 800dce8:	d1f9      	bne.n	800dcde <memcpy+0xe>
 800dcea:	bd10      	pop	{r4, pc}

0800dcec <memset>:
 800dcec:	4402      	add	r2, r0
 800dcee:	4603      	mov	r3, r0
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d100      	bne.n	800dcf6 <memset+0xa>
 800dcf4:	4770      	bx	lr
 800dcf6:	f803 1b01 	strb.w	r1, [r3], #1
 800dcfa:	e7f9      	b.n	800dcf0 <memset+0x4>

0800dcfc <iprintf>:
 800dcfc:	b40f      	push	{r0, r1, r2, r3}
 800dcfe:	4b0a      	ldr	r3, [pc, #40]	; (800dd28 <iprintf+0x2c>)
 800dd00:	b513      	push	{r0, r1, r4, lr}
 800dd02:	681c      	ldr	r4, [r3, #0]
 800dd04:	b124      	cbz	r4, 800dd10 <iprintf+0x14>
 800dd06:	69a3      	ldr	r3, [r4, #24]
 800dd08:	b913      	cbnz	r3, 800dd10 <iprintf+0x14>
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f000 fa5e 	bl	800e1cc <__sinit>
 800dd10:	ab05      	add	r3, sp, #20
 800dd12:	9a04      	ldr	r2, [sp, #16]
 800dd14:	68a1      	ldr	r1, [r4, #8]
 800dd16:	9301      	str	r3, [sp, #4]
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 fc2f 	bl	800e57c <_vfiprintf_r>
 800dd1e:	b002      	add	sp, #8
 800dd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd24:	b004      	add	sp, #16
 800dd26:	4770      	bx	lr
 800dd28:	200000b8 	.word	0x200000b8

0800dd2c <_puts_r>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	460e      	mov	r6, r1
 800dd30:	4605      	mov	r5, r0
 800dd32:	b118      	cbz	r0, 800dd3c <_puts_r+0x10>
 800dd34:	6983      	ldr	r3, [r0, #24]
 800dd36:	b90b      	cbnz	r3, 800dd3c <_puts_r+0x10>
 800dd38:	f000 fa48 	bl	800e1cc <__sinit>
 800dd3c:	69ab      	ldr	r3, [r5, #24]
 800dd3e:	68ac      	ldr	r4, [r5, #8]
 800dd40:	b913      	cbnz	r3, 800dd48 <_puts_r+0x1c>
 800dd42:	4628      	mov	r0, r5
 800dd44:	f000 fa42 	bl	800e1cc <__sinit>
 800dd48:	4b2c      	ldr	r3, [pc, #176]	; (800ddfc <_puts_r+0xd0>)
 800dd4a:	429c      	cmp	r4, r3
 800dd4c:	d120      	bne.n	800dd90 <_puts_r+0x64>
 800dd4e:	686c      	ldr	r4, [r5, #4]
 800dd50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd52:	07db      	lsls	r3, r3, #31
 800dd54:	d405      	bmi.n	800dd62 <_puts_r+0x36>
 800dd56:	89a3      	ldrh	r3, [r4, #12]
 800dd58:	0598      	lsls	r0, r3, #22
 800dd5a:	d402      	bmi.n	800dd62 <_puts_r+0x36>
 800dd5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd5e:	f000 fad3 	bl	800e308 <__retarget_lock_acquire_recursive>
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	0719      	lsls	r1, r3, #28
 800dd66:	d51d      	bpl.n	800dda4 <_puts_r+0x78>
 800dd68:	6923      	ldr	r3, [r4, #16]
 800dd6a:	b1db      	cbz	r3, 800dda4 <_puts_r+0x78>
 800dd6c:	3e01      	subs	r6, #1
 800dd6e:	68a3      	ldr	r3, [r4, #8]
 800dd70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dd74:	3b01      	subs	r3, #1
 800dd76:	60a3      	str	r3, [r4, #8]
 800dd78:	bb39      	cbnz	r1, 800ddca <_puts_r+0x9e>
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	da38      	bge.n	800ddf0 <_puts_r+0xc4>
 800dd7e:	4622      	mov	r2, r4
 800dd80:	210a      	movs	r1, #10
 800dd82:	4628      	mov	r0, r5
 800dd84:	f000 f848 	bl	800de18 <__swbuf_r>
 800dd88:	3001      	adds	r0, #1
 800dd8a:	d011      	beq.n	800ddb0 <_puts_r+0x84>
 800dd8c:	250a      	movs	r5, #10
 800dd8e:	e011      	b.n	800ddb4 <_puts_r+0x88>
 800dd90:	4b1b      	ldr	r3, [pc, #108]	; (800de00 <_puts_r+0xd4>)
 800dd92:	429c      	cmp	r4, r3
 800dd94:	d101      	bne.n	800dd9a <_puts_r+0x6e>
 800dd96:	68ac      	ldr	r4, [r5, #8]
 800dd98:	e7da      	b.n	800dd50 <_puts_r+0x24>
 800dd9a:	4b1a      	ldr	r3, [pc, #104]	; (800de04 <_puts_r+0xd8>)
 800dd9c:	429c      	cmp	r4, r3
 800dd9e:	bf08      	it	eq
 800dda0:	68ec      	ldreq	r4, [r5, #12]
 800dda2:	e7d5      	b.n	800dd50 <_puts_r+0x24>
 800dda4:	4621      	mov	r1, r4
 800dda6:	4628      	mov	r0, r5
 800dda8:	f000 f888 	bl	800debc <__swsetup_r>
 800ddac:	2800      	cmp	r0, #0
 800ddae:	d0dd      	beq.n	800dd6c <_puts_r+0x40>
 800ddb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ddb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddb6:	07da      	lsls	r2, r3, #31
 800ddb8:	d405      	bmi.n	800ddc6 <_puts_r+0x9a>
 800ddba:	89a3      	ldrh	r3, [r4, #12]
 800ddbc:	059b      	lsls	r3, r3, #22
 800ddbe:	d402      	bmi.n	800ddc6 <_puts_r+0x9a>
 800ddc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddc2:	f000 faa2 	bl	800e30a <__retarget_lock_release_recursive>
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	bd70      	pop	{r4, r5, r6, pc}
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	da04      	bge.n	800ddd8 <_puts_r+0xac>
 800ddce:	69a2      	ldr	r2, [r4, #24]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	dc06      	bgt.n	800dde2 <_puts_r+0xb6>
 800ddd4:	290a      	cmp	r1, #10
 800ddd6:	d004      	beq.n	800dde2 <_puts_r+0xb6>
 800ddd8:	6823      	ldr	r3, [r4, #0]
 800ddda:	1c5a      	adds	r2, r3, #1
 800dddc:	6022      	str	r2, [r4, #0]
 800ddde:	7019      	strb	r1, [r3, #0]
 800dde0:	e7c5      	b.n	800dd6e <_puts_r+0x42>
 800dde2:	4622      	mov	r2, r4
 800dde4:	4628      	mov	r0, r5
 800dde6:	f000 f817 	bl	800de18 <__swbuf_r>
 800ddea:	3001      	adds	r0, #1
 800ddec:	d1bf      	bne.n	800dd6e <_puts_r+0x42>
 800ddee:	e7df      	b.n	800ddb0 <_puts_r+0x84>
 800ddf0:	6823      	ldr	r3, [r4, #0]
 800ddf2:	250a      	movs	r5, #10
 800ddf4:	1c5a      	adds	r2, r3, #1
 800ddf6:	6022      	str	r2, [r4, #0]
 800ddf8:	701d      	strb	r5, [r3, #0]
 800ddfa:	e7db      	b.n	800ddb4 <_puts_r+0x88>
 800ddfc:	08010068 	.word	0x08010068
 800de00:	08010088 	.word	0x08010088
 800de04:	08010048 	.word	0x08010048

0800de08 <puts>:
 800de08:	4b02      	ldr	r3, [pc, #8]	; (800de14 <puts+0xc>)
 800de0a:	4601      	mov	r1, r0
 800de0c:	6818      	ldr	r0, [r3, #0]
 800de0e:	f7ff bf8d 	b.w	800dd2c <_puts_r>
 800de12:	bf00      	nop
 800de14:	200000b8 	.word	0x200000b8

0800de18 <__swbuf_r>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	460e      	mov	r6, r1
 800de1c:	4614      	mov	r4, r2
 800de1e:	4605      	mov	r5, r0
 800de20:	b118      	cbz	r0, 800de2a <__swbuf_r+0x12>
 800de22:	6983      	ldr	r3, [r0, #24]
 800de24:	b90b      	cbnz	r3, 800de2a <__swbuf_r+0x12>
 800de26:	f000 f9d1 	bl	800e1cc <__sinit>
 800de2a:	4b21      	ldr	r3, [pc, #132]	; (800deb0 <__swbuf_r+0x98>)
 800de2c:	429c      	cmp	r4, r3
 800de2e:	d12b      	bne.n	800de88 <__swbuf_r+0x70>
 800de30:	686c      	ldr	r4, [r5, #4]
 800de32:	69a3      	ldr	r3, [r4, #24]
 800de34:	60a3      	str	r3, [r4, #8]
 800de36:	89a3      	ldrh	r3, [r4, #12]
 800de38:	071a      	lsls	r2, r3, #28
 800de3a:	d52f      	bpl.n	800de9c <__swbuf_r+0x84>
 800de3c:	6923      	ldr	r3, [r4, #16]
 800de3e:	b36b      	cbz	r3, 800de9c <__swbuf_r+0x84>
 800de40:	6923      	ldr	r3, [r4, #16]
 800de42:	6820      	ldr	r0, [r4, #0]
 800de44:	1ac0      	subs	r0, r0, r3
 800de46:	6963      	ldr	r3, [r4, #20]
 800de48:	b2f6      	uxtb	r6, r6
 800de4a:	4283      	cmp	r3, r0
 800de4c:	4637      	mov	r7, r6
 800de4e:	dc04      	bgt.n	800de5a <__swbuf_r+0x42>
 800de50:	4621      	mov	r1, r4
 800de52:	4628      	mov	r0, r5
 800de54:	f000 f926 	bl	800e0a4 <_fflush_r>
 800de58:	bb30      	cbnz	r0, 800dea8 <__swbuf_r+0x90>
 800de5a:	68a3      	ldr	r3, [r4, #8]
 800de5c:	3b01      	subs	r3, #1
 800de5e:	60a3      	str	r3, [r4, #8]
 800de60:	6823      	ldr	r3, [r4, #0]
 800de62:	1c5a      	adds	r2, r3, #1
 800de64:	6022      	str	r2, [r4, #0]
 800de66:	701e      	strb	r6, [r3, #0]
 800de68:	6963      	ldr	r3, [r4, #20]
 800de6a:	3001      	adds	r0, #1
 800de6c:	4283      	cmp	r3, r0
 800de6e:	d004      	beq.n	800de7a <__swbuf_r+0x62>
 800de70:	89a3      	ldrh	r3, [r4, #12]
 800de72:	07db      	lsls	r3, r3, #31
 800de74:	d506      	bpl.n	800de84 <__swbuf_r+0x6c>
 800de76:	2e0a      	cmp	r6, #10
 800de78:	d104      	bne.n	800de84 <__swbuf_r+0x6c>
 800de7a:	4621      	mov	r1, r4
 800de7c:	4628      	mov	r0, r5
 800de7e:	f000 f911 	bl	800e0a4 <_fflush_r>
 800de82:	b988      	cbnz	r0, 800dea8 <__swbuf_r+0x90>
 800de84:	4638      	mov	r0, r7
 800de86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de88:	4b0a      	ldr	r3, [pc, #40]	; (800deb4 <__swbuf_r+0x9c>)
 800de8a:	429c      	cmp	r4, r3
 800de8c:	d101      	bne.n	800de92 <__swbuf_r+0x7a>
 800de8e:	68ac      	ldr	r4, [r5, #8]
 800de90:	e7cf      	b.n	800de32 <__swbuf_r+0x1a>
 800de92:	4b09      	ldr	r3, [pc, #36]	; (800deb8 <__swbuf_r+0xa0>)
 800de94:	429c      	cmp	r4, r3
 800de96:	bf08      	it	eq
 800de98:	68ec      	ldreq	r4, [r5, #12]
 800de9a:	e7ca      	b.n	800de32 <__swbuf_r+0x1a>
 800de9c:	4621      	mov	r1, r4
 800de9e:	4628      	mov	r0, r5
 800dea0:	f000 f80c 	bl	800debc <__swsetup_r>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d0cb      	beq.n	800de40 <__swbuf_r+0x28>
 800dea8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800deac:	e7ea      	b.n	800de84 <__swbuf_r+0x6c>
 800deae:	bf00      	nop
 800deb0:	08010068 	.word	0x08010068
 800deb4:	08010088 	.word	0x08010088
 800deb8:	08010048 	.word	0x08010048

0800debc <__swsetup_r>:
 800debc:	4b32      	ldr	r3, [pc, #200]	; (800df88 <__swsetup_r+0xcc>)
 800debe:	b570      	push	{r4, r5, r6, lr}
 800dec0:	681d      	ldr	r5, [r3, #0]
 800dec2:	4606      	mov	r6, r0
 800dec4:	460c      	mov	r4, r1
 800dec6:	b125      	cbz	r5, 800ded2 <__swsetup_r+0x16>
 800dec8:	69ab      	ldr	r3, [r5, #24]
 800deca:	b913      	cbnz	r3, 800ded2 <__swsetup_r+0x16>
 800decc:	4628      	mov	r0, r5
 800dece:	f000 f97d 	bl	800e1cc <__sinit>
 800ded2:	4b2e      	ldr	r3, [pc, #184]	; (800df8c <__swsetup_r+0xd0>)
 800ded4:	429c      	cmp	r4, r3
 800ded6:	d10f      	bne.n	800def8 <__swsetup_r+0x3c>
 800ded8:	686c      	ldr	r4, [r5, #4]
 800deda:	89a3      	ldrh	r3, [r4, #12]
 800dedc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dee0:	0719      	lsls	r1, r3, #28
 800dee2:	d42c      	bmi.n	800df3e <__swsetup_r+0x82>
 800dee4:	06dd      	lsls	r5, r3, #27
 800dee6:	d411      	bmi.n	800df0c <__swsetup_r+0x50>
 800dee8:	2309      	movs	r3, #9
 800deea:	6033      	str	r3, [r6, #0]
 800deec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800def0:	81a3      	strh	r3, [r4, #12]
 800def2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800def6:	e03e      	b.n	800df76 <__swsetup_r+0xba>
 800def8:	4b25      	ldr	r3, [pc, #148]	; (800df90 <__swsetup_r+0xd4>)
 800defa:	429c      	cmp	r4, r3
 800defc:	d101      	bne.n	800df02 <__swsetup_r+0x46>
 800defe:	68ac      	ldr	r4, [r5, #8]
 800df00:	e7eb      	b.n	800deda <__swsetup_r+0x1e>
 800df02:	4b24      	ldr	r3, [pc, #144]	; (800df94 <__swsetup_r+0xd8>)
 800df04:	429c      	cmp	r4, r3
 800df06:	bf08      	it	eq
 800df08:	68ec      	ldreq	r4, [r5, #12]
 800df0a:	e7e6      	b.n	800deda <__swsetup_r+0x1e>
 800df0c:	0758      	lsls	r0, r3, #29
 800df0e:	d512      	bpl.n	800df36 <__swsetup_r+0x7a>
 800df10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df12:	b141      	cbz	r1, 800df26 <__swsetup_r+0x6a>
 800df14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df18:	4299      	cmp	r1, r3
 800df1a:	d002      	beq.n	800df22 <__swsetup_r+0x66>
 800df1c:	4630      	mov	r0, r6
 800df1e:	f000 fa59 	bl	800e3d4 <_free_r>
 800df22:	2300      	movs	r3, #0
 800df24:	6363      	str	r3, [r4, #52]	; 0x34
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df2c:	81a3      	strh	r3, [r4, #12]
 800df2e:	2300      	movs	r3, #0
 800df30:	6063      	str	r3, [r4, #4]
 800df32:	6923      	ldr	r3, [r4, #16]
 800df34:	6023      	str	r3, [r4, #0]
 800df36:	89a3      	ldrh	r3, [r4, #12]
 800df38:	f043 0308 	orr.w	r3, r3, #8
 800df3c:	81a3      	strh	r3, [r4, #12]
 800df3e:	6923      	ldr	r3, [r4, #16]
 800df40:	b94b      	cbnz	r3, 800df56 <__swsetup_r+0x9a>
 800df42:	89a3      	ldrh	r3, [r4, #12]
 800df44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df4c:	d003      	beq.n	800df56 <__swsetup_r+0x9a>
 800df4e:	4621      	mov	r1, r4
 800df50:	4630      	mov	r0, r6
 800df52:	f000 f9ff 	bl	800e354 <__smakebuf_r>
 800df56:	89a0      	ldrh	r0, [r4, #12]
 800df58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df5c:	f010 0301 	ands.w	r3, r0, #1
 800df60:	d00a      	beq.n	800df78 <__swsetup_r+0xbc>
 800df62:	2300      	movs	r3, #0
 800df64:	60a3      	str	r3, [r4, #8]
 800df66:	6963      	ldr	r3, [r4, #20]
 800df68:	425b      	negs	r3, r3
 800df6a:	61a3      	str	r3, [r4, #24]
 800df6c:	6923      	ldr	r3, [r4, #16]
 800df6e:	b943      	cbnz	r3, 800df82 <__swsetup_r+0xc6>
 800df70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df74:	d1ba      	bne.n	800deec <__swsetup_r+0x30>
 800df76:	bd70      	pop	{r4, r5, r6, pc}
 800df78:	0781      	lsls	r1, r0, #30
 800df7a:	bf58      	it	pl
 800df7c:	6963      	ldrpl	r3, [r4, #20]
 800df7e:	60a3      	str	r3, [r4, #8]
 800df80:	e7f4      	b.n	800df6c <__swsetup_r+0xb0>
 800df82:	2000      	movs	r0, #0
 800df84:	e7f7      	b.n	800df76 <__swsetup_r+0xba>
 800df86:	bf00      	nop
 800df88:	200000b8 	.word	0x200000b8
 800df8c:	08010068 	.word	0x08010068
 800df90:	08010088 	.word	0x08010088
 800df94:	08010048 	.word	0x08010048

0800df98 <__sflush_r>:
 800df98:	898a      	ldrh	r2, [r1, #12]
 800df9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df9e:	4605      	mov	r5, r0
 800dfa0:	0710      	lsls	r0, r2, #28
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	d458      	bmi.n	800e058 <__sflush_r+0xc0>
 800dfa6:	684b      	ldr	r3, [r1, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	dc05      	bgt.n	800dfb8 <__sflush_r+0x20>
 800dfac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	dc02      	bgt.n	800dfb8 <__sflush_r+0x20>
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfba:	2e00      	cmp	r6, #0
 800dfbc:	d0f9      	beq.n	800dfb2 <__sflush_r+0x1a>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfc4:	682f      	ldr	r7, [r5, #0]
 800dfc6:	602b      	str	r3, [r5, #0]
 800dfc8:	d032      	beq.n	800e030 <__sflush_r+0x98>
 800dfca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfcc:	89a3      	ldrh	r3, [r4, #12]
 800dfce:	075a      	lsls	r2, r3, #29
 800dfd0:	d505      	bpl.n	800dfde <__sflush_r+0x46>
 800dfd2:	6863      	ldr	r3, [r4, #4]
 800dfd4:	1ac0      	subs	r0, r0, r3
 800dfd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfd8:	b10b      	cbz	r3, 800dfde <__sflush_r+0x46>
 800dfda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfdc:	1ac0      	subs	r0, r0, r3
 800dfde:	2300      	movs	r3, #0
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfe4:	6a21      	ldr	r1, [r4, #32]
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	47b0      	blx	r6
 800dfea:	1c43      	adds	r3, r0, #1
 800dfec:	89a3      	ldrh	r3, [r4, #12]
 800dfee:	d106      	bne.n	800dffe <__sflush_r+0x66>
 800dff0:	6829      	ldr	r1, [r5, #0]
 800dff2:	291d      	cmp	r1, #29
 800dff4:	d82c      	bhi.n	800e050 <__sflush_r+0xb8>
 800dff6:	4a2a      	ldr	r2, [pc, #168]	; (800e0a0 <__sflush_r+0x108>)
 800dff8:	40ca      	lsrs	r2, r1
 800dffa:	07d6      	lsls	r6, r2, #31
 800dffc:	d528      	bpl.n	800e050 <__sflush_r+0xb8>
 800dffe:	2200      	movs	r2, #0
 800e000:	6062      	str	r2, [r4, #4]
 800e002:	04d9      	lsls	r1, r3, #19
 800e004:	6922      	ldr	r2, [r4, #16]
 800e006:	6022      	str	r2, [r4, #0]
 800e008:	d504      	bpl.n	800e014 <__sflush_r+0x7c>
 800e00a:	1c42      	adds	r2, r0, #1
 800e00c:	d101      	bne.n	800e012 <__sflush_r+0x7a>
 800e00e:	682b      	ldr	r3, [r5, #0]
 800e010:	b903      	cbnz	r3, 800e014 <__sflush_r+0x7c>
 800e012:	6560      	str	r0, [r4, #84]	; 0x54
 800e014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e016:	602f      	str	r7, [r5, #0]
 800e018:	2900      	cmp	r1, #0
 800e01a:	d0ca      	beq.n	800dfb2 <__sflush_r+0x1a>
 800e01c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e020:	4299      	cmp	r1, r3
 800e022:	d002      	beq.n	800e02a <__sflush_r+0x92>
 800e024:	4628      	mov	r0, r5
 800e026:	f000 f9d5 	bl	800e3d4 <_free_r>
 800e02a:	2000      	movs	r0, #0
 800e02c:	6360      	str	r0, [r4, #52]	; 0x34
 800e02e:	e7c1      	b.n	800dfb4 <__sflush_r+0x1c>
 800e030:	6a21      	ldr	r1, [r4, #32]
 800e032:	2301      	movs	r3, #1
 800e034:	4628      	mov	r0, r5
 800e036:	47b0      	blx	r6
 800e038:	1c41      	adds	r1, r0, #1
 800e03a:	d1c7      	bne.n	800dfcc <__sflush_r+0x34>
 800e03c:	682b      	ldr	r3, [r5, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d0c4      	beq.n	800dfcc <__sflush_r+0x34>
 800e042:	2b1d      	cmp	r3, #29
 800e044:	d001      	beq.n	800e04a <__sflush_r+0xb2>
 800e046:	2b16      	cmp	r3, #22
 800e048:	d101      	bne.n	800e04e <__sflush_r+0xb6>
 800e04a:	602f      	str	r7, [r5, #0]
 800e04c:	e7b1      	b.n	800dfb2 <__sflush_r+0x1a>
 800e04e:	89a3      	ldrh	r3, [r4, #12]
 800e050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e054:	81a3      	strh	r3, [r4, #12]
 800e056:	e7ad      	b.n	800dfb4 <__sflush_r+0x1c>
 800e058:	690f      	ldr	r7, [r1, #16]
 800e05a:	2f00      	cmp	r7, #0
 800e05c:	d0a9      	beq.n	800dfb2 <__sflush_r+0x1a>
 800e05e:	0793      	lsls	r3, r2, #30
 800e060:	680e      	ldr	r6, [r1, #0]
 800e062:	bf08      	it	eq
 800e064:	694b      	ldreq	r3, [r1, #20]
 800e066:	600f      	str	r7, [r1, #0]
 800e068:	bf18      	it	ne
 800e06a:	2300      	movne	r3, #0
 800e06c:	eba6 0807 	sub.w	r8, r6, r7
 800e070:	608b      	str	r3, [r1, #8]
 800e072:	f1b8 0f00 	cmp.w	r8, #0
 800e076:	dd9c      	ble.n	800dfb2 <__sflush_r+0x1a>
 800e078:	6a21      	ldr	r1, [r4, #32]
 800e07a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e07c:	4643      	mov	r3, r8
 800e07e:	463a      	mov	r2, r7
 800e080:	4628      	mov	r0, r5
 800e082:	47b0      	blx	r6
 800e084:	2800      	cmp	r0, #0
 800e086:	dc06      	bgt.n	800e096 <__sflush_r+0xfe>
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e08e:	81a3      	strh	r3, [r4, #12]
 800e090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e094:	e78e      	b.n	800dfb4 <__sflush_r+0x1c>
 800e096:	4407      	add	r7, r0
 800e098:	eba8 0800 	sub.w	r8, r8, r0
 800e09c:	e7e9      	b.n	800e072 <__sflush_r+0xda>
 800e09e:	bf00      	nop
 800e0a0:	20400001 	.word	0x20400001

0800e0a4 <_fflush_r>:
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	690b      	ldr	r3, [r1, #16]
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	b913      	cbnz	r3, 800e0b4 <_fflush_r+0x10>
 800e0ae:	2500      	movs	r5, #0
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	bd38      	pop	{r3, r4, r5, pc}
 800e0b4:	b118      	cbz	r0, 800e0be <_fflush_r+0x1a>
 800e0b6:	6983      	ldr	r3, [r0, #24]
 800e0b8:	b90b      	cbnz	r3, 800e0be <_fflush_r+0x1a>
 800e0ba:	f000 f887 	bl	800e1cc <__sinit>
 800e0be:	4b14      	ldr	r3, [pc, #80]	; (800e110 <_fflush_r+0x6c>)
 800e0c0:	429c      	cmp	r4, r3
 800e0c2:	d11b      	bne.n	800e0fc <_fflush_r+0x58>
 800e0c4:	686c      	ldr	r4, [r5, #4]
 800e0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d0ef      	beq.n	800e0ae <_fflush_r+0xa>
 800e0ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0d0:	07d0      	lsls	r0, r2, #31
 800e0d2:	d404      	bmi.n	800e0de <_fflush_r+0x3a>
 800e0d4:	0599      	lsls	r1, r3, #22
 800e0d6:	d402      	bmi.n	800e0de <_fflush_r+0x3a>
 800e0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0da:	f000 f915 	bl	800e308 <__retarget_lock_acquire_recursive>
 800e0de:	4628      	mov	r0, r5
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	f7ff ff59 	bl	800df98 <__sflush_r>
 800e0e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0e8:	07da      	lsls	r2, r3, #31
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	d4e0      	bmi.n	800e0b0 <_fflush_r+0xc>
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	059b      	lsls	r3, r3, #22
 800e0f2:	d4dd      	bmi.n	800e0b0 <_fflush_r+0xc>
 800e0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0f6:	f000 f908 	bl	800e30a <__retarget_lock_release_recursive>
 800e0fa:	e7d9      	b.n	800e0b0 <_fflush_r+0xc>
 800e0fc:	4b05      	ldr	r3, [pc, #20]	; (800e114 <_fflush_r+0x70>)
 800e0fe:	429c      	cmp	r4, r3
 800e100:	d101      	bne.n	800e106 <_fflush_r+0x62>
 800e102:	68ac      	ldr	r4, [r5, #8]
 800e104:	e7df      	b.n	800e0c6 <_fflush_r+0x22>
 800e106:	4b04      	ldr	r3, [pc, #16]	; (800e118 <_fflush_r+0x74>)
 800e108:	429c      	cmp	r4, r3
 800e10a:	bf08      	it	eq
 800e10c:	68ec      	ldreq	r4, [r5, #12]
 800e10e:	e7da      	b.n	800e0c6 <_fflush_r+0x22>
 800e110:	08010068 	.word	0x08010068
 800e114:	08010088 	.word	0x08010088
 800e118:	08010048 	.word	0x08010048

0800e11c <std>:
 800e11c:	2300      	movs	r3, #0
 800e11e:	b510      	push	{r4, lr}
 800e120:	4604      	mov	r4, r0
 800e122:	e9c0 3300 	strd	r3, r3, [r0]
 800e126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e12a:	6083      	str	r3, [r0, #8]
 800e12c:	8181      	strh	r1, [r0, #12]
 800e12e:	6643      	str	r3, [r0, #100]	; 0x64
 800e130:	81c2      	strh	r2, [r0, #14]
 800e132:	6183      	str	r3, [r0, #24]
 800e134:	4619      	mov	r1, r3
 800e136:	2208      	movs	r2, #8
 800e138:	305c      	adds	r0, #92	; 0x5c
 800e13a:	f7ff fdd7 	bl	800dcec <memset>
 800e13e:	4b05      	ldr	r3, [pc, #20]	; (800e154 <std+0x38>)
 800e140:	6263      	str	r3, [r4, #36]	; 0x24
 800e142:	4b05      	ldr	r3, [pc, #20]	; (800e158 <std+0x3c>)
 800e144:	62a3      	str	r3, [r4, #40]	; 0x28
 800e146:	4b05      	ldr	r3, [pc, #20]	; (800e15c <std+0x40>)
 800e148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e14a:	4b05      	ldr	r3, [pc, #20]	; (800e160 <std+0x44>)
 800e14c:	6224      	str	r4, [r4, #32]
 800e14e:	6323      	str	r3, [r4, #48]	; 0x30
 800e150:	bd10      	pop	{r4, pc}
 800e152:	bf00      	nop
 800e154:	0800eb25 	.word	0x0800eb25
 800e158:	0800eb47 	.word	0x0800eb47
 800e15c:	0800eb7f 	.word	0x0800eb7f
 800e160:	0800eba3 	.word	0x0800eba3

0800e164 <_cleanup_r>:
 800e164:	4901      	ldr	r1, [pc, #4]	; (800e16c <_cleanup_r+0x8>)
 800e166:	f000 b8af 	b.w	800e2c8 <_fwalk_reent>
 800e16a:	bf00      	nop
 800e16c:	0800e0a5 	.word	0x0800e0a5

0800e170 <__sfmoreglue>:
 800e170:	b570      	push	{r4, r5, r6, lr}
 800e172:	1e4a      	subs	r2, r1, #1
 800e174:	2568      	movs	r5, #104	; 0x68
 800e176:	4355      	muls	r5, r2
 800e178:	460e      	mov	r6, r1
 800e17a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e17e:	f000 f979 	bl	800e474 <_malloc_r>
 800e182:	4604      	mov	r4, r0
 800e184:	b140      	cbz	r0, 800e198 <__sfmoreglue+0x28>
 800e186:	2100      	movs	r1, #0
 800e188:	e9c0 1600 	strd	r1, r6, [r0]
 800e18c:	300c      	adds	r0, #12
 800e18e:	60a0      	str	r0, [r4, #8]
 800e190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e194:	f7ff fdaa 	bl	800dcec <memset>
 800e198:	4620      	mov	r0, r4
 800e19a:	bd70      	pop	{r4, r5, r6, pc}

0800e19c <__sfp_lock_acquire>:
 800e19c:	4801      	ldr	r0, [pc, #4]	; (800e1a4 <__sfp_lock_acquire+0x8>)
 800e19e:	f000 b8b3 	b.w	800e308 <__retarget_lock_acquire_recursive>
 800e1a2:	bf00      	nop
 800e1a4:	20010420 	.word	0x20010420

0800e1a8 <__sfp_lock_release>:
 800e1a8:	4801      	ldr	r0, [pc, #4]	; (800e1b0 <__sfp_lock_release+0x8>)
 800e1aa:	f000 b8ae 	b.w	800e30a <__retarget_lock_release_recursive>
 800e1ae:	bf00      	nop
 800e1b0:	20010420 	.word	0x20010420

0800e1b4 <__sinit_lock_acquire>:
 800e1b4:	4801      	ldr	r0, [pc, #4]	; (800e1bc <__sinit_lock_acquire+0x8>)
 800e1b6:	f000 b8a7 	b.w	800e308 <__retarget_lock_acquire_recursive>
 800e1ba:	bf00      	nop
 800e1bc:	2001041b 	.word	0x2001041b

0800e1c0 <__sinit_lock_release>:
 800e1c0:	4801      	ldr	r0, [pc, #4]	; (800e1c8 <__sinit_lock_release+0x8>)
 800e1c2:	f000 b8a2 	b.w	800e30a <__retarget_lock_release_recursive>
 800e1c6:	bf00      	nop
 800e1c8:	2001041b 	.word	0x2001041b

0800e1cc <__sinit>:
 800e1cc:	b510      	push	{r4, lr}
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	f7ff fff0 	bl	800e1b4 <__sinit_lock_acquire>
 800e1d4:	69a3      	ldr	r3, [r4, #24]
 800e1d6:	b11b      	cbz	r3, 800e1e0 <__sinit+0x14>
 800e1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1dc:	f7ff bff0 	b.w	800e1c0 <__sinit_lock_release>
 800e1e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e1e4:	6523      	str	r3, [r4, #80]	; 0x50
 800e1e6:	4b13      	ldr	r3, [pc, #76]	; (800e234 <__sinit+0x68>)
 800e1e8:	4a13      	ldr	r2, [pc, #76]	; (800e238 <__sinit+0x6c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800e1ee:	42a3      	cmp	r3, r4
 800e1f0:	bf04      	itt	eq
 800e1f2:	2301      	moveq	r3, #1
 800e1f4:	61a3      	streq	r3, [r4, #24]
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f000 f820 	bl	800e23c <__sfp>
 800e1fc:	6060      	str	r0, [r4, #4]
 800e1fe:	4620      	mov	r0, r4
 800e200:	f000 f81c 	bl	800e23c <__sfp>
 800e204:	60a0      	str	r0, [r4, #8]
 800e206:	4620      	mov	r0, r4
 800e208:	f000 f818 	bl	800e23c <__sfp>
 800e20c:	2200      	movs	r2, #0
 800e20e:	60e0      	str	r0, [r4, #12]
 800e210:	2104      	movs	r1, #4
 800e212:	6860      	ldr	r0, [r4, #4]
 800e214:	f7ff ff82 	bl	800e11c <std>
 800e218:	68a0      	ldr	r0, [r4, #8]
 800e21a:	2201      	movs	r2, #1
 800e21c:	2109      	movs	r1, #9
 800e21e:	f7ff ff7d 	bl	800e11c <std>
 800e222:	68e0      	ldr	r0, [r4, #12]
 800e224:	2202      	movs	r2, #2
 800e226:	2112      	movs	r1, #18
 800e228:	f7ff ff78 	bl	800e11c <std>
 800e22c:	2301      	movs	r3, #1
 800e22e:	61a3      	str	r3, [r4, #24]
 800e230:	e7d2      	b.n	800e1d8 <__sinit+0xc>
 800e232:	bf00      	nop
 800e234:	08010044 	.word	0x08010044
 800e238:	0800e165 	.word	0x0800e165

0800e23c <__sfp>:
 800e23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e23e:	4607      	mov	r7, r0
 800e240:	f7ff ffac 	bl	800e19c <__sfp_lock_acquire>
 800e244:	4b1e      	ldr	r3, [pc, #120]	; (800e2c0 <__sfp+0x84>)
 800e246:	681e      	ldr	r6, [r3, #0]
 800e248:	69b3      	ldr	r3, [r6, #24]
 800e24a:	b913      	cbnz	r3, 800e252 <__sfp+0x16>
 800e24c:	4630      	mov	r0, r6
 800e24e:	f7ff ffbd 	bl	800e1cc <__sinit>
 800e252:	3648      	adds	r6, #72	; 0x48
 800e254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e258:	3b01      	subs	r3, #1
 800e25a:	d503      	bpl.n	800e264 <__sfp+0x28>
 800e25c:	6833      	ldr	r3, [r6, #0]
 800e25e:	b30b      	cbz	r3, 800e2a4 <__sfp+0x68>
 800e260:	6836      	ldr	r6, [r6, #0]
 800e262:	e7f7      	b.n	800e254 <__sfp+0x18>
 800e264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e268:	b9d5      	cbnz	r5, 800e2a0 <__sfp+0x64>
 800e26a:	4b16      	ldr	r3, [pc, #88]	; (800e2c4 <__sfp+0x88>)
 800e26c:	60e3      	str	r3, [r4, #12]
 800e26e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e272:	6665      	str	r5, [r4, #100]	; 0x64
 800e274:	f000 f847 	bl	800e306 <__retarget_lock_init_recursive>
 800e278:	f7ff ff96 	bl	800e1a8 <__sfp_lock_release>
 800e27c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e280:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e284:	6025      	str	r5, [r4, #0]
 800e286:	61a5      	str	r5, [r4, #24]
 800e288:	2208      	movs	r2, #8
 800e28a:	4629      	mov	r1, r5
 800e28c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e290:	f7ff fd2c 	bl	800dcec <memset>
 800e294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e29c:	4620      	mov	r0, r4
 800e29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2a0:	3468      	adds	r4, #104	; 0x68
 800e2a2:	e7d9      	b.n	800e258 <__sfp+0x1c>
 800e2a4:	2104      	movs	r1, #4
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f7ff ff62 	bl	800e170 <__sfmoreglue>
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	6030      	str	r0, [r6, #0]
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d1d5      	bne.n	800e260 <__sfp+0x24>
 800e2b4:	f7ff ff78 	bl	800e1a8 <__sfp_lock_release>
 800e2b8:	230c      	movs	r3, #12
 800e2ba:	603b      	str	r3, [r7, #0]
 800e2bc:	e7ee      	b.n	800e29c <__sfp+0x60>
 800e2be:	bf00      	nop
 800e2c0:	08010044 	.word	0x08010044
 800e2c4:	ffff0001 	.word	0xffff0001

0800e2c8 <_fwalk_reent>:
 800e2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2cc:	4606      	mov	r6, r0
 800e2ce:	4688      	mov	r8, r1
 800e2d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e2d4:	2700      	movs	r7, #0
 800e2d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2da:	f1b9 0901 	subs.w	r9, r9, #1
 800e2de:	d505      	bpl.n	800e2ec <_fwalk_reent+0x24>
 800e2e0:	6824      	ldr	r4, [r4, #0]
 800e2e2:	2c00      	cmp	r4, #0
 800e2e4:	d1f7      	bne.n	800e2d6 <_fwalk_reent+0xe>
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ec:	89ab      	ldrh	r3, [r5, #12]
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d907      	bls.n	800e302 <_fwalk_reent+0x3a>
 800e2f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	d003      	beq.n	800e302 <_fwalk_reent+0x3a>
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	47c0      	blx	r8
 800e300:	4307      	orrs	r7, r0
 800e302:	3568      	adds	r5, #104	; 0x68
 800e304:	e7e9      	b.n	800e2da <_fwalk_reent+0x12>

0800e306 <__retarget_lock_init_recursive>:
 800e306:	4770      	bx	lr

0800e308 <__retarget_lock_acquire_recursive>:
 800e308:	4770      	bx	lr

0800e30a <__retarget_lock_release_recursive>:
 800e30a:	4770      	bx	lr

0800e30c <__swhatbuf_r>:
 800e30c:	b570      	push	{r4, r5, r6, lr}
 800e30e:	460e      	mov	r6, r1
 800e310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e314:	2900      	cmp	r1, #0
 800e316:	b096      	sub	sp, #88	; 0x58
 800e318:	4614      	mov	r4, r2
 800e31a:	461d      	mov	r5, r3
 800e31c:	da07      	bge.n	800e32e <__swhatbuf_r+0x22>
 800e31e:	2300      	movs	r3, #0
 800e320:	602b      	str	r3, [r5, #0]
 800e322:	89b3      	ldrh	r3, [r6, #12]
 800e324:	061a      	lsls	r2, r3, #24
 800e326:	d410      	bmi.n	800e34a <__swhatbuf_r+0x3e>
 800e328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e32c:	e00e      	b.n	800e34c <__swhatbuf_r+0x40>
 800e32e:	466a      	mov	r2, sp
 800e330:	f000 fc5e 	bl	800ebf0 <_fstat_r>
 800e334:	2800      	cmp	r0, #0
 800e336:	dbf2      	blt.n	800e31e <__swhatbuf_r+0x12>
 800e338:	9a01      	ldr	r2, [sp, #4]
 800e33a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e33e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e342:	425a      	negs	r2, r3
 800e344:	415a      	adcs	r2, r3
 800e346:	602a      	str	r2, [r5, #0]
 800e348:	e7ee      	b.n	800e328 <__swhatbuf_r+0x1c>
 800e34a:	2340      	movs	r3, #64	; 0x40
 800e34c:	2000      	movs	r0, #0
 800e34e:	6023      	str	r3, [r4, #0]
 800e350:	b016      	add	sp, #88	; 0x58
 800e352:	bd70      	pop	{r4, r5, r6, pc}

0800e354 <__smakebuf_r>:
 800e354:	898b      	ldrh	r3, [r1, #12]
 800e356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e358:	079d      	lsls	r5, r3, #30
 800e35a:	4606      	mov	r6, r0
 800e35c:	460c      	mov	r4, r1
 800e35e:	d507      	bpl.n	800e370 <__smakebuf_r+0x1c>
 800e360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	6123      	str	r3, [r4, #16]
 800e368:	2301      	movs	r3, #1
 800e36a:	6163      	str	r3, [r4, #20]
 800e36c:	b002      	add	sp, #8
 800e36e:	bd70      	pop	{r4, r5, r6, pc}
 800e370:	ab01      	add	r3, sp, #4
 800e372:	466a      	mov	r2, sp
 800e374:	f7ff ffca 	bl	800e30c <__swhatbuf_r>
 800e378:	9900      	ldr	r1, [sp, #0]
 800e37a:	4605      	mov	r5, r0
 800e37c:	4630      	mov	r0, r6
 800e37e:	f000 f879 	bl	800e474 <_malloc_r>
 800e382:	b948      	cbnz	r0, 800e398 <__smakebuf_r+0x44>
 800e384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e388:	059a      	lsls	r2, r3, #22
 800e38a:	d4ef      	bmi.n	800e36c <__smakebuf_r+0x18>
 800e38c:	f023 0303 	bic.w	r3, r3, #3
 800e390:	f043 0302 	orr.w	r3, r3, #2
 800e394:	81a3      	strh	r3, [r4, #12]
 800e396:	e7e3      	b.n	800e360 <__smakebuf_r+0xc>
 800e398:	4b0d      	ldr	r3, [pc, #52]	; (800e3d0 <__smakebuf_r+0x7c>)
 800e39a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	6020      	str	r0, [r4, #0]
 800e3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3a4:	81a3      	strh	r3, [r4, #12]
 800e3a6:	9b00      	ldr	r3, [sp, #0]
 800e3a8:	6163      	str	r3, [r4, #20]
 800e3aa:	9b01      	ldr	r3, [sp, #4]
 800e3ac:	6120      	str	r0, [r4, #16]
 800e3ae:	b15b      	cbz	r3, 800e3c8 <__smakebuf_r+0x74>
 800e3b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f000 fc2d 	bl	800ec14 <_isatty_r>
 800e3ba:	b128      	cbz	r0, 800e3c8 <__smakebuf_r+0x74>
 800e3bc:	89a3      	ldrh	r3, [r4, #12]
 800e3be:	f023 0303 	bic.w	r3, r3, #3
 800e3c2:	f043 0301 	orr.w	r3, r3, #1
 800e3c6:	81a3      	strh	r3, [r4, #12]
 800e3c8:	89a0      	ldrh	r0, [r4, #12]
 800e3ca:	4305      	orrs	r5, r0
 800e3cc:	81a5      	strh	r5, [r4, #12]
 800e3ce:	e7cd      	b.n	800e36c <__smakebuf_r+0x18>
 800e3d0:	0800e165 	.word	0x0800e165

0800e3d4 <_free_r>:
 800e3d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3d6:	2900      	cmp	r1, #0
 800e3d8:	d048      	beq.n	800e46c <_free_r+0x98>
 800e3da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3de:	9001      	str	r0, [sp, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e3e6:	bfb8      	it	lt
 800e3e8:	18e4      	addlt	r4, r4, r3
 800e3ea:	f000 fc35 	bl	800ec58 <__malloc_lock>
 800e3ee:	4a20      	ldr	r2, [pc, #128]	; (800e470 <_free_r+0x9c>)
 800e3f0:	9801      	ldr	r0, [sp, #4]
 800e3f2:	6813      	ldr	r3, [r2, #0]
 800e3f4:	4615      	mov	r5, r2
 800e3f6:	b933      	cbnz	r3, 800e406 <_free_r+0x32>
 800e3f8:	6063      	str	r3, [r4, #4]
 800e3fa:	6014      	str	r4, [r2, #0]
 800e3fc:	b003      	add	sp, #12
 800e3fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e402:	f000 bc2f 	b.w	800ec64 <__malloc_unlock>
 800e406:	42a3      	cmp	r3, r4
 800e408:	d90b      	bls.n	800e422 <_free_r+0x4e>
 800e40a:	6821      	ldr	r1, [r4, #0]
 800e40c:	1862      	adds	r2, r4, r1
 800e40e:	4293      	cmp	r3, r2
 800e410:	bf04      	itt	eq
 800e412:	681a      	ldreq	r2, [r3, #0]
 800e414:	685b      	ldreq	r3, [r3, #4]
 800e416:	6063      	str	r3, [r4, #4]
 800e418:	bf04      	itt	eq
 800e41a:	1852      	addeq	r2, r2, r1
 800e41c:	6022      	streq	r2, [r4, #0]
 800e41e:	602c      	str	r4, [r5, #0]
 800e420:	e7ec      	b.n	800e3fc <_free_r+0x28>
 800e422:	461a      	mov	r2, r3
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	b10b      	cbz	r3, 800e42c <_free_r+0x58>
 800e428:	42a3      	cmp	r3, r4
 800e42a:	d9fa      	bls.n	800e422 <_free_r+0x4e>
 800e42c:	6811      	ldr	r1, [r2, #0]
 800e42e:	1855      	adds	r5, r2, r1
 800e430:	42a5      	cmp	r5, r4
 800e432:	d10b      	bne.n	800e44c <_free_r+0x78>
 800e434:	6824      	ldr	r4, [r4, #0]
 800e436:	4421      	add	r1, r4
 800e438:	1854      	adds	r4, r2, r1
 800e43a:	42a3      	cmp	r3, r4
 800e43c:	6011      	str	r1, [r2, #0]
 800e43e:	d1dd      	bne.n	800e3fc <_free_r+0x28>
 800e440:	681c      	ldr	r4, [r3, #0]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	6053      	str	r3, [r2, #4]
 800e446:	4421      	add	r1, r4
 800e448:	6011      	str	r1, [r2, #0]
 800e44a:	e7d7      	b.n	800e3fc <_free_r+0x28>
 800e44c:	d902      	bls.n	800e454 <_free_r+0x80>
 800e44e:	230c      	movs	r3, #12
 800e450:	6003      	str	r3, [r0, #0]
 800e452:	e7d3      	b.n	800e3fc <_free_r+0x28>
 800e454:	6825      	ldr	r5, [r4, #0]
 800e456:	1961      	adds	r1, r4, r5
 800e458:	428b      	cmp	r3, r1
 800e45a:	bf04      	itt	eq
 800e45c:	6819      	ldreq	r1, [r3, #0]
 800e45e:	685b      	ldreq	r3, [r3, #4]
 800e460:	6063      	str	r3, [r4, #4]
 800e462:	bf04      	itt	eq
 800e464:	1949      	addeq	r1, r1, r5
 800e466:	6021      	streq	r1, [r4, #0]
 800e468:	6054      	str	r4, [r2, #4]
 800e46a:	e7c7      	b.n	800e3fc <_free_r+0x28>
 800e46c:	b003      	add	sp, #12
 800e46e:	bd30      	pop	{r4, r5, pc}
 800e470:	20003570 	.word	0x20003570

0800e474 <_malloc_r>:
 800e474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e476:	1ccd      	adds	r5, r1, #3
 800e478:	f025 0503 	bic.w	r5, r5, #3
 800e47c:	3508      	adds	r5, #8
 800e47e:	2d0c      	cmp	r5, #12
 800e480:	bf38      	it	cc
 800e482:	250c      	movcc	r5, #12
 800e484:	2d00      	cmp	r5, #0
 800e486:	4606      	mov	r6, r0
 800e488:	db01      	blt.n	800e48e <_malloc_r+0x1a>
 800e48a:	42a9      	cmp	r1, r5
 800e48c:	d903      	bls.n	800e496 <_malloc_r+0x22>
 800e48e:	230c      	movs	r3, #12
 800e490:	6033      	str	r3, [r6, #0]
 800e492:	2000      	movs	r0, #0
 800e494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e496:	f000 fbdf 	bl	800ec58 <__malloc_lock>
 800e49a:	4921      	ldr	r1, [pc, #132]	; (800e520 <_malloc_r+0xac>)
 800e49c:	680a      	ldr	r2, [r1, #0]
 800e49e:	4614      	mov	r4, r2
 800e4a0:	b99c      	cbnz	r4, 800e4ca <_malloc_r+0x56>
 800e4a2:	4f20      	ldr	r7, [pc, #128]	; (800e524 <_malloc_r+0xb0>)
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	b923      	cbnz	r3, 800e4b2 <_malloc_r+0x3e>
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	f000 fb2a 	bl	800eb04 <_sbrk_r>
 800e4b0:	6038      	str	r0, [r7, #0]
 800e4b2:	4629      	mov	r1, r5
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	f000 fb25 	bl	800eb04 <_sbrk_r>
 800e4ba:	1c43      	adds	r3, r0, #1
 800e4bc:	d123      	bne.n	800e506 <_malloc_r+0x92>
 800e4be:	230c      	movs	r3, #12
 800e4c0:	6033      	str	r3, [r6, #0]
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f000 fbce 	bl	800ec64 <__malloc_unlock>
 800e4c8:	e7e3      	b.n	800e492 <_malloc_r+0x1e>
 800e4ca:	6823      	ldr	r3, [r4, #0]
 800e4cc:	1b5b      	subs	r3, r3, r5
 800e4ce:	d417      	bmi.n	800e500 <_malloc_r+0x8c>
 800e4d0:	2b0b      	cmp	r3, #11
 800e4d2:	d903      	bls.n	800e4dc <_malloc_r+0x68>
 800e4d4:	6023      	str	r3, [r4, #0]
 800e4d6:	441c      	add	r4, r3
 800e4d8:	6025      	str	r5, [r4, #0]
 800e4da:	e004      	b.n	800e4e6 <_malloc_r+0x72>
 800e4dc:	6863      	ldr	r3, [r4, #4]
 800e4de:	42a2      	cmp	r2, r4
 800e4e0:	bf0c      	ite	eq
 800e4e2:	600b      	streq	r3, [r1, #0]
 800e4e4:	6053      	strne	r3, [r2, #4]
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f000 fbbc 	bl	800ec64 <__malloc_unlock>
 800e4ec:	f104 000b 	add.w	r0, r4, #11
 800e4f0:	1d23      	adds	r3, r4, #4
 800e4f2:	f020 0007 	bic.w	r0, r0, #7
 800e4f6:	1ac2      	subs	r2, r0, r3
 800e4f8:	d0cc      	beq.n	800e494 <_malloc_r+0x20>
 800e4fa:	1a1b      	subs	r3, r3, r0
 800e4fc:	50a3      	str	r3, [r4, r2]
 800e4fe:	e7c9      	b.n	800e494 <_malloc_r+0x20>
 800e500:	4622      	mov	r2, r4
 800e502:	6864      	ldr	r4, [r4, #4]
 800e504:	e7cc      	b.n	800e4a0 <_malloc_r+0x2c>
 800e506:	1cc4      	adds	r4, r0, #3
 800e508:	f024 0403 	bic.w	r4, r4, #3
 800e50c:	42a0      	cmp	r0, r4
 800e50e:	d0e3      	beq.n	800e4d8 <_malloc_r+0x64>
 800e510:	1a21      	subs	r1, r4, r0
 800e512:	4630      	mov	r0, r6
 800e514:	f000 faf6 	bl	800eb04 <_sbrk_r>
 800e518:	3001      	adds	r0, #1
 800e51a:	d1dd      	bne.n	800e4d8 <_malloc_r+0x64>
 800e51c:	e7cf      	b.n	800e4be <_malloc_r+0x4a>
 800e51e:	bf00      	nop
 800e520:	20003570 	.word	0x20003570
 800e524:	20003574 	.word	0x20003574

0800e528 <__sfputc_r>:
 800e528:	6893      	ldr	r3, [r2, #8]
 800e52a:	3b01      	subs	r3, #1
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	b410      	push	{r4}
 800e530:	6093      	str	r3, [r2, #8]
 800e532:	da08      	bge.n	800e546 <__sfputc_r+0x1e>
 800e534:	6994      	ldr	r4, [r2, #24]
 800e536:	42a3      	cmp	r3, r4
 800e538:	db01      	blt.n	800e53e <__sfputc_r+0x16>
 800e53a:	290a      	cmp	r1, #10
 800e53c:	d103      	bne.n	800e546 <__sfputc_r+0x1e>
 800e53e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e542:	f7ff bc69 	b.w	800de18 <__swbuf_r>
 800e546:	6813      	ldr	r3, [r2, #0]
 800e548:	1c58      	adds	r0, r3, #1
 800e54a:	6010      	str	r0, [r2, #0]
 800e54c:	7019      	strb	r1, [r3, #0]
 800e54e:	4608      	mov	r0, r1
 800e550:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e554:	4770      	bx	lr

0800e556 <__sfputs_r>:
 800e556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e558:	4606      	mov	r6, r0
 800e55a:	460f      	mov	r7, r1
 800e55c:	4614      	mov	r4, r2
 800e55e:	18d5      	adds	r5, r2, r3
 800e560:	42ac      	cmp	r4, r5
 800e562:	d101      	bne.n	800e568 <__sfputs_r+0x12>
 800e564:	2000      	movs	r0, #0
 800e566:	e007      	b.n	800e578 <__sfputs_r+0x22>
 800e568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e56c:	463a      	mov	r2, r7
 800e56e:	4630      	mov	r0, r6
 800e570:	f7ff ffda 	bl	800e528 <__sfputc_r>
 800e574:	1c43      	adds	r3, r0, #1
 800e576:	d1f3      	bne.n	800e560 <__sfputs_r+0xa>
 800e578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e57c <_vfiprintf_r>:
 800e57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e580:	460d      	mov	r5, r1
 800e582:	b09d      	sub	sp, #116	; 0x74
 800e584:	4614      	mov	r4, r2
 800e586:	4698      	mov	r8, r3
 800e588:	4606      	mov	r6, r0
 800e58a:	b118      	cbz	r0, 800e594 <_vfiprintf_r+0x18>
 800e58c:	6983      	ldr	r3, [r0, #24]
 800e58e:	b90b      	cbnz	r3, 800e594 <_vfiprintf_r+0x18>
 800e590:	f7ff fe1c 	bl	800e1cc <__sinit>
 800e594:	4b89      	ldr	r3, [pc, #548]	; (800e7bc <_vfiprintf_r+0x240>)
 800e596:	429d      	cmp	r5, r3
 800e598:	d11b      	bne.n	800e5d2 <_vfiprintf_r+0x56>
 800e59a:	6875      	ldr	r5, [r6, #4]
 800e59c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e59e:	07d9      	lsls	r1, r3, #31
 800e5a0:	d405      	bmi.n	800e5ae <_vfiprintf_r+0x32>
 800e5a2:	89ab      	ldrh	r3, [r5, #12]
 800e5a4:	059a      	lsls	r2, r3, #22
 800e5a6:	d402      	bmi.n	800e5ae <_vfiprintf_r+0x32>
 800e5a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5aa:	f7ff fead 	bl	800e308 <__retarget_lock_acquire_recursive>
 800e5ae:	89ab      	ldrh	r3, [r5, #12]
 800e5b0:	071b      	lsls	r3, r3, #28
 800e5b2:	d501      	bpl.n	800e5b8 <_vfiprintf_r+0x3c>
 800e5b4:	692b      	ldr	r3, [r5, #16]
 800e5b6:	b9eb      	cbnz	r3, 800e5f4 <_vfiprintf_r+0x78>
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	f7ff fc7e 	bl	800debc <__swsetup_r>
 800e5c0:	b1c0      	cbz	r0, 800e5f4 <_vfiprintf_r+0x78>
 800e5c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5c4:	07dc      	lsls	r4, r3, #31
 800e5c6:	d50e      	bpl.n	800e5e6 <_vfiprintf_r+0x6a>
 800e5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5cc:	b01d      	add	sp, #116	; 0x74
 800e5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d2:	4b7b      	ldr	r3, [pc, #492]	; (800e7c0 <_vfiprintf_r+0x244>)
 800e5d4:	429d      	cmp	r5, r3
 800e5d6:	d101      	bne.n	800e5dc <_vfiprintf_r+0x60>
 800e5d8:	68b5      	ldr	r5, [r6, #8]
 800e5da:	e7df      	b.n	800e59c <_vfiprintf_r+0x20>
 800e5dc:	4b79      	ldr	r3, [pc, #484]	; (800e7c4 <_vfiprintf_r+0x248>)
 800e5de:	429d      	cmp	r5, r3
 800e5e0:	bf08      	it	eq
 800e5e2:	68f5      	ldreq	r5, [r6, #12]
 800e5e4:	e7da      	b.n	800e59c <_vfiprintf_r+0x20>
 800e5e6:	89ab      	ldrh	r3, [r5, #12]
 800e5e8:	0598      	lsls	r0, r3, #22
 800e5ea:	d4ed      	bmi.n	800e5c8 <_vfiprintf_r+0x4c>
 800e5ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5ee:	f7ff fe8c 	bl	800e30a <__retarget_lock_release_recursive>
 800e5f2:	e7e9      	b.n	800e5c8 <_vfiprintf_r+0x4c>
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5f8:	2320      	movs	r3, #32
 800e5fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800e602:	2330      	movs	r3, #48	; 0x30
 800e604:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e7c8 <_vfiprintf_r+0x24c>
 800e608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e60c:	f04f 0901 	mov.w	r9, #1
 800e610:	4623      	mov	r3, r4
 800e612:	469a      	mov	sl, r3
 800e614:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e618:	b10a      	cbz	r2, 800e61e <_vfiprintf_r+0xa2>
 800e61a:	2a25      	cmp	r2, #37	; 0x25
 800e61c:	d1f9      	bne.n	800e612 <_vfiprintf_r+0x96>
 800e61e:	ebba 0b04 	subs.w	fp, sl, r4
 800e622:	d00b      	beq.n	800e63c <_vfiprintf_r+0xc0>
 800e624:	465b      	mov	r3, fp
 800e626:	4622      	mov	r2, r4
 800e628:	4629      	mov	r1, r5
 800e62a:	4630      	mov	r0, r6
 800e62c:	f7ff ff93 	bl	800e556 <__sfputs_r>
 800e630:	3001      	adds	r0, #1
 800e632:	f000 80aa 	beq.w	800e78a <_vfiprintf_r+0x20e>
 800e636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e638:	445a      	add	r2, fp
 800e63a:	9209      	str	r2, [sp, #36]	; 0x24
 800e63c:	f89a 3000 	ldrb.w	r3, [sl]
 800e640:	2b00      	cmp	r3, #0
 800e642:	f000 80a2 	beq.w	800e78a <_vfiprintf_r+0x20e>
 800e646:	2300      	movs	r3, #0
 800e648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e650:	f10a 0a01 	add.w	sl, sl, #1
 800e654:	9304      	str	r3, [sp, #16]
 800e656:	9307      	str	r3, [sp, #28]
 800e658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e65c:	931a      	str	r3, [sp, #104]	; 0x68
 800e65e:	4654      	mov	r4, sl
 800e660:	2205      	movs	r2, #5
 800e662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e666:	4858      	ldr	r0, [pc, #352]	; (800e7c8 <_vfiprintf_r+0x24c>)
 800e668:	f7f1 fdb2 	bl	80001d0 <memchr>
 800e66c:	9a04      	ldr	r2, [sp, #16]
 800e66e:	b9d8      	cbnz	r0, 800e6a8 <_vfiprintf_r+0x12c>
 800e670:	06d1      	lsls	r1, r2, #27
 800e672:	bf44      	itt	mi
 800e674:	2320      	movmi	r3, #32
 800e676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e67a:	0713      	lsls	r3, r2, #28
 800e67c:	bf44      	itt	mi
 800e67e:	232b      	movmi	r3, #43	; 0x2b
 800e680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e684:	f89a 3000 	ldrb.w	r3, [sl]
 800e688:	2b2a      	cmp	r3, #42	; 0x2a
 800e68a:	d015      	beq.n	800e6b8 <_vfiprintf_r+0x13c>
 800e68c:	9a07      	ldr	r2, [sp, #28]
 800e68e:	4654      	mov	r4, sl
 800e690:	2000      	movs	r0, #0
 800e692:	f04f 0c0a 	mov.w	ip, #10
 800e696:	4621      	mov	r1, r4
 800e698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e69c:	3b30      	subs	r3, #48	; 0x30
 800e69e:	2b09      	cmp	r3, #9
 800e6a0:	d94e      	bls.n	800e740 <_vfiprintf_r+0x1c4>
 800e6a2:	b1b0      	cbz	r0, 800e6d2 <_vfiprintf_r+0x156>
 800e6a4:	9207      	str	r2, [sp, #28]
 800e6a6:	e014      	b.n	800e6d2 <_vfiprintf_r+0x156>
 800e6a8:	eba0 0308 	sub.w	r3, r0, r8
 800e6ac:	fa09 f303 	lsl.w	r3, r9, r3
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	9304      	str	r3, [sp, #16]
 800e6b4:	46a2      	mov	sl, r4
 800e6b6:	e7d2      	b.n	800e65e <_vfiprintf_r+0xe2>
 800e6b8:	9b03      	ldr	r3, [sp, #12]
 800e6ba:	1d19      	adds	r1, r3, #4
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	9103      	str	r1, [sp, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	bfbb      	ittet	lt
 800e6c4:	425b      	neglt	r3, r3
 800e6c6:	f042 0202 	orrlt.w	r2, r2, #2
 800e6ca:	9307      	strge	r3, [sp, #28]
 800e6cc:	9307      	strlt	r3, [sp, #28]
 800e6ce:	bfb8      	it	lt
 800e6d0:	9204      	strlt	r2, [sp, #16]
 800e6d2:	7823      	ldrb	r3, [r4, #0]
 800e6d4:	2b2e      	cmp	r3, #46	; 0x2e
 800e6d6:	d10c      	bne.n	800e6f2 <_vfiprintf_r+0x176>
 800e6d8:	7863      	ldrb	r3, [r4, #1]
 800e6da:	2b2a      	cmp	r3, #42	; 0x2a
 800e6dc:	d135      	bne.n	800e74a <_vfiprintf_r+0x1ce>
 800e6de:	9b03      	ldr	r3, [sp, #12]
 800e6e0:	1d1a      	adds	r2, r3, #4
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	9203      	str	r2, [sp, #12]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	bfb8      	it	lt
 800e6ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e6ee:	3402      	adds	r4, #2
 800e6f0:	9305      	str	r3, [sp, #20]
 800e6f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e7d8 <_vfiprintf_r+0x25c>
 800e6f6:	7821      	ldrb	r1, [r4, #0]
 800e6f8:	2203      	movs	r2, #3
 800e6fa:	4650      	mov	r0, sl
 800e6fc:	f7f1 fd68 	bl	80001d0 <memchr>
 800e700:	b140      	cbz	r0, 800e714 <_vfiprintf_r+0x198>
 800e702:	2340      	movs	r3, #64	; 0x40
 800e704:	eba0 000a 	sub.w	r0, r0, sl
 800e708:	fa03 f000 	lsl.w	r0, r3, r0
 800e70c:	9b04      	ldr	r3, [sp, #16]
 800e70e:	4303      	orrs	r3, r0
 800e710:	3401      	adds	r4, #1
 800e712:	9304      	str	r3, [sp, #16]
 800e714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e718:	482c      	ldr	r0, [pc, #176]	; (800e7cc <_vfiprintf_r+0x250>)
 800e71a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e71e:	2206      	movs	r2, #6
 800e720:	f7f1 fd56 	bl	80001d0 <memchr>
 800e724:	2800      	cmp	r0, #0
 800e726:	d03f      	beq.n	800e7a8 <_vfiprintf_r+0x22c>
 800e728:	4b29      	ldr	r3, [pc, #164]	; (800e7d0 <_vfiprintf_r+0x254>)
 800e72a:	bb1b      	cbnz	r3, 800e774 <_vfiprintf_r+0x1f8>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	3307      	adds	r3, #7
 800e730:	f023 0307 	bic.w	r3, r3, #7
 800e734:	3308      	adds	r3, #8
 800e736:	9303      	str	r3, [sp, #12]
 800e738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e73a:	443b      	add	r3, r7
 800e73c:	9309      	str	r3, [sp, #36]	; 0x24
 800e73e:	e767      	b.n	800e610 <_vfiprintf_r+0x94>
 800e740:	fb0c 3202 	mla	r2, ip, r2, r3
 800e744:	460c      	mov	r4, r1
 800e746:	2001      	movs	r0, #1
 800e748:	e7a5      	b.n	800e696 <_vfiprintf_r+0x11a>
 800e74a:	2300      	movs	r3, #0
 800e74c:	3401      	adds	r4, #1
 800e74e:	9305      	str	r3, [sp, #20]
 800e750:	4619      	mov	r1, r3
 800e752:	f04f 0c0a 	mov.w	ip, #10
 800e756:	4620      	mov	r0, r4
 800e758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e75c:	3a30      	subs	r2, #48	; 0x30
 800e75e:	2a09      	cmp	r2, #9
 800e760:	d903      	bls.n	800e76a <_vfiprintf_r+0x1ee>
 800e762:	2b00      	cmp	r3, #0
 800e764:	d0c5      	beq.n	800e6f2 <_vfiprintf_r+0x176>
 800e766:	9105      	str	r1, [sp, #20]
 800e768:	e7c3      	b.n	800e6f2 <_vfiprintf_r+0x176>
 800e76a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e76e:	4604      	mov	r4, r0
 800e770:	2301      	movs	r3, #1
 800e772:	e7f0      	b.n	800e756 <_vfiprintf_r+0x1da>
 800e774:	ab03      	add	r3, sp, #12
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	462a      	mov	r2, r5
 800e77a:	4b16      	ldr	r3, [pc, #88]	; (800e7d4 <_vfiprintf_r+0x258>)
 800e77c:	a904      	add	r1, sp, #16
 800e77e:	4630      	mov	r0, r6
 800e780:	f3af 8000 	nop.w
 800e784:	4607      	mov	r7, r0
 800e786:	1c78      	adds	r0, r7, #1
 800e788:	d1d6      	bne.n	800e738 <_vfiprintf_r+0x1bc>
 800e78a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e78c:	07d9      	lsls	r1, r3, #31
 800e78e:	d405      	bmi.n	800e79c <_vfiprintf_r+0x220>
 800e790:	89ab      	ldrh	r3, [r5, #12]
 800e792:	059a      	lsls	r2, r3, #22
 800e794:	d402      	bmi.n	800e79c <_vfiprintf_r+0x220>
 800e796:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e798:	f7ff fdb7 	bl	800e30a <__retarget_lock_release_recursive>
 800e79c:	89ab      	ldrh	r3, [r5, #12]
 800e79e:	065b      	lsls	r3, r3, #25
 800e7a0:	f53f af12 	bmi.w	800e5c8 <_vfiprintf_r+0x4c>
 800e7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7a6:	e711      	b.n	800e5cc <_vfiprintf_r+0x50>
 800e7a8:	ab03      	add	r3, sp, #12
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	462a      	mov	r2, r5
 800e7ae:	4b09      	ldr	r3, [pc, #36]	; (800e7d4 <_vfiprintf_r+0x258>)
 800e7b0:	a904      	add	r1, sp, #16
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f000 f880 	bl	800e8b8 <_printf_i>
 800e7b8:	e7e4      	b.n	800e784 <_vfiprintf_r+0x208>
 800e7ba:	bf00      	nop
 800e7bc:	08010068 	.word	0x08010068
 800e7c0:	08010088 	.word	0x08010088
 800e7c4:	08010048 	.word	0x08010048
 800e7c8:	080100a8 	.word	0x080100a8
 800e7cc:	080100b2 	.word	0x080100b2
 800e7d0:	00000000 	.word	0x00000000
 800e7d4:	0800e557 	.word	0x0800e557
 800e7d8:	080100ae 	.word	0x080100ae

0800e7dc <_printf_common>:
 800e7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e0:	4616      	mov	r6, r2
 800e7e2:	4699      	mov	r9, r3
 800e7e4:	688a      	ldr	r2, [r1, #8]
 800e7e6:	690b      	ldr	r3, [r1, #16]
 800e7e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	bfb8      	it	lt
 800e7f0:	4613      	movlt	r3, r2
 800e7f2:	6033      	str	r3, [r6, #0]
 800e7f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e7f8:	4607      	mov	r7, r0
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	b10a      	cbz	r2, 800e802 <_printf_common+0x26>
 800e7fe:	3301      	adds	r3, #1
 800e800:	6033      	str	r3, [r6, #0]
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	0699      	lsls	r1, r3, #26
 800e806:	bf42      	ittt	mi
 800e808:	6833      	ldrmi	r3, [r6, #0]
 800e80a:	3302      	addmi	r3, #2
 800e80c:	6033      	strmi	r3, [r6, #0]
 800e80e:	6825      	ldr	r5, [r4, #0]
 800e810:	f015 0506 	ands.w	r5, r5, #6
 800e814:	d106      	bne.n	800e824 <_printf_common+0x48>
 800e816:	f104 0a19 	add.w	sl, r4, #25
 800e81a:	68e3      	ldr	r3, [r4, #12]
 800e81c:	6832      	ldr	r2, [r6, #0]
 800e81e:	1a9b      	subs	r3, r3, r2
 800e820:	42ab      	cmp	r3, r5
 800e822:	dc26      	bgt.n	800e872 <_printf_common+0x96>
 800e824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e828:	1e13      	subs	r3, r2, #0
 800e82a:	6822      	ldr	r2, [r4, #0]
 800e82c:	bf18      	it	ne
 800e82e:	2301      	movne	r3, #1
 800e830:	0692      	lsls	r2, r2, #26
 800e832:	d42b      	bmi.n	800e88c <_printf_common+0xb0>
 800e834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e838:	4649      	mov	r1, r9
 800e83a:	4638      	mov	r0, r7
 800e83c:	47c0      	blx	r8
 800e83e:	3001      	adds	r0, #1
 800e840:	d01e      	beq.n	800e880 <_printf_common+0xa4>
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	68e5      	ldr	r5, [r4, #12]
 800e846:	6832      	ldr	r2, [r6, #0]
 800e848:	f003 0306 	and.w	r3, r3, #6
 800e84c:	2b04      	cmp	r3, #4
 800e84e:	bf08      	it	eq
 800e850:	1aad      	subeq	r5, r5, r2
 800e852:	68a3      	ldr	r3, [r4, #8]
 800e854:	6922      	ldr	r2, [r4, #16]
 800e856:	bf0c      	ite	eq
 800e858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e85c:	2500      	movne	r5, #0
 800e85e:	4293      	cmp	r3, r2
 800e860:	bfc4      	itt	gt
 800e862:	1a9b      	subgt	r3, r3, r2
 800e864:	18ed      	addgt	r5, r5, r3
 800e866:	2600      	movs	r6, #0
 800e868:	341a      	adds	r4, #26
 800e86a:	42b5      	cmp	r5, r6
 800e86c:	d11a      	bne.n	800e8a4 <_printf_common+0xc8>
 800e86e:	2000      	movs	r0, #0
 800e870:	e008      	b.n	800e884 <_printf_common+0xa8>
 800e872:	2301      	movs	r3, #1
 800e874:	4652      	mov	r2, sl
 800e876:	4649      	mov	r1, r9
 800e878:	4638      	mov	r0, r7
 800e87a:	47c0      	blx	r8
 800e87c:	3001      	adds	r0, #1
 800e87e:	d103      	bne.n	800e888 <_printf_common+0xac>
 800e880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e888:	3501      	adds	r5, #1
 800e88a:	e7c6      	b.n	800e81a <_printf_common+0x3e>
 800e88c:	18e1      	adds	r1, r4, r3
 800e88e:	1c5a      	adds	r2, r3, #1
 800e890:	2030      	movs	r0, #48	; 0x30
 800e892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e896:	4422      	add	r2, r4
 800e898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e89c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8a0:	3302      	adds	r3, #2
 800e8a2:	e7c7      	b.n	800e834 <_printf_common+0x58>
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	4622      	mov	r2, r4
 800e8a8:	4649      	mov	r1, r9
 800e8aa:	4638      	mov	r0, r7
 800e8ac:	47c0      	blx	r8
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	d0e6      	beq.n	800e880 <_printf_common+0xa4>
 800e8b2:	3601      	adds	r6, #1
 800e8b4:	e7d9      	b.n	800e86a <_printf_common+0x8e>
	...

0800e8b8 <_printf_i>:
 800e8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8bc:	460c      	mov	r4, r1
 800e8be:	4691      	mov	r9, r2
 800e8c0:	7e27      	ldrb	r7, [r4, #24]
 800e8c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e8c4:	2f78      	cmp	r7, #120	; 0x78
 800e8c6:	4680      	mov	r8, r0
 800e8c8:	469a      	mov	sl, r3
 800e8ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8ce:	d807      	bhi.n	800e8e0 <_printf_i+0x28>
 800e8d0:	2f62      	cmp	r7, #98	; 0x62
 800e8d2:	d80a      	bhi.n	800e8ea <_printf_i+0x32>
 800e8d4:	2f00      	cmp	r7, #0
 800e8d6:	f000 80d8 	beq.w	800ea8a <_printf_i+0x1d2>
 800e8da:	2f58      	cmp	r7, #88	; 0x58
 800e8dc:	f000 80a3 	beq.w	800ea26 <_printf_i+0x16e>
 800e8e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e8e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e8e8:	e03a      	b.n	800e960 <_printf_i+0xa8>
 800e8ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e8ee:	2b15      	cmp	r3, #21
 800e8f0:	d8f6      	bhi.n	800e8e0 <_printf_i+0x28>
 800e8f2:	a001      	add	r0, pc, #4	; (adr r0, 800e8f8 <_printf_i+0x40>)
 800e8f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e8f8:	0800e951 	.word	0x0800e951
 800e8fc:	0800e965 	.word	0x0800e965
 800e900:	0800e8e1 	.word	0x0800e8e1
 800e904:	0800e8e1 	.word	0x0800e8e1
 800e908:	0800e8e1 	.word	0x0800e8e1
 800e90c:	0800e8e1 	.word	0x0800e8e1
 800e910:	0800e965 	.word	0x0800e965
 800e914:	0800e8e1 	.word	0x0800e8e1
 800e918:	0800e8e1 	.word	0x0800e8e1
 800e91c:	0800e8e1 	.word	0x0800e8e1
 800e920:	0800e8e1 	.word	0x0800e8e1
 800e924:	0800ea71 	.word	0x0800ea71
 800e928:	0800e995 	.word	0x0800e995
 800e92c:	0800ea53 	.word	0x0800ea53
 800e930:	0800e8e1 	.word	0x0800e8e1
 800e934:	0800e8e1 	.word	0x0800e8e1
 800e938:	0800ea93 	.word	0x0800ea93
 800e93c:	0800e8e1 	.word	0x0800e8e1
 800e940:	0800e995 	.word	0x0800e995
 800e944:	0800e8e1 	.word	0x0800e8e1
 800e948:	0800e8e1 	.word	0x0800e8e1
 800e94c:	0800ea5b 	.word	0x0800ea5b
 800e950:	680b      	ldr	r3, [r1, #0]
 800e952:	1d1a      	adds	r2, r3, #4
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	600a      	str	r2, [r1, #0]
 800e958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e95c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e960:	2301      	movs	r3, #1
 800e962:	e0a3      	b.n	800eaac <_printf_i+0x1f4>
 800e964:	6825      	ldr	r5, [r4, #0]
 800e966:	6808      	ldr	r0, [r1, #0]
 800e968:	062e      	lsls	r6, r5, #24
 800e96a:	f100 0304 	add.w	r3, r0, #4
 800e96e:	d50a      	bpl.n	800e986 <_printf_i+0xce>
 800e970:	6805      	ldr	r5, [r0, #0]
 800e972:	600b      	str	r3, [r1, #0]
 800e974:	2d00      	cmp	r5, #0
 800e976:	da03      	bge.n	800e980 <_printf_i+0xc8>
 800e978:	232d      	movs	r3, #45	; 0x2d
 800e97a:	426d      	negs	r5, r5
 800e97c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e980:	485e      	ldr	r0, [pc, #376]	; (800eafc <_printf_i+0x244>)
 800e982:	230a      	movs	r3, #10
 800e984:	e019      	b.n	800e9ba <_printf_i+0x102>
 800e986:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e98a:	6805      	ldr	r5, [r0, #0]
 800e98c:	600b      	str	r3, [r1, #0]
 800e98e:	bf18      	it	ne
 800e990:	b22d      	sxthne	r5, r5
 800e992:	e7ef      	b.n	800e974 <_printf_i+0xbc>
 800e994:	680b      	ldr	r3, [r1, #0]
 800e996:	6825      	ldr	r5, [r4, #0]
 800e998:	1d18      	adds	r0, r3, #4
 800e99a:	6008      	str	r0, [r1, #0]
 800e99c:	0628      	lsls	r0, r5, #24
 800e99e:	d501      	bpl.n	800e9a4 <_printf_i+0xec>
 800e9a0:	681d      	ldr	r5, [r3, #0]
 800e9a2:	e002      	b.n	800e9aa <_printf_i+0xf2>
 800e9a4:	0669      	lsls	r1, r5, #25
 800e9a6:	d5fb      	bpl.n	800e9a0 <_printf_i+0xe8>
 800e9a8:	881d      	ldrh	r5, [r3, #0]
 800e9aa:	4854      	ldr	r0, [pc, #336]	; (800eafc <_printf_i+0x244>)
 800e9ac:	2f6f      	cmp	r7, #111	; 0x6f
 800e9ae:	bf0c      	ite	eq
 800e9b0:	2308      	moveq	r3, #8
 800e9b2:	230a      	movne	r3, #10
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9ba:	6866      	ldr	r6, [r4, #4]
 800e9bc:	60a6      	str	r6, [r4, #8]
 800e9be:	2e00      	cmp	r6, #0
 800e9c0:	bfa2      	ittt	ge
 800e9c2:	6821      	ldrge	r1, [r4, #0]
 800e9c4:	f021 0104 	bicge.w	r1, r1, #4
 800e9c8:	6021      	strge	r1, [r4, #0]
 800e9ca:	b90d      	cbnz	r5, 800e9d0 <_printf_i+0x118>
 800e9cc:	2e00      	cmp	r6, #0
 800e9ce:	d04d      	beq.n	800ea6c <_printf_i+0x1b4>
 800e9d0:	4616      	mov	r6, r2
 800e9d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e9d6:	fb03 5711 	mls	r7, r3, r1, r5
 800e9da:	5dc7      	ldrb	r7, [r0, r7]
 800e9dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9e0:	462f      	mov	r7, r5
 800e9e2:	42bb      	cmp	r3, r7
 800e9e4:	460d      	mov	r5, r1
 800e9e6:	d9f4      	bls.n	800e9d2 <_printf_i+0x11a>
 800e9e8:	2b08      	cmp	r3, #8
 800e9ea:	d10b      	bne.n	800ea04 <_printf_i+0x14c>
 800e9ec:	6823      	ldr	r3, [r4, #0]
 800e9ee:	07df      	lsls	r7, r3, #31
 800e9f0:	d508      	bpl.n	800ea04 <_printf_i+0x14c>
 800e9f2:	6923      	ldr	r3, [r4, #16]
 800e9f4:	6861      	ldr	r1, [r4, #4]
 800e9f6:	4299      	cmp	r1, r3
 800e9f8:	bfde      	ittt	le
 800e9fa:	2330      	movle	r3, #48	; 0x30
 800e9fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea00:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ea04:	1b92      	subs	r2, r2, r6
 800ea06:	6122      	str	r2, [r4, #16]
 800ea08:	f8cd a000 	str.w	sl, [sp]
 800ea0c:	464b      	mov	r3, r9
 800ea0e:	aa03      	add	r2, sp, #12
 800ea10:	4621      	mov	r1, r4
 800ea12:	4640      	mov	r0, r8
 800ea14:	f7ff fee2 	bl	800e7dc <_printf_common>
 800ea18:	3001      	adds	r0, #1
 800ea1a:	d14c      	bne.n	800eab6 <_printf_i+0x1fe>
 800ea1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea20:	b004      	add	sp, #16
 800ea22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea26:	4835      	ldr	r0, [pc, #212]	; (800eafc <_printf_i+0x244>)
 800ea28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	680e      	ldr	r6, [r1, #0]
 800ea30:	061f      	lsls	r7, r3, #24
 800ea32:	f856 5b04 	ldr.w	r5, [r6], #4
 800ea36:	600e      	str	r6, [r1, #0]
 800ea38:	d514      	bpl.n	800ea64 <_printf_i+0x1ac>
 800ea3a:	07d9      	lsls	r1, r3, #31
 800ea3c:	bf44      	itt	mi
 800ea3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ea42:	6023      	strmi	r3, [r4, #0]
 800ea44:	b91d      	cbnz	r5, 800ea4e <_printf_i+0x196>
 800ea46:	6823      	ldr	r3, [r4, #0]
 800ea48:	f023 0320 	bic.w	r3, r3, #32
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	2310      	movs	r3, #16
 800ea50:	e7b0      	b.n	800e9b4 <_printf_i+0xfc>
 800ea52:	6823      	ldr	r3, [r4, #0]
 800ea54:	f043 0320 	orr.w	r3, r3, #32
 800ea58:	6023      	str	r3, [r4, #0]
 800ea5a:	2378      	movs	r3, #120	; 0x78
 800ea5c:	4828      	ldr	r0, [pc, #160]	; (800eb00 <_printf_i+0x248>)
 800ea5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea62:	e7e3      	b.n	800ea2c <_printf_i+0x174>
 800ea64:	065e      	lsls	r6, r3, #25
 800ea66:	bf48      	it	mi
 800ea68:	b2ad      	uxthmi	r5, r5
 800ea6a:	e7e6      	b.n	800ea3a <_printf_i+0x182>
 800ea6c:	4616      	mov	r6, r2
 800ea6e:	e7bb      	b.n	800e9e8 <_printf_i+0x130>
 800ea70:	680b      	ldr	r3, [r1, #0]
 800ea72:	6826      	ldr	r6, [r4, #0]
 800ea74:	6960      	ldr	r0, [r4, #20]
 800ea76:	1d1d      	adds	r5, r3, #4
 800ea78:	600d      	str	r5, [r1, #0]
 800ea7a:	0635      	lsls	r5, r6, #24
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	d501      	bpl.n	800ea84 <_printf_i+0x1cc>
 800ea80:	6018      	str	r0, [r3, #0]
 800ea82:	e002      	b.n	800ea8a <_printf_i+0x1d2>
 800ea84:	0671      	lsls	r1, r6, #25
 800ea86:	d5fb      	bpl.n	800ea80 <_printf_i+0x1c8>
 800ea88:	8018      	strh	r0, [r3, #0]
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	6123      	str	r3, [r4, #16]
 800ea8e:	4616      	mov	r6, r2
 800ea90:	e7ba      	b.n	800ea08 <_printf_i+0x150>
 800ea92:	680b      	ldr	r3, [r1, #0]
 800ea94:	1d1a      	adds	r2, r3, #4
 800ea96:	600a      	str	r2, [r1, #0]
 800ea98:	681e      	ldr	r6, [r3, #0]
 800ea9a:	6862      	ldr	r2, [r4, #4]
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f7f1 fb96 	bl	80001d0 <memchr>
 800eaa4:	b108      	cbz	r0, 800eaaa <_printf_i+0x1f2>
 800eaa6:	1b80      	subs	r0, r0, r6
 800eaa8:	6060      	str	r0, [r4, #4]
 800eaaa:	6863      	ldr	r3, [r4, #4]
 800eaac:	6123      	str	r3, [r4, #16]
 800eaae:	2300      	movs	r3, #0
 800eab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eab4:	e7a8      	b.n	800ea08 <_printf_i+0x150>
 800eab6:	6923      	ldr	r3, [r4, #16]
 800eab8:	4632      	mov	r2, r6
 800eaba:	4649      	mov	r1, r9
 800eabc:	4640      	mov	r0, r8
 800eabe:	47d0      	blx	sl
 800eac0:	3001      	adds	r0, #1
 800eac2:	d0ab      	beq.n	800ea1c <_printf_i+0x164>
 800eac4:	6823      	ldr	r3, [r4, #0]
 800eac6:	079b      	lsls	r3, r3, #30
 800eac8:	d413      	bmi.n	800eaf2 <_printf_i+0x23a>
 800eaca:	68e0      	ldr	r0, [r4, #12]
 800eacc:	9b03      	ldr	r3, [sp, #12]
 800eace:	4298      	cmp	r0, r3
 800ead0:	bfb8      	it	lt
 800ead2:	4618      	movlt	r0, r3
 800ead4:	e7a4      	b.n	800ea20 <_printf_i+0x168>
 800ead6:	2301      	movs	r3, #1
 800ead8:	4632      	mov	r2, r6
 800eada:	4649      	mov	r1, r9
 800eadc:	4640      	mov	r0, r8
 800eade:	47d0      	blx	sl
 800eae0:	3001      	adds	r0, #1
 800eae2:	d09b      	beq.n	800ea1c <_printf_i+0x164>
 800eae4:	3501      	adds	r5, #1
 800eae6:	68e3      	ldr	r3, [r4, #12]
 800eae8:	9903      	ldr	r1, [sp, #12]
 800eaea:	1a5b      	subs	r3, r3, r1
 800eaec:	42ab      	cmp	r3, r5
 800eaee:	dcf2      	bgt.n	800ead6 <_printf_i+0x21e>
 800eaf0:	e7eb      	b.n	800eaca <_printf_i+0x212>
 800eaf2:	2500      	movs	r5, #0
 800eaf4:	f104 0619 	add.w	r6, r4, #25
 800eaf8:	e7f5      	b.n	800eae6 <_printf_i+0x22e>
 800eafa:	bf00      	nop
 800eafc:	080100b9 	.word	0x080100b9
 800eb00:	080100ca 	.word	0x080100ca

0800eb04 <_sbrk_r>:
 800eb04:	b538      	push	{r3, r4, r5, lr}
 800eb06:	4d06      	ldr	r5, [pc, #24]	; (800eb20 <_sbrk_r+0x1c>)
 800eb08:	2300      	movs	r3, #0
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	4608      	mov	r0, r1
 800eb0e:	602b      	str	r3, [r5, #0]
 800eb10:	f7f5 fa56 	bl	8003fc0 <_sbrk>
 800eb14:	1c43      	adds	r3, r0, #1
 800eb16:	d102      	bne.n	800eb1e <_sbrk_r+0x1a>
 800eb18:	682b      	ldr	r3, [r5, #0]
 800eb1a:	b103      	cbz	r3, 800eb1e <_sbrk_r+0x1a>
 800eb1c:	6023      	str	r3, [r4, #0]
 800eb1e:	bd38      	pop	{r3, r4, r5, pc}
 800eb20:	20010424 	.word	0x20010424

0800eb24 <__sread>:
 800eb24:	b510      	push	{r4, lr}
 800eb26:	460c      	mov	r4, r1
 800eb28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb2c:	f000 f8a0 	bl	800ec70 <_read_r>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	bfab      	itete	ge
 800eb34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb36:	89a3      	ldrhlt	r3, [r4, #12]
 800eb38:	181b      	addge	r3, r3, r0
 800eb3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb3e:	bfac      	ite	ge
 800eb40:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb42:	81a3      	strhlt	r3, [r4, #12]
 800eb44:	bd10      	pop	{r4, pc}

0800eb46 <__swrite>:
 800eb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4a:	461f      	mov	r7, r3
 800eb4c:	898b      	ldrh	r3, [r1, #12]
 800eb4e:	05db      	lsls	r3, r3, #23
 800eb50:	4605      	mov	r5, r0
 800eb52:	460c      	mov	r4, r1
 800eb54:	4616      	mov	r6, r2
 800eb56:	d505      	bpl.n	800eb64 <__swrite+0x1e>
 800eb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb5c:	2302      	movs	r3, #2
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f000 f868 	bl	800ec34 <_lseek_r>
 800eb64:	89a3      	ldrh	r3, [r4, #12]
 800eb66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb6e:	81a3      	strh	r3, [r4, #12]
 800eb70:	4632      	mov	r2, r6
 800eb72:	463b      	mov	r3, r7
 800eb74:	4628      	mov	r0, r5
 800eb76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7a:	f000 b817 	b.w	800ebac <_write_r>

0800eb7e <__sseek>:
 800eb7e:	b510      	push	{r4, lr}
 800eb80:	460c      	mov	r4, r1
 800eb82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb86:	f000 f855 	bl	800ec34 <_lseek_r>
 800eb8a:	1c43      	adds	r3, r0, #1
 800eb8c:	89a3      	ldrh	r3, [r4, #12]
 800eb8e:	bf15      	itete	ne
 800eb90:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb9a:	81a3      	strheq	r3, [r4, #12]
 800eb9c:	bf18      	it	ne
 800eb9e:	81a3      	strhne	r3, [r4, #12]
 800eba0:	bd10      	pop	{r4, pc}

0800eba2 <__sclose>:
 800eba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba6:	f000 b813 	b.w	800ebd0 <_close_r>
	...

0800ebac <_write_r>:
 800ebac:	b538      	push	{r3, r4, r5, lr}
 800ebae:	4d07      	ldr	r5, [pc, #28]	; (800ebcc <_write_r+0x20>)
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	4608      	mov	r0, r1
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	602a      	str	r2, [r5, #0]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	f7f5 f9af 	bl	8003f1e <_write>
 800ebc0:	1c43      	adds	r3, r0, #1
 800ebc2:	d102      	bne.n	800ebca <_write_r+0x1e>
 800ebc4:	682b      	ldr	r3, [r5, #0]
 800ebc6:	b103      	cbz	r3, 800ebca <_write_r+0x1e>
 800ebc8:	6023      	str	r3, [r4, #0]
 800ebca:	bd38      	pop	{r3, r4, r5, pc}
 800ebcc:	20010424 	.word	0x20010424

0800ebd0 <_close_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4d06      	ldr	r5, [pc, #24]	; (800ebec <_close_r+0x1c>)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	4608      	mov	r0, r1
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	f7f5 f9bb 	bl	8003f56 <_close>
 800ebe0:	1c43      	adds	r3, r0, #1
 800ebe2:	d102      	bne.n	800ebea <_close_r+0x1a>
 800ebe4:	682b      	ldr	r3, [r5, #0]
 800ebe6:	b103      	cbz	r3, 800ebea <_close_r+0x1a>
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	20010424 	.word	0x20010424

0800ebf0 <_fstat_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4d07      	ldr	r5, [pc, #28]	; (800ec10 <_fstat_r+0x20>)
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	602b      	str	r3, [r5, #0]
 800ebfe:	f7f5 f9b6 	bl	8003f6e <_fstat>
 800ec02:	1c43      	adds	r3, r0, #1
 800ec04:	d102      	bne.n	800ec0c <_fstat_r+0x1c>
 800ec06:	682b      	ldr	r3, [r5, #0]
 800ec08:	b103      	cbz	r3, 800ec0c <_fstat_r+0x1c>
 800ec0a:	6023      	str	r3, [r4, #0]
 800ec0c:	bd38      	pop	{r3, r4, r5, pc}
 800ec0e:	bf00      	nop
 800ec10:	20010424 	.word	0x20010424

0800ec14 <_isatty_r>:
 800ec14:	b538      	push	{r3, r4, r5, lr}
 800ec16:	4d06      	ldr	r5, [pc, #24]	; (800ec30 <_isatty_r+0x1c>)
 800ec18:	2300      	movs	r3, #0
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	4608      	mov	r0, r1
 800ec1e:	602b      	str	r3, [r5, #0]
 800ec20:	f7f5 f9b5 	bl	8003f8e <_isatty>
 800ec24:	1c43      	adds	r3, r0, #1
 800ec26:	d102      	bne.n	800ec2e <_isatty_r+0x1a>
 800ec28:	682b      	ldr	r3, [r5, #0]
 800ec2a:	b103      	cbz	r3, 800ec2e <_isatty_r+0x1a>
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	bd38      	pop	{r3, r4, r5, pc}
 800ec30:	20010424 	.word	0x20010424

0800ec34 <_lseek_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4d07      	ldr	r5, [pc, #28]	; (800ec54 <_lseek_r+0x20>)
 800ec38:	4604      	mov	r4, r0
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	2200      	movs	r2, #0
 800ec40:	602a      	str	r2, [r5, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	f7f5 f9ae 	bl	8003fa4 <_lseek>
 800ec48:	1c43      	adds	r3, r0, #1
 800ec4a:	d102      	bne.n	800ec52 <_lseek_r+0x1e>
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	b103      	cbz	r3, 800ec52 <_lseek_r+0x1e>
 800ec50:	6023      	str	r3, [r4, #0]
 800ec52:	bd38      	pop	{r3, r4, r5, pc}
 800ec54:	20010424 	.word	0x20010424

0800ec58 <__malloc_lock>:
 800ec58:	4801      	ldr	r0, [pc, #4]	; (800ec60 <__malloc_lock+0x8>)
 800ec5a:	f7ff bb55 	b.w	800e308 <__retarget_lock_acquire_recursive>
 800ec5e:	bf00      	nop
 800ec60:	2001041c 	.word	0x2001041c

0800ec64 <__malloc_unlock>:
 800ec64:	4801      	ldr	r0, [pc, #4]	; (800ec6c <__malloc_unlock+0x8>)
 800ec66:	f7ff bb50 	b.w	800e30a <__retarget_lock_release_recursive>
 800ec6a:	bf00      	nop
 800ec6c:	2001041c 	.word	0x2001041c

0800ec70 <_read_r>:
 800ec70:	b538      	push	{r3, r4, r5, lr}
 800ec72:	4d07      	ldr	r5, [pc, #28]	; (800ec90 <_read_r+0x20>)
 800ec74:	4604      	mov	r4, r0
 800ec76:	4608      	mov	r0, r1
 800ec78:	4611      	mov	r1, r2
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	602a      	str	r2, [r5, #0]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	f7f5 f930 	bl	8003ee4 <_read>
 800ec84:	1c43      	adds	r3, r0, #1
 800ec86:	d102      	bne.n	800ec8e <_read_r+0x1e>
 800ec88:	682b      	ldr	r3, [r5, #0]
 800ec8a:	b103      	cbz	r3, 800ec8e <_read_r+0x1e>
 800ec8c:	6023      	str	r3, [r4, #0]
 800ec8e:	bd38      	pop	{r3, r4, r5, pc}
 800ec90:	20010424 	.word	0x20010424
 800ec94:	00000000 	.word	0x00000000

0800ec98 <tan>:
 800ec98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec9a:	ec53 2b10 	vmov	r2, r3, d0
 800ec9e:	4814      	ldr	r0, [pc, #80]	; (800ecf0 <tan+0x58>)
 800eca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eca4:	4281      	cmp	r1, r0
 800eca6:	dc05      	bgt.n	800ecb4 <tan+0x1c>
 800eca8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800ece8 <tan+0x50>
 800ecac:	2001      	movs	r0, #1
 800ecae:	f000 fd6f 	bl	800f790 <__kernel_tan>
 800ecb2:	e009      	b.n	800ecc8 <tan+0x30>
 800ecb4:	480f      	ldr	r0, [pc, #60]	; (800ecf4 <tan+0x5c>)
 800ecb6:	4281      	cmp	r1, r0
 800ecb8:	dd09      	ble.n	800ecce <tan+0x36>
 800ecba:	ee10 0a10 	vmov	r0, s0
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	f7f1 fada 	bl	8000278 <__aeabi_dsub>
 800ecc4:	ec41 0b10 	vmov	d0, r0, r1
 800ecc8:	b005      	add	sp, #20
 800ecca:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecce:	4668      	mov	r0, sp
 800ecd0:	f000 f812 	bl	800ecf8 <__ieee754_rem_pio2>
 800ecd4:	0040      	lsls	r0, r0, #1
 800ecd6:	f000 0002 	and.w	r0, r0, #2
 800ecda:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ecde:	ed9d 0b00 	vldr	d0, [sp]
 800ece2:	f1c0 0001 	rsb	r0, r0, #1
 800ece6:	e7e2      	b.n	800ecae <tan+0x16>
	...
 800ecf0:	3fe921fb 	.word	0x3fe921fb
 800ecf4:	7fefffff 	.word	0x7fefffff

0800ecf8 <__ieee754_rem_pio2>:
 800ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	ed2d 8b02 	vpush	{d8}
 800ed00:	ec55 4b10 	vmov	r4, r5, d0
 800ed04:	4bca      	ldr	r3, [pc, #808]	; (800f030 <__ieee754_rem_pio2+0x338>)
 800ed06:	b08b      	sub	sp, #44	; 0x2c
 800ed08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ed0c:	4598      	cmp	r8, r3
 800ed0e:	4682      	mov	sl, r0
 800ed10:	9502      	str	r5, [sp, #8]
 800ed12:	dc08      	bgt.n	800ed26 <__ieee754_rem_pio2+0x2e>
 800ed14:	2200      	movs	r2, #0
 800ed16:	2300      	movs	r3, #0
 800ed18:	ed80 0b00 	vstr	d0, [r0]
 800ed1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ed20:	f04f 0b00 	mov.w	fp, #0
 800ed24:	e028      	b.n	800ed78 <__ieee754_rem_pio2+0x80>
 800ed26:	4bc3      	ldr	r3, [pc, #780]	; (800f034 <__ieee754_rem_pio2+0x33c>)
 800ed28:	4598      	cmp	r8, r3
 800ed2a:	dc78      	bgt.n	800ee1e <__ieee754_rem_pio2+0x126>
 800ed2c:	9b02      	ldr	r3, [sp, #8]
 800ed2e:	4ec2      	ldr	r6, [pc, #776]	; (800f038 <__ieee754_rem_pio2+0x340>)
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	ee10 0a10 	vmov	r0, s0
 800ed36:	a3b0      	add	r3, pc, #704	; (adr r3, 800eff8 <__ieee754_rem_pio2+0x300>)
 800ed38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	dd39      	ble.n	800edb4 <__ieee754_rem_pio2+0xbc>
 800ed40:	f7f1 fa9a 	bl	8000278 <__aeabi_dsub>
 800ed44:	45b0      	cmp	r8, r6
 800ed46:	4604      	mov	r4, r0
 800ed48:	460d      	mov	r5, r1
 800ed4a:	d01b      	beq.n	800ed84 <__ieee754_rem_pio2+0x8c>
 800ed4c:	a3ac      	add	r3, pc, #688	; (adr r3, 800f000 <__ieee754_rem_pio2+0x308>)
 800ed4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed52:	f7f1 fa91 	bl	8000278 <__aeabi_dsub>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	e9ca 2300 	strd	r2, r3, [sl]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	4629      	mov	r1, r5
 800ed62:	f7f1 fa89 	bl	8000278 <__aeabi_dsub>
 800ed66:	a3a6      	add	r3, pc, #664	; (adr r3, 800f000 <__ieee754_rem_pio2+0x308>)
 800ed68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6c:	f7f1 fa84 	bl	8000278 <__aeabi_dsub>
 800ed70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed74:	f04f 0b01 	mov.w	fp, #1
 800ed78:	4658      	mov	r0, fp
 800ed7a:	b00b      	add	sp, #44	; 0x2c
 800ed7c:	ecbd 8b02 	vpop	{d8}
 800ed80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed84:	a3a0      	add	r3, pc, #640	; (adr r3, 800f008 <__ieee754_rem_pio2+0x310>)
 800ed86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8a:	f7f1 fa75 	bl	8000278 <__aeabi_dsub>
 800ed8e:	a3a0      	add	r3, pc, #640	; (adr r3, 800f010 <__ieee754_rem_pio2+0x318>)
 800ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed94:	4604      	mov	r4, r0
 800ed96:	460d      	mov	r5, r1
 800ed98:	f7f1 fa6e 	bl	8000278 <__aeabi_dsub>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	460b      	mov	r3, r1
 800eda0:	e9ca 2300 	strd	r2, r3, [sl]
 800eda4:	4620      	mov	r0, r4
 800eda6:	4629      	mov	r1, r5
 800eda8:	f7f1 fa66 	bl	8000278 <__aeabi_dsub>
 800edac:	a398      	add	r3, pc, #608	; (adr r3, 800f010 <__ieee754_rem_pio2+0x318>)
 800edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb2:	e7db      	b.n	800ed6c <__ieee754_rem_pio2+0x74>
 800edb4:	f7f1 fa62 	bl	800027c <__adddf3>
 800edb8:	45b0      	cmp	r8, r6
 800edba:	4604      	mov	r4, r0
 800edbc:	460d      	mov	r5, r1
 800edbe:	d016      	beq.n	800edee <__ieee754_rem_pio2+0xf6>
 800edc0:	a38f      	add	r3, pc, #572	; (adr r3, 800f000 <__ieee754_rem_pio2+0x308>)
 800edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc6:	f7f1 fa59 	bl	800027c <__adddf3>
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	e9ca 2300 	strd	r2, r3, [sl]
 800edd2:	4620      	mov	r0, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	f7f1 fa4f 	bl	8000278 <__aeabi_dsub>
 800edda:	a389      	add	r3, pc, #548	; (adr r3, 800f000 <__ieee754_rem_pio2+0x308>)
 800eddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede0:	f7f1 fa4c 	bl	800027c <__adddf3>
 800ede4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ede8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800edec:	e7c4      	b.n	800ed78 <__ieee754_rem_pio2+0x80>
 800edee:	a386      	add	r3, pc, #536	; (adr r3, 800f008 <__ieee754_rem_pio2+0x310>)
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	f7f1 fa42 	bl	800027c <__adddf3>
 800edf8:	a385      	add	r3, pc, #532	; (adr r3, 800f010 <__ieee754_rem_pio2+0x318>)
 800edfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfe:	4604      	mov	r4, r0
 800ee00:	460d      	mov	r5, r1
 800ee02:	f7f1 fa3b 	bl	800027c <__adddf3>
 800ee06:	4602      	mov	r2, r0
 800ee08:	460b      	mov	r3, r1
 800ee0a:	e9ca 2300 	strd	r2, r3, [sl]
 800ee0e:	4620      	mov	r0, r4
 800ee10:	4629      	mov	r1, r5
 800ee12:	f7f1 fa31 	bl	8000278 <__aeabi_dsub>
 800ee16:	a37e      	add	r3, pc, #504	; (adr r3, 800f010 <__ieee754_rem_pio2+0x318>)
 800ee18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1c:	e7e0      	b.n	800ede0 <__ieee754_rem_pio2+0xe8>
 800ee1e:	4b87      	ldr	r3, [pc, #540]	; (800f03c <__ieee754_rem_pio2+0x344>)
 800ee20:	4598      	cmp	r8, r3
 800ee22:	f300 80d9 	bgt.w	800efd8 <__ieee754_rem_pio2+0x2e0>
 800ee26:	f000 fe87 	bl	800fb38 <fabs>
 800ee2a:	ec55 4b10 	vmov	r4, r5, d0
 800ee2e:	ee10 0a10 	vmov	r0, s0
 800ee32:	a379      	add	r3, pc, #484	; (adr r3, 800f018 <__ieee754_rem_pio2+0x320>)
 800ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee38:	4629      	mov	r1, r5
 800ee3a:	f7f1 fbd5 	bl	80005e8 <__aeabi_dmul>
 800ee3e:	4b80      	ldr	r3, [pc, #512]	; (800f040 <__ieee754_rem_pio2+0x348>)
 800ee40:	2200      	movs	r2, #0
 800ee42:	f7f1 fa1b 	bl	800027c <__adddf3>
 800ee46:	f7f1 fe69 	bl	8000b1c <__aeabi_d2iz>
 800ee4a:	4683      	mov	fp, r0
 800ee4c:	f7f1 fb62 	bl	8000514 <__aeabi_i2d>
 800ee50:	4602      	mov	r2, r0
 800ee52:	460b      	mov	r3, r1
 800ee54:	ec43 2b18 	vmov	d8, r2, r3
 800ee58:	a367      	add	r3, pc, #412	; (adr r3, 800eff8 <__ieee754_rem_pio2+0x300>)
 800ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5e:	f7f1 fbc3 	bl	80005e8 <__aeabi_dmul>
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	4620      	mov	r0, r4
 800ee68:	4629      	mov	r1, r5
 800ee6a:	f7f1 fa05 	bl	8000278 <__aeabi_dsub>
 800ee6e:	a364      	add	r3, pc, #400	; (adr r3, 800f000 <__ieee754_rem_pio2+0x308>)
 800ee70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee74:	4606      	mov	r6, r0
 800ee76:	460f      	mov	r7, r1
 800ee78:	ec51 0b18 	vmov	r0, r1, d8
 800ee7c:	f7f1 fbb4 	bl	80005e8 <__aeabi_dmul>
 800ee80:	f1bb 0f1f 	cmp.w	fp, #31
 800ee84:	4604      	mov	r4, r0
 800ee86:	460d      	mov	r5, r1
 800ee88:	dc0d      	bgt.n	800eea6 <__ieee754_rem_pio2+0x1ae>
 800ee8a:	4b6e      	ldr	r3, [pc, #440]	; (800f044 <__ieee754_rem_pio2+0x34c>)
 800ee8c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ee90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee94:	4543      	cmp	r3, r8
 800ee96:	d006      	beq.n	800eea6 <__ieee754_rem_pio2+0x1ae>
 800ee98:	4622      	mov	r2, r4
 800ee9a:	462b      	mov	r3, r5
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	4639      	mov	r1, r7
 800eea0:	f7f1 f9ea 	bl	8000278 <__aeabi_dsub>
 800eea4:	e00f      	b.n	800eec6 <__ieee754_rem_pio2+0x1ce>
 800eea6:	462b      	mov	r3, r5
 800eea8:	4622      	mov	r2, r4
 800eeaa:	4630      	mov	r0, r6
 800eeac:	4639      	mov	r1, r7
 800eeae:	f7f1 f9e3 	bl	8000278 <__aeabi_dsub>
 800eeb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eeb6:	9303      	str	r3, [sp, #12]
 800eeb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eebc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800eec0:	f1b8 0f10 	cmp.w	r8, #16
 800eec4:	dc02      	bgt.n	800eecc <__ieee754_rem_pio2+0x1d4>
 800eec6:	e9ca 0100 	strd	r0, r1, [sl]
 800eeca:	e039      	b.n	800ef40 <__ieee754_rem_pio2+0x248>
 800eecc:	a34e      	add	r3, pc, #312	; (adr r3, 800f008 <__ieee754_rem_pio2+0x310>)
 800eece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed2:	ec51 0b18 	vmov	r0, r1, d8
 800eed6:	f7f1 fb87 	bl	80005e8 <__aeabi_dmul>
 800eeda:	4604      	mov	r4, r0
 800eedc:	460d      	mov	r5, r1
 800eede:	4602      	mov	r2, r0
 800eee0:	460b      	mov	r3, r1
 800eee2:	4630      	mov	r0, r6
 800eee4:	4639      	mov	r1, r7
 800eee6:	f7f1 f9c7 	bl	8000278 <__aeabi_dsub>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	4680      	mov	r8, r0
 800eef0:	4689      	mov	r9, r1
 800eef2:	4630      	mov	r0, r6
 800eef4:	4639      	mov	r1, r7
 800eef6:	f7f1 f9bf 	bl	8000278 <__aeabi_dsub>
 800eefa:	4622      	mov	r2, r4
 800eefc:	462b      	mov	r3, r5
 800eefe:	f7f1 f9bb 	bl	8000278 <__aeabi_dsub>
 800ef02:	a343      	add	r3, pc, #268	; (adr r3, 800f010 <__ieee754_rem_pio2+0x318>)
 800ef04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef08:	4604      	mov	r4, r0
 800ef0a:	460d      	mov	r5, r1
 800ef0c:	ec51 0b18 	vmov	r0, r1, d8
 800ef10:	f7f1 fb6a 	bl	80005e8 <__aeabi_dmul>
 800ef14:	4622      	mov	r2, r4
 800ef16:	462b      	mov	r3, r5
 800ef18:	f7f1 f9ae 	bl	8000278 <__aeabi_dsub>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	460b      	mov	r3, r1
 800ef20:	4604      	mov	r4, r0
 800ef22:	460d      	mov	r5, r1
 800ef24:	4640      	mov	r0, r8
 800ef26:	4649      	mov	r1, r9
 800ef28:	f7f1 f9a6 	bl	8000278 <__aeabi_dsub>
 800ef2c:	9a03      	ldr	r2, [sp, #12]
 800ef2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ef32:	1ad3      	subs	r3, r2, r3
 800ef34:	2b31      	cmp	r3, #49	; 0x31
 800ef36:	dc24      	bgt.n	800ef82 <__ieee754_rem_pio2+0x28a>
 800ef38:	e9ca 0100 	strd	r0, r1, [sl]
 800ef3c:	4646      	mov	r6, r8
 800ef3e:	464f      	mov	r7, r9
 800ef40:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef44:	4630      	mov	r0, r6
 800ef46:	4642      	mov	r2, r8
 800ef48:	464b      	mov	r3, r9
 800ef4a:	4639      	mov	r1, r7
 800ef4c:	f7f1 f994 	bl	8000278 <__aeabi_dsub>
 800ef50:	462b      	mov	r3, r5
 800ef52:	4622      	mov	r2, r4
 800ef54:	f7f1 f990 	bl	8000278 <__aeabi_dsub>
 800ef58:	9b02      	ldr	r3, [sp, #8]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef60:	f6bf af0a 	bge.w	800ed78 <__ieee754_rem_pio2+0x80>
 800ef64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ef68:	f8ca 3004 	str.w	r3, [sl, #4]
 800ef6c:	f8ca 8000 	str.w	r8, [sl]
 800ef70:	f8ca 0008 	str.w	r0, [sl, #8]
 800ef74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef78:	f8ca 300c 	str.w	r3, [sl, #12]
 800ef7c:	f1cb 0b00 	rsb	fp, fp, #0
 800ef80:	e6fa      	b.n	800ed78 <__ieee754_rem_pio2+0x80>
 800ef82:	a327      	add	r3, pc, #156	; (adr r3, 800f020 <__ieee754_rem_pio2+0x328>)
 800ef84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef88:	ec51 0b18 	vmov	r0, r1, d8
 800ef8c:	f7f1 fb2c 	bl	80005e8 <__aeabi_dmul>
 800ef90:	4604      	mov	r4, r0
 800ef92:	460d      	mov	r5, r1
 800ef94:	4602      	mov	r2, r0
 800ef96:	460b      	mov	r3, r1
 800ef98:	4640      	mov	r0, r8
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	f7f1 f96c 	bl	8000278 <__aeabi_dsub>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	4606      	mov	r6, r0
 800efa6:	460f      	mov	r7, r1
 800efa8:	4640      	mov	r0, r8
 800efaa:	4649      	mov	r1, r9
 800efac:	f7f1 f964 	bl	8000278 <__aeabi_dsub>
 800efb0:	4622      	mov	r2, r4
 800efb2:	462b      	mov	r3, r5
 800efb4:	f7f1 f960 	bl	8000278 <__aeabi_dsub>
 800efb8:	a31b      	add	r3, pc, #108	; (adr r3, 800f028 <__ieee754_rem_pio2+0x330>)
 800efba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbe:	4604      	mov	r4, r0
 800efc0:	460d      	mov	r5, r1
 800efc2:	ec51 0b18 	vmov	r0, r1, d8
 800efc6:	f7f1 fb0f 	bl	80005e8 <__aeabi_dmul>
 800efca:	4622      	mov	r2, r4
 800efcc:	462b      	mov	r3, r5
 800efce:	f7f1 f953 	bl	8000278 <__aeabi_dsub>
 800efd2:	4604      	mov	r4, r0
 800efd4:	460d      	mov	r5, r1
 800efd6:	e75f      	b.n	800ee98 <__ieee754_rem_pio2+0x1a0>
 800efd8:	4b1b      	ldr	r3, [pc, #108]	; (800f048 <__ieee754_rem_pio2+0x350>)
 800efda:	4598      	cmp	r8, r3
 800efdc:	dd36      	ble.n	800f04c <__ieee754_rem_pio2+0x354>
 800efde:	ee10 2a10 	vmov	r2, s0
 800efe2:	462b      	mov	r3, r5
 800efe4:	4620      	mov	r0, r4
 800efe6:	4629      	mov	r1, r5
 800efe8:	f7f1 f946 	bl	8000278 <__aeabi_dsub>
 800efec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eff0:	e9ca 0100 	strd	r0, r1, [sl]
 800eff4:	e694      	b.n	800ed20 <__ieee754_rem_pio2+0x28>
 800eff6:	bf00      	nop
 800eff8:	54400000 	.word	0x54400000
 800effc:	3ff921fb 	.word	0x3ff921fb
 800f000:	1a626331 	.word	0x1a626331
 800f004:	3dd0b461 	.word	0x3dd0b461
 800f008:	1a600000 	.word	0x1a600000
 800f00c:	3dd0b461 	.word	0x3dd0b461
 800f010:	2e037073 	.word	0x2e037073
 800f014:	3ba3198a 	.word	0x3ba3198a
 800f018:	6dc9c883 	.word	0x6dc9c883
 800f01c:	3fe45f30 	.word	0x3fe45f30
 800f020:	2e000000 	.word	0x2e000000
 800f024:	3ba3198a 	.word	0x3ba3198a
 800f028:	252049c1 	.word	0x252049c1
 800f02c:	397b839a 	.word	0x397b839a
 800f030:	3fe921fb 	.word	0x3fe921fb
 800f034:	4002d97b 	.word	0x4002d97b
 800f038:	3ff921fb 	.word	0x3ff921fb
 800f03c:	413921fb 	.word	0x413921fb
 800f040:	3fe00000 	.word	0x3fe00000
 800f044:	080100dc 	.word	0x080100dc
 800f048:	7fefffff 	.word	0x7fefffff
 800f04c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f050:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f054:	ee10 0a10 	vmov	r0, s0
 800f058:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f05c:	ee10 6a10 	vmov	r6, s0
 800f060:	460f      	mov	r7, r1
 800f062:	f7f1 fd5b 	bl	8000b1c <__aeabi_d2iz>
 800f066:	f7f1 fa55 	bl	8000514 <__aeabi_i2d>
 800f06a:	4602      	mov	r2, r0
 800f06c:	460b      	mov	r3, r1
 800f06e:	4630      	mov	r0, r6
 800f070:	4639      	mov	r1, r7
 800f072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f076:	f7f1 f8ff 	bl	8000278 <__aeabi_dsub>
 800f07a:	4b22      	ldr	r3, [pc, #136]	; (800f104 <__ieee754_rem_pio2+0x40c>)
 800f07c:	2200      	movs	r2, #0
 800f07e:	f7f1 fab3 	bl	80005e8 <__aeabi_dmul>
 800f082:	460f      	mov	r7, r1
 800f084:	4606      	mov	r6, r0
 800f086:	f7f1 fd49 	bl	8000b1c <__aeabi_d2iz>
 800f08a:	f7f1 fa43 	bl	8000514 <__aeabi_i2d>
 800f08e:	4602      	mov	r2, r0
 800f090:	460b      	mov	r3, r1
 800f092:	4630      	mov	r0, r6
 800f094:	4639      	mov	r1, r7
 800f096:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f09a:	f7f1 f8ed 	bl	8000278 <__aeabi_dsub>
 800f09e:	4b19      	ldr	r3, [pc, #100]	; (800f104 <__ieee754_rem_pio2+0x40c>)
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f7f1 faa1 	bl	80005e8 <__aeabi_dmul>
 800f0a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f0aa:	ad04      	add	r5, sp, #16
 800f0ac:	f04f 0803 	mov.w	r8, #3
 800f0b0:	46a9      	mov	r9, r5
 800f0b2:	2600      	movs	r6, #0
 800f0b4:	2700      	movs	r7, #0
 800f0b6:	4632      	mov	r2, r6
 800f0b8:	463b      	mov	r3, r7
 800f0ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f0be:	46c3      	mov	fp, r8
 800f0c0:	3d08      	subs	r5, #8
 800f0c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f0c6:	f7f1 fcf7 	bl	8000ab8 <__aeabi_dcmpeq>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d1f3      	bne.n	800f0b6 <__ieee754_rem_pio2+0x3be>
 800f0ce:	4b0e      	ldr	r3, [pc, #56]	; (800f108 <__ieee754_rem_pio2+0x410>)
 800f0d0:	9301      	str	r3, [sp, #4]
 800f0d2:	2302      	movs	r3, #2
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	4622      	mov	r2, r4
 800f0d8:	465b      	mov	r3, fp
 800f0da:	4651      	mov	r1, sl
 800f0dc:	4648      	mov	r0, r9
 800f0de:	f000 f817 	bl	800f110 <__kernel_rem_pio2>
 800f0e2:	9b02      	ldr	r3, [sp, #8]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	4683      	mov	fp, r0
 800f0e8:	f6bf ae46 	bge.w	800ed78 <__ieee754_rem_pio2+0x80>
 800f0ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f0f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f0f4:	f8ca 3004 	str.w	r3, [sl, #4]
 800f0f8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f0fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f100:	e73a      	b.n	800ef78 <__ieee754_rem_pio2+0x280>
 800f102:	bf00      	nop
 800f104:	41700000 	.word	0x41700000
 800f108:	0801015c 	.word	0x0801015c
 800f10c:	00000000 	.word	0x00000000

0800f110 <__kernel_rem_pio2>:
 800f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f114:	ed2d 8b02 	vpush	{d8}
 800f118:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f11c:	f112 0f14 	cmn.w	r2, #20
 800f120:	9308      	str	r3, [sp, #32]
 800f122:	9101      	str	r1, [sp, #4]
 800f124:	4bc6      	ldr	r3, [pc, #792]	; (800f440 <__kernel_rem_pio2+0x330>)
 800f126:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f128:	9009      	str	r0, [sp, #36]	; 0x24
 800f12a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f12e:	9304      	str	r3, [sp, #16]
 800f130:	9b08      	ldr	r3, [sp, #32]
 800f132:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f136:	bfa8      	it	ge
 800f138:	1ed4      	subge	r4, r2, #3
 800f13a:	9306      	str	r3, [sp, #24]
 800f13c:	bfb2      	itee	lt
 800f13e:	2400      	movlt	r4, #0
 800f140:	2318      	movge	r3, #24
 800f142:	fb94 f4f3 	sdivge	r4, r4, r3
 800f146:	f06f 0317 	mvn.w	r3, #23
 800f14a:	fb04 3303 	mla	r3, r4, r3, r3
 800f14e:	eb03 0a02 	add.w	sl, r3, r2
 800f152:	9b04      	ldr	r3, [sp, #16]
 800f154:	9a06      	ldr	r2, [sp, #24]
 800f156:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f430 <__kernel_rem_pio2+0x320>
 800f15a:	eb03 0802 	add.w	r8, r3, r2
 800f15e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f160:	1aa7      	subs	r7, r4, r2
 800f162:	ae20      	add	r6, sp, #128	; 0x80
 800f164:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f168:	2500      	movs	r5, #0
 800f16a:	4545      	cmp	r5, r8
 800f16c:	dd18      	ble.n	800f1a0 <__kernel_rem_pio2+0x90>
 800f16e:	9b08      	ldr	r3, [sp, #32]
 800f170:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f174:	aa20      	add	r2, sp, #128	; 0x80
 800f176:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f430 <__kernel_rem_pio2+0x320>
 800f17a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f17e:	f1c3 0301 	rsb	r3, r3, #1
 800f182:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f186:	9307      	str	r3, [sp, #28]
 800f188:	9b07      	ldr	r3, [sp, #28]
 800f18a:	9a04      	ldr	r2, [sp, #16]
 800f18c:	4443      	add	r3, r8
 800f18e:	429a      	cmp	r2, r3
 800f190:	db2f      	blt.n	800f1f2 <__kernel_rem_pio2+0xe2>
 800f192:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f196:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f19a:	462f      	mov	r7, r5
 800f19c:	2600      	movs	r6, #0
 800f19e:	e01b      	b.n	800f1d8 <__kernel_rem_pio2+0xc8>
 800f1a0:	42ef      	cmn	r7, r5
 800f1a2:	d407      	bmi.n	800f1b4 <__kernel_rem_pio2+0xa4>
 800f1a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f1a8:	f7f1 f9b4 	bl	8000514 <__aeabi_i2d>
 800f1ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f1b0:	3501      	adds	r5, #1
 800f1b2:	e7da      	b.n	800f16a <__kernel_rem_pio2+0x5a>
 800f1b4:	ec51 0b18 	vmov	r0, r1, d8
 800f1b8:	e7f8      	b.n	800f1ac <__kernel_rem_pio2+0x9c>
 800f1ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1be:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f1c2:	f7f1 fa11 	bl	80005e8 <__aeabi_dmul>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1ce:	f7f1 f855 	bl	800027c <__adddf3>
 800f1d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1d6:	3601      	adds	r6, #1
 800f1d8:	9b06      	ldr	r3, [sp, #24]
 800f1da:	429e      	cmp	r6, r3
 800f1dc:	f1a7 0708 	sub.w	r7, r7, #8
 800f1e0:	ddeb      	ble.n	800f1ba <__kernel_rem_pio2+0xaa>
 800f1e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1e6:	3508      	adds	r5, #8
 800f1e8:	ecab 7b02 	vstmia	fp!, {d7}
 800f1ec:	f108 0801 	add.w	r8, r8, #1
 800f1f0:	e7ca      	b.n	800f188 <__kernel_rem_pio2+0x78>
 800f1f2:	9b04      	ldr	r3, [sp, #16]
 800f1f4:	aa0c      	add	r2, sp, #48	; 0x30
 800f1f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1fc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f1fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f202:	9c04      	ldr	r4, [sp, #16]
 800f204:	930a      	str	r3, [sp, #40]	; 0x28
 800f206:	ab98      	add	r3, sp, #608	; 0x260
 800f208:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f20c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f210:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f214:	f8cd b008 	str.w	fp, [sp, #8]
 800f218:	4625      	mov	r5, r4
 800f21a:	2d00      	cmp	r5, #0
 800f21c:	dc78      	bgt.n	800f310 <__kernel_rem_pio2+0x200>
 800f21e:	ec47 6b10 	vmov	d0, r6, r7
 800f222:	4650      	mov	r0, sl
 800f224:	f000 fd14 	bl	800fc50 <scalbn>
 800f228:	ec57 6b10 	vmov	r6, r7, d0
 800f22c:	2200      	movs	r2, #0
 800f22e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f232:	ee10 0a10 	vmov	r0, s0
 800f236:	4639      	mov	r1, r7
 800f238:	f7f1 f9d6 	bl	80005e8 <__aeabi_dmul>
 800f23c:	ec41 0b10 	vmov	d0, r0, r1
 800f240:	f000 fc86 	bl	800fb50 <floor>
 800f244:	4b7f      	ldr	r3, [pc, #508]	; (800f444 <__kernel_rem_pio2+0x334>)
 800f246:	ec51 0b10 	vmov	r0, r1, d0
 800f24a:	2200      	movs	r2, #0
 800f24c:	f7f1 f9cc 	bl	80005e8 <__aeabi_dmul>
 800f250:	4602      	mov	r2, r0
 800f252:	460b      	mov	r3, r1
 800f254:	4630      	mov	r0, r6
 800f256:	4639      	mov	r1, r7
 800f258:	f7f1 f80e 	bl	8000278 <__aeabi_dsub>
 800f25c:	460f      	mov	r7, r1
 800f25e:	4606      	mov	r6, r0
 800f260:	f7f1 fc5c 	bl	8000b1c <__aeabi_d2iz>
 800f264:	9007      	str	r0, [sp, #28]
 800f266:	f7f1 f955 	bl	8000514 <__aeabi_i2d>
 800f26a:	4602      	mov	r2, r0
 800f26c:	460b      	mov	r3, r1
 800f26e:	4630      	mov	r0, r6
 800f270:	4639      	mov	r1, r7
 800f272:	f7f1 f801 	bl	8000278 <__aeabi_dsub>
 800f276:	f1ba 0f00 	cmp.w	sl, #0
 800f27a:	4606      	mov	r6, r0
 800f27c:	460f      	mov	r7, r1
 800f27e:	dd70      	ble.n	800f362 <__kernel_rem_pio2+0x252>
 800f280:	1e62      	subs	r2, r4, #1
 800f282:	ab0c      	add	r3, sp, #48	; 0x30
 800f284:	9d07      	ldr	r5, [sp, #28]
 800f286:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f28a:	f1ca 0118 	rsb	r1, sl, #24
 800f28e:	fa40 f301 	asr.w	r3, r0, r1
 800f292:	441d      	add	r5, r3
 800f294:	408b      	lsls	r3, r1
 800f296:	1ac0      	subs	r0, r0, r3
 800f298:	ab0c      	add	r3, sp, #48	; 0x30
 800f29a:	9507      	str	r5, [sp, #28]
 800f29c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f2a0:	f1ca 0317 	rsb	r3, sl, #23
 800f2a4:	fa40 f303 	asr.w	r3, r0, r3
 800f2a8:	9302      	str	r3, [sp, #8]
 800f2aa:	9b02      	ldr	r3, [sp, #8]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	dd66      	ble.n	800f37e <__kernel_rem_pio2+0x26e>
 800f2b0:	9b07      	ldr	r3, [sp, #28]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	9307      	str	r3, [sp, #28]
 800f2b8:	4615      	mov	r5, r2
 800f2ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f2be:	4294      	cmp	r4, r2
 800f2c0:	f300 8099 	bgt.w	800f3f6 <__kernel_rem_pio2+0x2e6>
 800f2c4:	f1ba 0f00 	cmp.w	sl, #0
 800f2c8:	dd07      	ble.n	800f2da <__kernel_rem_pio2+0x1ca>
 800f2ca:	f1ba 0f01 	cmp.w	sl, #1
 800f2ce:	f000 80a5 	beq.w	800f41c <__kernel_rem_pio2+0x30c>
 800f2d2:	f1ba 0f02 	cmp.w	sl, #2
 800f2d6:	f000 80c1 	beq.w	800f45c <__kernel_rem_pio2+0x34c>
 800f2da:	9b02      	ldr	r3, [sp, #8]
 800f2dc:	2b02      	cmp	r3, #2
 800f2de:	d14e      	bne.n	800f37e <__kernel_rem_pio2+0x26e>
 800f2e0:	4632      	mov	r2, r6
 800f2e2:	463b      	mov	r3, r7
 800f2e4:	4958      	ldr	r1, [pc, #352]	; (800f448 <__kernel_rem_pio2+0x338>)
 800f2e6:	2000      	movs	r0, #0
 800f2e8:	f7f0 ffc6 	bl	8000278 <__aeabi_dsub>
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	460f      	mov	r7, r1
 800f2f0:	2d00      	cmp	r5, #0
 800f2f2:	d044      	beq.n	800f37e <__kernel_rem_pio2+0x26e>
 800f2f4:	4650      	mov	r0, sl
 800f2f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f438 <__kernel_rem_pio2+0x328>
 800f2fa:	f000 fca9 	bl	800fc50 <scalbn>
 800f2fe:	4630      	mov	r0, r6
 800f300:	4639      	mov	r1, r7
 800f302:	ec53 2b10 	vmov	r2, r3, d0
 800f306:	f7f0 ffb7 	bl	8000278 <__aeabi_dsub>
 800f30a:	4606      	mov	r6, r0
 800f30c:	460f      	mov	r7, r1
 800f30e:	e036      	b.n	800f37e <__kernel_rem_pio2+0x26e>
 800f310:	4b4e      	ldr	r3, [pc, #312]	; (800f44c <__kernel_rem_pio2+0x33c>)
 800f312:	2200      	movs	r2, #0
 800f314:	4630      	mov	r0, r6
 800f316:	4639      	mov	r1, r7
 800f318:	f7f1 f966 	bl	80005e8 <__aeabi_dmul>
 800f31c:	f7f1 fbfe 	bl	8000b1c <__aeabi_d2iz>
 800f320:	f7f1 f8f8 	bl	8000514 <__aeabi_i2d>
 800f324:	4b4a      	ldr	r3, [pc, #296]	; (800f450 <__kernel_rem_pio2+0x340>)
 800f326:	2200      	movs	r2, #0
 800f328:	4680      	mov	r8, r0
 800f32a:	4689      	mov	r9, r1
 800f32c:	f7f1 f95c 	bl	80005e8 <__aeabi_dmul>
 800f330:	4602      	mov	r2, r0
 800f332:	460b      	mov	r3, r1
 800f334:	4630      	mov	r0, r6
 800f336:	4639      	mov	r1, r7
 800f338:	f7f0 ff9e 	bl	8000278 <__aeabi_dsub>
 800f33c:	f7f1 fbee 	bl	8000b1c <__aeabi_d2iz>
 800f340:	9b02      	ldr	r3, [sp, #8]
 800f342:	f843 0b04 	str.w	r0, [r3], #4
 800f346:	3d01      	subs	r5, #1
 800f348:	9302      	str	r3, [sp, #8]
 800f34a:	ab70      	add	r3, sp, #448	; 0x1c0
 800f34c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	4640      	mov	r0, r8
 800f356:	4649      	mov	r1, r9
 800f358:	f7f0 ff90 	bl	800027c <__adddf3>
 800f35c:	4606      	mov	r6, r0
 800f35e:	460f      	mov	r7, r1
 800f360:	e75b      	b.n	800f21a <__kernel_rem_pio2+0x10a>
 800f362:	d105      	bne.n	800f370 <__kernel_rem_pio2+0x260>
 800f364:	1e63      	subs	r3, r4, #1
 800f366:	aa0c      	add	r2, sp, #48	; 0x30
 800f368:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f36c:	15c3      	asrs	r3, r0, #23
 800f36e:	e79b      	b.n	800f2a8 <__kernel_rem_pio2+0x198>
 800f370:	4b38      	ldr	r3, [pc, #224]	; (800f454 <__kernel_rem_pio2+0x344>)
 800f372:	2200      	movs	r2, #0
 800f374:	f7f1 fbbe 	bl	8000af4 <__aeabi_dcmpge>
 800f378:	2800      	cmp	r0, #0
 800f37a:	d139      	bne.n	800f3f0 <__kernel_rem_pio2+0x2e0>
 800f37c:	9002      	str	r0, [sp, #8]
 800f37e:	2200      	movs	r2, #0
 800f380:	2300      	movs	r3, #0
 800f382:	4630      	mov	r0, r6
 800f384:	4639      	mov	r1, r7
 800f386:	f7f1 fb97 	bl	8000ab8 <__aeabi_dcmpeq>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	f000 80b4 	beq.w	800f4f8 <__kernel_rem_pio2+0x3e8>
 800f390:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800f394:	465b      	mov	r3, fp
 800f396:	2200      	movs	r2, #0
 800f398:	9904      	ldr	r1, [sp, #16]
 800f39a:	428b      	cmp	r3, r1
 800f39c:	da65      	bge.n	800f46a <__kernel_rem_pio2+0x35a>
 800f39e:	2a00      	cmp	r2, #0
 800f3a0:	d07b      	beq.n	800f49a <__kernel_rem_pio2+0x38a>
 800f3a2:	ab0c      	add	r3, sp, #48	; 0x30
 800f3a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800f3a8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f000 80a0 	beq.w	800f4f2 <__kernel_rem_pio2+0x3e2>
 800f3b2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f438 <__kernel_rem_pio2+0x328>
 800f3b6:	4650      	mov	r0, sl
 800f3b8:	f000 fc4a 	bl	800fc50 <scalbn>
 800f3bc:	4f23      	ldr	r7, [pc, #140]	; (800f44c <__kernel_rem_pio2+0x33c>)
 800f3be:	ec55 4b10 	vmov	r4, r5, d0
 800f3c2:	46d8      	mov	r8, fp
 800f3c4:	2600      	movs	r6, #0
 800f3c6:	f1b8 0f00 	cmp.w	r8, #0
 800f3ca:	f280 80cf 	bge.w	800f56c <__kernel_rem_pio2+0x45c>
 800f3ce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f430 <__kernel_rem_pio2+0x320>
 800f3d2:	465f      	mov	r7, fp
 800f3d4:	f04f 0800 	mov.w	r8, #0
 800f3d8:	2f00      	cmp	r7, #0
 800f3da:	f2c0 80fd 	blt.w	800f5d8 <__kernel_rem_pio2+0x4c8>
 800f3de:	ab70      	add	r3, sp, #448	; 0x1c0
 800f3e0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f458 <__kernel_rem_pio2+0x348>
 800f3e4:	ec55 4b18 	vmov	r4, r5, d8
 800f3e8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f3ec:	2600      	movs	r6, #0
 800f3ee:	e0e5      	b.n	800f5bc <__kernel_rem_pio2+0x4ac>
 800f3f0:	2302      	movs	r3, #2
 800f3f2:	9302      	str	r3, [sp, #8]
 800f3f4:	e75c      	b.n	800f2b0 <__kernel_rem_pio2+0x1a0>
 800f3f6:	f8db 3000 	ldr.w	r3, [fp]
 800f3fa:	b955      	cbnz	r5, 800f412 <__kernel_rem_pio2+0x302>
 800f3fc:	b123      	cbz	r3, 800f408 <__kernel_rem_pio2+0x2f8>
 800f3fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f402:	f8cb 3000 	str.w	r3, [fp]
 800f406:	2301      	movs	r3, #1
 800f408:	3201      	adds	r2, #1
 800f40a:	f10b 0b04 	add.w	fp, fp, #4
 800f40e:	461d      	mov	r5, r3
 800f410:	e755      	b.n	800f2be <__kernel_rem_pio2+0x1ae>
 800f412:	1acb      	subs	r3, r1, r3
 800f414:	f8cb 3000 	str.w	r3, [fp]
 800f418:	462b      	mov	r3, r5
 800f41a:	e7f5      	b.n	800f408 <__kernel_rem_pio2+0x2f8>
 800f41c:	1e62      	subs	r2, r4, #1
 800f41e:	ab0c      	add	r3, sp, #48	; 0x30
 800f420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f424:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f428:	a90c      	add	r1, sp, #48	; 0x30
 800f42a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f42e:	e754      	b.n	800f2da <__kernel_rem_pio2+0x1ca>
	...
 800f43c:	3ff00000 	.word	0x3ff00000
 800f440:	080102a8 	.word	0x080102a8
 800f444:	40200000 	.word	0x40200000
 800f448:	3ff00000 	.word	0x3ff00000
 800f44c:	3e700000 	.word	0x3e700000
 800f450:	41700000 	.word	0x41700000
 800f454:	3fe00000 	.word	0x3fe00000
 800f458:	08010268 	.word	0x08010268
 800f45c:	1e62      	subs	r2, r4, #1
 800f45e:	ab0c      	add	r3, sp, #48	; 0x30
 800f460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f464:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f468:	e7de      	b.n	800f428 <__kernel_rem_pio2+0x318>
 800f46a:	a90c      	add	r1, sp, #48	; 0x30
 800f46c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f470:	3b01      	subs	r3, #1
 800f472:	430a      	orrs	r2, r1
 800f474:	e790      	b.n	800f398 <__kernel_rem_pio2+0x288>
 800f476:	3301      	adds	r3, #1
 800f478:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f47c:	2900      	cmp	r1, #0
 800f47e:	d0fa      	beq.n	800f476 <__kernel_rem_pio2+0x366>
 800f480:	9a08      	ldr	r2, [sp, #32]
 800f482:	18e3      	adds	r3, r4, r3
 800f484:	18a6      	adds	r6, r4, r2
 800f486:	aa20      	add	r2, sp, #128	; 0x80
 800f488:	1c65      	adds	r5, r4, #1
 800f48a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f48e:	9302      	str	r3, [sp, #8]
 800f490:	9b02      	ldr	r3, [sp, #8]
 800f492:	42ab      	cmp	r3, r5
 800f494:	da04      	bge.n	800f4a0 <__kernel_rem_pio2+0x390>
 800f496:	461c      	mov	r4, r3
 800f498:	e6b5      	b.n	800f206 <__kernel_rem_pio2+0xf6>
 800f49a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f49c:	2301      	movs	r3, #1
 800f49e:	e7eb      	b.n	800f478 <__kernel_rem_pio2+0x368>
 800f4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4a6:	f7f1 f835 	bl	8000514 <__aeabi_i2d>
 800f4aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4b0:	46b3      	mov	fp, r6
 800f4b2:	461c      	mov	r4, r3
 800f4b4:	2700      	movs	r7, #0
 800f4b6:	f04f 0800 	mov.w	r8, #0
 800f4ba:	f04f 0900 	mov.w	r9, #0
 800f4be:	9b06      	ldr	r3, [sp, #24]
 800f4c0:	429f      	cmp	r7, r3
 800f4c2:	dd06      	ble.n	800f4d2 <__kernel_rem_pio2+0x3c2>
 800f4c4:	ab70      	add	r3, sp, #448	; 0x1c0
 800f4c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f4ca:	e9c3 8900 	strd	r8, r9, [r3]
 800f4ce:	3501      	adds	r5, #1
 800f4d0:	e7de      	b.n	800f490 <__kernel_rem_pio2+0x380>
 800f4d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f4d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f4da:	f7f1 f885 	bl	80005e8 <__aeabi_dmul>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	4640      	mov	r0, r8
 800f4e4:	4649      	mov	r1, r9
 800f4e6:	f7f0 fec9 	bl	800027c <__adddf3>
 800f4ea:	3701      	adds	r7, #1
 800f4ec:	4680      	mov	r8, r0
 800f4ee:	4689      	mov	r9, r1
 800f4f0:	e7e5      	b.n	800f4be <__kernel_rem_pio2+0x3ae>
 800f4f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f4f6:	e754      	b.n	800f3a2 <__kernel_rem_pio2+0x292>
 800f4f8:	ec47 6b10 	vmov	d0, r6, r7
 800f4fc:	f1ca 0000 	rsb	r0, sl, #0
 800f500:	f000 fba6 	bl	800fc50 <scalbn>
 800f504:	ec57 6b10 	vmov	r6, r7, d0
 800f508:	4b9f      	ldr	r3, [pc, #636]	; (800f788 <__kernel_rem_pio2+0x678>)
 800f50a:	ee10 0a10 	vmov	r0, s0
 800f50e:	2200      	movs	r2, #0
 800f510:	4639      	mov	r1, r7
 800f512:	f7f1 faef 	bl	8000af4 <__aeabi_dcmpge>
 800f516:	b300      	cbz	r0, 800f55a <__kernel_rem_pio2+0x44a>
 800f518:	4b9c      	ldr	r3, [pc, #624]	; (800f78c <__kernel_rem_pio2+0x67c>)
 800f51a:	2200      	movs	r2, #0
 800f51c:	4630      	mov	r0, r6
 800f51e:	4639      	mov	r1, r7
 800f520:	f7f1 f862 	bl	80005e8 <__aeabi_dmul>
 800f524:	f7f1 fafa 	bl	8000b1c <__aeabi_d2iz>
 800f528:	4605      	mov	r5, r0
 800f52a:	f7f0 fff3 	bl	8000514 <__aeabi_i2d>
 800f52e:	4b96      	ldr	r3, [pc, #600]	; (800f788 <__kernel_rem_pio2+0x678>)
 800f530:	2200      	movs	r2, #0
 800f532:	f7f1 f859 	bl	80005e8 <__aeabi_dmul>
 800f536:	460b      	mov	r3, r1
 800f538:	4602      	mov	r2, r0
 800f53a:	4639      	mov	r1, r7
 800f53c:	4630      	mov	r0, r6
 800f53e:	f7f0 fe9b 	bl	8000278 <__aeabi_dsub>
 800f542:	f7f1 faeb 	bl	8000b1c <__aeabi_d2iz>
 800f546:	f104 0b01 	add.w	fp, r4, #1
 800f54a:	ab0c      	add	r3, sp, #48	; 0x30
 800f54c:	f10a 0a18 	add.w	sl, sl, #24
 800f550:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f554:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f558:	e72b      	b.n	800f3b2 <__kernel_rem_pio2+0x2a2>
 800f55a:	4630      	mov	r0, r6
 800f55c:	4639      	mov	r1, r7
 800f55e:	f7f1 fadd 	bl	8000b1c <__aeabi_d2iz>
 800f562:	ab0c      	add	r3, sp, #48	; 0x30
 800f564:	46a3      	mov	fp, r4
 800f566:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f56a:	e722      	b.n	800f3b2 <__kernel_rem_pio2+0x2a2>
 800f56c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f56e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f572:	ab0c      	add	r3, sp, #48	; 0x30
 800f574:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f578:	f7f0 ffcc 	bl	8000514 <__aeabi_i2d>
 800f57c:	4622      	mov	r2, r4
 800f57e:	462b      	mov	r3, r5
 800f580:	f7f1 f832 	bl	80005e8 <__aeabi_dmul>
 800f584:	4632      	mov	r2, r6
 800f586:	e9c9 0100 	strd	r0, r1, [r9]
 800f58a:	463b      	mov	r3, r7
 800f58c:	4620      	mov	r0, r4
 800f58e:	4629      	mov	r1, r5
 800f590:	f7f1 f82a 	bl	80005e8 <__aeabi_dmul>
 800f594:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f598:	4604      	mov	r4, r0
 800f59a:	460d      	mov	r5, r1
 800f59c:	e713      	b.n	800f3c6 <__kernel_rem_pio2+0x2b6>
 800f59e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f5a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f5a6:	f7f1 f81f 	bl	80005e8 <__aeabi_dmul>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	4629      	mov	r1, r5
 800f5b2:	f7f0 fe63 	bl	800027c <__adddf3>
 800f5b6:	3601      	adds	r6, #1
 800f5b8:	4604      	mov	r4, r0
 800f5ba:	460d      	mov	r5, r1
 800f5bc:	9b04      	ldr	r3, [sp, #16]
 800f5be:	429e      	cmp	r6, r3
 800f5c0:	dc01      	bgt.n	800f5c6 <__kernel_rem_pio2+0x4b6>
 800f5c2:	45b0      	cmp	r8, r6
 800f5c4:	daeb      	bge.n	800f59e <__kernel_rem_pio2+0x48e>
 800f5c6:	ab48      	add	r3, sp, #288	; 0x120
 800f5c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f5cc:	e9c3 4500 	strd	r4, r5, [r3]
 800f5d0:	3f01      	subs	r7, #1
 800f5d2:	f108 0801 	add.w	r8, r8, #1
 800f5d6:	e6ff      	b.n	800f3d8 <__kernel_rem_pio2+0x2c8>
 800f5d8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	dc0b      	bgt.n	800f5f6 <__kernel_rem_pio2+0x4e6>
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	dc6e      	bgt.n	800f6c0 <__kernel_rem_pio2+0x5b0>
 800f5e2:	d045      	beq.n	800f670 <__kernel_rem_pio2+0x560>
 800f5e4:	9b07      	ldr	r3, [sp, #28]
 800f5e6:	f003 0007 	and.w	r0, r3, #7
 800f5ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f5ee:	ecbd 8b02 	vpop	{d8}
 800f5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f5f8:	2b03      	cmp	r3, #3
 800f5fa:	d1f3      	bne.n	800f5e4 <__kernel_rem_pio2+0x4d4>
 800f5fc:	ab48      	add	r3, sp, #288	; 0x120
 800f5fe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f602:	46d0      	mov	r8, sl
 800f604:	46d9      	mov	r9, fp
 800f606:	f1b9 0f00 	cmp.w	r9, #0
 800f60a:	f1a8 0808 	sub.w	r8, r8, #8
 800f60e:	dc64      	bgt.n	800f6da <__kernel_rem_pio2+0x5ca>
 800f610:	465c      	mov	r4, fp
 800f612:	2c01      	cmp	r4, #1
 800f614:	f1aa 0a08 	sub.w	sl, sl, #8
 800f618:	dc7e      	bgt.n	800f718 <__kernel_rem_pio2+0x608>
 800f61a:	2000      	movs	r0, #0
 800f61c:	2100      	movs	r1, #0
 800f61e:	f1bb 0f01 	cmp.w	fp, #1
 800f622:	f300 8097 	bgt.w	800f754 <__kernel_rem_pio2+0x644>
 800f626:	9b02      	ldr	r3, [sp, #8]
 800f628:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f62c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f630:	2b00      	cmp	r3, #0
 800f632:	f040 8099 	bne.w	800f768 <__kernel_rem_pio2+0x658>
 800f636:	9b01      	ldr	r3, [sp, #4]
 800f638:	e9c3 5600 	strd	r5, r6, [r3]
 800f63c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f640:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f644:	e7ce      	b.n	800f5e4 <__kernel_rem_pio2+0x4d4>
 800f646:	ab48      	add	r3, sp, #288	; 0x120
 800f648:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f650:	f7f0 fe14 	bl	800027c <__adddf3>
 800f654:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f658:	f1bb 0f00 	cmp.w	fp, #0
 800f65c:	daf3      	bge.n	800f646 <__kernel_rem_pio2+0x536>
 800f65e:	9b02      	ldr	r3, [sp, #8]
 800f660:	b113      	cbz	r3, 800f668 <__kernel_rem_pio2+0x558>
 800f662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f666:	4619      	mov	r1, r3
 800f668:	9b01      	ldr	r3, [sp, #4]
 800f66a:	e9c3 0100 	strd	r0, r1, [r3]
 800f66e:	e7b9      	b.n	800f5e4 <__kernel_rem_pio2+0x4d4>
 800f670:	2000      	movs	r0, #0
 800f672:	2100      	movs	r1, #0
 800f674:	e7f0      	b.n	800f658 <__kernel_rem_pio2+0x548>
 800f676:	ab48      	add	r3, sp, #288	; 0x120
 800f678:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f680:	f7f0 fdfc 	bl	800027c <__adddf3>
 800f684:	3c01      	subs	r4, #1
 800f686:	2c00      	cmp	r4, #0
 800f688:	daf5      	bge.n	800f676 <__kernel_rem_pio2+0x566>
 800f68a:	9b02      	ldr	r3, [sp, #8]
 800f68c:	b1e3      	cbz	r3, 800f6c8 <__kernel_rem_pio2+0x5b8>
 800f68e:	4602      	mov	r2, r0
 800f690:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f694:	9c01      	ldr	r4, [sp, #4]
 800f696:	e9c4 2300 	strd	r2, r3, [r4]
 800f69a:	4602      	mov	r2, r0
 800f69c:	460b      	mov	r3, r1
 800f69e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f6a2:	f7f0 fde9 	bl	8000278 <__aeabi_dsub>
 800f6a6:	ad4a      	add	r5, sp, #296	; 0x128
 800f6a8:	2401      	movs	r4, #1
 800f6aa:	45a3      	cmp	fp, r4
 800f6ac:	da0f      	bge.n	800f6ce <__kernel_rem_pio2+0x5be>
 800f6ae:	9b02      	ldr	r3, [sp, #8]
 800f6b0:	b113      	cbz	r3, 800f6b8 <__kernel_rem_pio2+0x5a8>
 800f6b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	9b01      	ldr	r3, [sp, #4]
 800f6ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f6be:	e791      	b.n	800f5e4 <__kernel_rem_pio2+0x4d4>
 800f6c0:	465c      	mov	r4, fp
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	e7de      	b.n	800f686 <__kernel_rem_pio2+0x576>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	e7e2      	b.n	800f694 <__kernel_rem_pio2+0x584>
 800f6ce:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f6d2:	f7f0 fdd3 	bl	800027c <__adddf3>
 800f6d6:	3401      	adds	r4, #1
 800f6d8:	e7e7      	b.n	800f6aa <__kernel_rem_pio2+0x59a>
 800f6da:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f6de:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	4632      	mov	r2, r6
 800f6e6:	463b      	mov	r3, r7
 800f6e8:	4629      	mov	r1, r5
 800f6ea:	f7f0 fdc7 	bl	800027c <__adddf3>
 800f6ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	460b      	mov	r3, r1
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	f7f0 fdbd 	bl	8000278 <__aeabi_dsub>
 800f6fe:	4632      	mov	r2, r6
 800f700:	463b      	mov	r3, r7
 800f702:	f7f0 fdbb 	bl	800027c <__adddf3>
 800f706:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f70a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f70e:	ed88 7b00 	vstr	d7, [r8]
 800f712:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f716:	e776      	b.n	800f606 <__kernel_rem_pio2+0x4f6>
 800f718:	e9da 8900 	ldrd	r8, r9, [sl]
 800f71c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f720:	4640      	mov	r0, r8
 800f722:	4632      	mov	r2, r6
 800f724:	463b      	mov	r3, r7
 800f726:	4649      	mov	r1, r9
 800f728:	f7f0 fda8 	bl	800027c <__adddf3>
 800f72c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f730:	4602      	mov	r2, r0
 800f732:	460b      	mov	r3, r1
 800f734:	4640      	mov	r0, r8
 800f736:	4649      	mov	r1, r9
 800f738:	f7f0 fd9e 	bl	8000278 <__aeabi_dsub>
 800f73c:	4632      	mov	r2, r6
 800f73e:	463b      	mov	r3, r7
 800f740:	f7f0 fd9c 	bl	800027c <__adddf3>
 800f744:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f748:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f74c:	ed8a 7b00 	vstr	d7, [sl]
 800f750:	3c01      	subs	r4, #1
 800f752:	e75e      	b.n	800f612 <__kernel_rem_pio2+0x502>
 800f754:	ab48      	add	r3, sp, #288	; 0x120
 800f756:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	f7f0 fd8d 	bl	800027c <__adddf3>
 800f762:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f766:	e75a      	b.n	800f61e <__kernel_rem_pio2+0x50e>
 800f768:	9b01      	ldr	r3, [sp, #4]
 800f76a:	9a01      	ldr	r2, [sp, #4]
 800f76c:	601d      	str	r5, [r3, #0]
 800f76e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f772:	605c      	str	r4, [r3, #4]
 800f774:	609f      	str	r7, [r3, #8]
 800f776:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f77a:	60d3      	str	r3, [r2, #12]
 800f77c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f780:	6110      	str	r0, [r2, #16]
 800f782:	6153      	str	r3, [r2, #20]
 800f784:	e72e      	b.n	800f5e4 <__kernel_rem_pio2+0x4d4>
 800f786:	bf00      	nop
 800f788:	41700000 	.word	0x41700000
 800f78c:	3e700000 	.word	0x3e700000

0800f790 <__kernel_tan>:
 800f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	ed2d 8b04 	vpush	{d8-d9}
 800f798:	ec5b ab10 	vmov	sl, fp, d0
 800f79c:	4be2      	ldr	r3, [pc, #904]	; (800fb28 <__kernel_tan+0x398>)
 800f79e:	b085      	sub	sp, #20
 800f7a0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800f7a4:	429f      	cmp	r7, r3
 800f7a6:	ed8d 1b00 	vstr	d1, [sp]
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	f8cd b00c 	str.w	fp, [sp, #12]
 800f7b0:	dc24      	bgt.n	800f7fc <__kernel_tan+0x6c>
 800f7b2:	ee10 0a10 	vmov	r0, s0
 800f7b6:	4659      	mov	r1, fp
 800f7b8:	f7f1 f9b0 	bl	8000b1c <__aeabi_d2iz>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	d148      	bne.n	800f852 <__kernel_tan+0xc2>
 800f7c0:	1c73      	adds	r3, r6, #1
 800f7c2:	4652      	mov	r2, sl
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	433b      	orrs	r3, r7
 800f7c8:	d112      	bne.n	800f7f0 <__kernel_tan+0x60>
 800f7ca:	ec4b ab10 	vmov	d0, sl, fp
 800f7ce:	f000 f9b3 	bl	800fb38 <fabs>
 800f7d2:	49d6      	ldr	r1, [pc, #856]	; (800fb2c <__kernel_tan+0x39c>)
 800f7d4:	ec53 2b10 	vmov	r2, r3, d0
 800f7d8:	2000      	movs	r0, #0
 800f7da:	f7f1 f82f 	bl	800083c <__aeabi_ddiv>
 800f7de:	4682      	mov	sl, r0
 800f7e0:	468b      	mov	fp, r1
 800f7e2:	ec4b ab10 	vmov	d0, sl, fp
 800f7e6:	b005      	add	sp, #20
 800f7e8:	ecbd 8b04 	vpop	{d8-d9}
 800f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f0:	2e01      	cmp	r6, #1
 800f7f2:	d0f6      	beq.n	800f7e2 <__kernel_tan+0x52>
 800f7f4:	49ce      	ldr	r1, [pc, #824]	; (800fb30 <__kernel_tan+0x3a0>)
 800f7f6:	465b      	mov	r3, fp
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	e7ee      	b.n	800f7da <__kernel_tan+0x4a>
 800f7fc:	4bcd      	ldr	r3, [pc, #820]	; (800fb34 <__kernel_tan+0x3a4>)
 800f7fe:	429f      	cmp	r7, r3
 800f800:	dd27      	ble.n	800f852 <__kernel_tan+0xc2>
 800f802:	9b03      	ldr	r3, [sp, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	da0a      	bge.n	800f81e <__kernel_tan+0x8e>
 800f808:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f80c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f810:	469b      	mov	fp, r3
 800f812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f816:	e9cd 2300 	strd	r2, r3, [sp]
 800f81a:	ee10 aa10 	vmov	sl, s0
 800f81e:	4652      	mov	r2, sl
 800f820:	465b      	mov	r3, fp
 800f822:	a1a1      	add	r1, pc, #644	; (adr r1, 800faa8 <__kernel_tan+0x318>)
 800f824:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f828:	f7f0 fd26 	bl	8000278 <__aeabi_dsub>
 800f82c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f830:	4604      	mov	r4, r0
 800f832:	460d      	mov	r5, r1
 800f834:	a19e      	add	r1, pc, #632	; (adr r1, 800fab0 <__kernel_tan+0x320>)
 800f836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f83a:	f7f0 fd1d 	bl	8000278 <__aeabi_dsub>
 800f83e:	4622      	mov	r2, r4
 800f840:	462b      	mov	r3, r5
 800f842:	f7f0 fd1b 	bl	800027c <__adddf3>
 800f846:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800fab8 <__kernel_tan+0x328>
 800f84a:	ed8d 7b00 	vstr	d7, [sp]
 800f84e:	4682      	mov	sl, r0
 800f850:	468b      	mov	fp, r1
 800f852:	4652      	mov	r2, sl
 800f854:	465b      	mov	r3, fp
 800f856:	4650      	mov	r0, sl
 800f858:	4659      	mov	r1, fp
 800f85a:	f7f0 fec5 	bl	80005e8 <__aeabi_dmul>
 800f85e:	4602      	mov	r2, r0
 800f860:	460b      	mov	r3, r1
 800f862:	4680      	mov	r8, r0
 800f864:	4689      	mov	r9, r1
 800f866:	f7f0 febf 	bl	80005e8 <__aeabi_dmul>
 800f86a:	4642      	mov	r2, r8
 800f86c:	4604      	mov	r4, r0
 800f86e:	460d      	mov	r5, r1
 800f870:	464b      	mov	r3, r9
 800f872:	4650      	mov	r0, sl
 800f874:	4659      	mov	r1, fp
 800f876:	f7f0 feb7 	bl	80005e8 <__aeabi_dmul>
 800f87a:	a391      	add	r3, pc, #580	; (adr r3, 800fac0 <__kernel_tan+0x330>)
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	ec41 0b18 	vmov	d8, r0, r1
 800f884:	4620      	mov	r0, r4
 800f886:	4629      	mov	r1, r5
 800f888:	f7f0 feae 	bl	80005e8 <__aeabi_dmul>
 800f88c:	a38e      	add	r3, pc, #568	; (adr r3, 800fac8 <__kernel_tan+0x338>)
 800f88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f892:	f7f0 fcf3 	bl	800027c <__adddf3>
 800f896:	4622      	mov	r2, r4
 800f898:	462b      	mov	r3, r5
 800f89a:	f7f0 fea5 	bl	80005e8 <__aeabi_dmul>
 800f89e:	a38c      	add	r3, pc, #560	; (adr r3, 800fad0 <__kernel_tan+0x340>)
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	f7f0 fcea 	bl	800027c <__adddf3>
 800f8a8:	4622      	mov	r2, r4
 800f8aa:	462b      	mov	r3, r5
 800f8ac:	f7f0 fe9c 	bl	80005e8 <__aeabi_dmul>
 800f8b0:	a389      	add	r3, pc, #548	; (adr r3, 800fad8 <__kernel_tan+0x348>)
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	f7f0 fce1 	bl	800027c <__adddf3>
 800f8ba:	4622      	mov	r2, r4
 800f8bc:	462b      	mov	r3, r5
 800f8be:	f7f0 fe93 	bl	80005e8 <__aeabi_dmul>
 800f8c2:	a387      	add	r3, pc, #540	; (adr r3, 800fae0 <__kernel_tan+0x350>)
 800f8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c8:	f7f0 fcd8 	bl	800027c <__adddf3>
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	462b      	mov	r3, r5
 800f8d0:	f7f0 fe8a 	bl	80005e8 <__aeabi_dmul>
 800f8d4:	a384      	add	r3, pc, #528	; (adr r3, 800fae8 <__kernel_tan+0x358>)
 800f8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8da:	f7f0 fccf 	bl	800027c <__adddf3>
 800f8de:	4642      	mov	r2, r8
 800f8e0:	464b      	mov	r3, r9
 800f8e2:	f7f0 fe81 	bl	80005e8 <__aeabi_dmul>
 800f8e6:	a382      	add	r3, pc, #520	; (adr r3, 800faf0 <__kernel_tan+0x360>)
 800f8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ec:	ec41 0b19 	vmov	d9, r0, r1
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	f7f0 fe78 	bl	80005e8 <__aeabi_dmul>
 800f8f8:	a37f      	add	r3, pc, #508	; (adr r3, 800faf8 <__kernel_tan+0x368>)
 800f8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fe:	f7f0 fcbd 	bl	800027c <__adddf3>
 800f902:	4622      	mov	r2, r4
 800f904:	462b      	mov	r3, r5
 800f906:	f7f0 fe6f 	bl	80005e8 <__aeabi_dmul>
 800f90a:	a37d      	add	r3, pc, #500	; (adr r3, 800fb00 <__kernel_tan+0x370>)
 800f90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f910:	f7f0 fcb4 	bl	800027c <__adddf3>
 800f914:	4622      	mov	r2, r4
 800f916:	462b      	mov	r3, r5
 800f918:	f7f0 fe66 	bl	80005e8 <__aeabi_dmul>
 800f91c:	a37a      	add	r3, pc, #488	; (adr r3, 800fb08 <__kernel_tan+0x378>)
 800f91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f922:	f7f0 fcab 	bl	800027c <__adddf3>
 800f926:	4622      	mov	r2, r4
 800f928:	462b      	mov	r3, r5
 800f92a:	f7f0 fe5d 	bl	80005e8 <__aeabi_dmul>
 800f92e:	a378      	add	r3, pc, #480	; (adr r3, 800fb10 <__kernel_tan+0x380>)
 800f930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f934:	f7f0 fca2 	bl	800027c <__adddf3>
 800f938:	4622      	mov	r2, r4
 800f93a:	462b      	mov	r3, r5
 800f93c:	f7f0 fe54 	bl	80005e8 <__aeabi_dmul>
 800f940:	a375      	add	r3, pc, #468	; (adr r3, 800fb18 <__kernel_tan+0x388>)
 800f942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f946:	f7f0 fc99 	bl	800027c <__adddf3>
 800f94a:	4602      	mov	r2, r0
 800f94c:	460b      	mov	r3, r1
 800f94e:	ec51 0b19 	vmov	r0, r1, d9
 800f952:	f7f0 fc93 	bl	800027c <__adddf3>
 800f956:	ec53 2b18 	vmov	r2, r3, d8
 800f95a:	f7f0 fe45 	bl	80005e8 <__aeabi_dmul>
 800f95e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f962:	f7f0 fc8b 	bl	800027c <__adddf3>
 800f966:	4642      	mov	r2, r8
 800f968:	464b      	mov	r3, r9
 800f96a:	f7f0 fe3d 	bl	80005e8 <__aeabi_dmul>
 800f96e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f972:	f7f0 fc83 	bl	800027c <__adddf3>
 800f976:	a36a      	add	r3, pc, #424	; (adr r3, 800fb20 <__kernel_tan+0x390>)
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	4604      	mov	r4, r0
 800f97e:	460d      	mov	r5, r1
 800f980:	ec51 0b18 	vmov	r0, r1, d8
 800f984:	f7f0 fe30 	bl	80005e8 <__aeabi_dmul>
 800f988:	4622      	mov	r2, r4
 800f98a:	462b      	mov	r3, r5
 800f98c:	f7f0 fc76 	bl	800027c <__adddf3>
 800f990:	460b      	mov	r3, r1
 800f992:	ec41 0b18 	vmov	d8, r0, r1
 800f996:	4602      	mov	r2, r0
 800f998:	4659      	mov	r1, fp
 800f99a:	4650      	mov	r0, sl
 800f99c:	f7f0 fc6e 	bl	800027c <__adddf3>
 800f9a0:	4b64      	ldr	r3, [pc, #400]	; (800fb34 <__kernel_tan+0x3a4>)
 800f9a2:	429f      	cmp	r7, r3
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	460d      	mov	r5, r1
 800f9a8:	dd3e      	ble.n	800fa28 <__kernel_tan+0x298>
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	f7f0 fdb2 	bl	8000514 <__aeabi_i2d>
 800f9b0:	4622      	mov	r2, r4
 800f9b2:	4680      	mov	r8, r0
 800f9b4:	4689      	mov	r9, r1
 800f9b6:	462b      	mov	r3, r5
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	4629      	mov	r1, r5
 800f9bc:	f7f0 fe14 	bl	80005e8 <__aeabi_dmul>
 800f9c0:	4642      	mov	r2, r8
 800f9c2:	4606      	mov	r6, r0
 800f9c4:	460f      	mov	r7, r1
 800f9c6:	464b      	mov	r3, r9
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	4629      	mov	r1, r5
 800f9cc:	f7f0 fc56 	bl	800027c <__adddf3>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	4630      	mov	r0, r6
 800f9d6:	4639      	mov	r1, r7
 800f9d8:	f7f0 ff30 	bl	800083c <__aeabi_ddiv>
 800f9dc:	ec53 2b18 	vmov	r2, r3, d8
 800f9e0:	f7f0 fc4a 	bl	8000278 <__aeabi_dsub>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	4650      	mov	r0, sl
 800f9ea:	4659      	mov	r1, fp
 800f9ec:	f7f0 fc44 	bl	8000278 <__aeabi_dsub>
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	f7f0 fc42 	bl	800027c <__adddf3>
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	460b      	mov	r3, r1
 800f9fc:	4640      	mov	r0, r8
 800f9fe:	4649      	mov	r1, r9
 800fa00:	f7f0 fc3a 	bl	8000278 <__aeabi_dsub>
 800fa04:	9b03      	ldr	r3, [sp, #12]
 800fa06:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800fa0a:	f00a 0a02 	and.w	sl, sl, #2
 800fa0e:	4604      	mov	r4, r0
 800fa10:	f1ca 0001 	rsb	r0, sl, #1
 800fa14:	460d      	mov	r5, r1
 800fa16:	f7f0 fd7d 	bl	8000514 <__aeabi_i2d>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	4620      	mov	r0, r4
 800fa20:	4629      	mov	r1, r5
 800fa22:	f7f0 fde1 	bl	80005e8 <__aeabi_dmul>
 800fa26:	e6da      	b.n	800f7de <__kernel_tan+0x4e>
 800fa28:	2e01      	cmp	r6, #1
 800fa2a:	d038      	beq.n	800fa9e <__kernel_tan+0x30e>
 800fa2c:	460f      	mov	r7, r1
 800fa2e:	4689      	mov	r9, r1
 800fa30:	4602      	mov	r2, r0
 800fa32:	460b      	mov	r3, r1
 800fa34:	2000      	movs	r0, #0
 800fa36:	493e      	ldr	r1, [pc, #248]	; (800fb30 <__kernel_tan+0x3a0>)
 800fa38:	f7f0 ff00 	bl	800083c <__aeabi_ddiv>
 800fa3c:	2600      	movs	r6, #0
 800fa3e:	e9cd 0100 	strd	r0, r1, [sp]
 800fa42:	4652      	mov	r2, sl
 800fa44:	465b      	mov	r3, fp
 800fa46:	4630      	mov	r0, r6
 800fa48:	4639      	mov	r1, r7
 800fa4a:	f7f0 fc15 	bl	8000278 <__aeabi_dsub>
 800fa4e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800fa52:	4602      	mov	r2, r0
 800fa54:	460b      	mov	r3, r1
 800fa56:	ec51 0b18 	vmov	r0, r1, d8
 800fa5a:	f7f0 fc0d 	bl	8000278 <__aeabi_dsub>
 800fa5e:	4632      	mov	r2, r6
 800fa60:	462b      	mov	r3, r5
 800fa62:	f7f0 fdc1 	bl	80005e8 <__aeabi_dmul>
 800fa66:	46b0      	mov	r8, r6
 800fa68:	460f      	mov	r7, r1
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	4642      	mov	r2, r8
 800fa6e:	462b      	mov	r3, r5
 800fa70:	4640      	mov	r0, r8
 800fa72:	4649      	mov	r1, r9
 800fa74:	f7f0 fdb8 	bl	80005e8 <__aeabi_dmul>
 800fa78:	4b2c      	ldr	r3, [pc, #176]	; (800fb2c <__kernel_tan+0x39c>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f7f0 fbfe 	bl	800027c <__adddf3>
 800fa80:	4602      	mov	r2, r0
 800fa82:	460b      	mov	r3, r1
 800fa84:	4630      	mov	r0, r6
 800fa86:	4639      	mov	r1, r7
 800fa88:	f7f0 fbf8 	bl	800027c <__adddf3>
 800fa8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa90:	f7f0 fdaa 	bl	80005e8 <__aeabi_dmul>
 800fa94:	4642      	mov	r2, r8
 800fa96:	462b      	mov	r3, r5
 800fa98:	f7f0 fbf0 	bl	800027c <__adddf3>
 800fa9c:	e69f      	b.n	800f7de <__kernel_tan+0x4e>
 800fa9e:	4682      	mov	sl, r0
 800faa0:	468b      	mov	fp, r1
 800faa2:	e69e      	b.n	800f7e2 <__kernel_tan+0x52>
 800faa4:	f3af 8000 	nop.w
 800faa8:	54442d18 	.word	0x54442d18
 800faac:	3fe921fb 	.word	0x3fe921fb
 800fab0:	33145c07 	.word	0x33145c07
 800fab4:	3c81a626 	.word	0x3c81a626
	...
 800fac0:	74bf7ad4 	.word	0x74bf7ad4
 800fac4:	3efb2a70 	.word	0x3efb2a70
 800fac8:	32f0a7e9 	.word	0x32f0a7e9
 800facc:	3f12b80f 	.word	0x3f12b80f
 800fad0:	1a8d1068 	.word	0x1a8d1068
 800fad4:	3f3026f7 	.word	0x3f3026f7
 800fad8:	fee08315 	.word	0xfee08315
 800fadc:	3f57dbc8 	.word	0x3f57dbc8
 800fae0:	e96e8493 	.word	0xe96e8493
 800fae4:	3f8226e3 	.word	0x3f8226e3
 800fae8:	1bb341fe 	.word	0x1bb341fe
 800faec:	3faba1ba 	.word	0x3faba1ba
 800faf0:	db605373 	.word	0xdb605373
 800faf4:	bef375cb 	.word	0xbef375cb
 800faf8:	a03792a6 	.word	0xa03792a6
 800fafc:	3f147e88 	.word	0x3f147e88
 800fb00:	f2f26501 	.word	0xf2f26501
 800fb04:	3f4344d8 	.word	0x3f4344d8
 800fb08:	c9560328 	.word	0xc9560328
 800fb0c:	3f6d6d22 	.word	0x3f6d6d22
 800fb10:	8406d637 	.word	0x8406d637
 800fb14:	3f9664f4 	.word	0x3f9664f4
 800fb18:	1110fe7a 	.word	0x1110fe7a
 800fb1c:	3fc11111 	.word	0x3fc11111
 800fb20:	55555563 	.word	0x55555563
 800fb24:	3fd55555 	.word	0x3fd55555
 800fb28:	3e2fffff 	.word	0x3e2fffff
 800fb2c:	3ff00000 	.word	0x3ff00000
 800fb30:	bff00000 	.word	0xbff00000
 800fb34:	3fe59427 	.word	0x3fe59427

0800fb38 <fabs>:
 800fb38:	ec51 0b10 	vmov	r0, r1, d0
 800fb3c:	ee10 2a10 	vmov	r2, s0
 800fb40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fb44:	ec43 2b10 	vmov	d0, r2, r3
 800fb48:	4770      	bx	lr
 800fb4a:	0000      	movs	r0, r0
 800fb4c:	0000      	movs	r0, r0
	...

0800fb50 <floor>:
 800fb50:	ec51 0b10 	vmov	r0, r1, d0
 800fb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fb5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fb60:	2e13      	cmp	r6, #19
 800fb62:	ee10 5a10 	vmov	r5, s0
 800fb66:	ee10 8a10 	vmov	r8, s0
 800fb6a:	460c      	mov	r4, r1
 800fb6c:	dc32      	bgt.n	800fbd4 <floor+0x84>
 800fb6e:	2e00      	cmp	r6, #0
 800fb70:	da14      	bge.n	800fb9c <floor+0x4c>
 800fb72:	a333      	add	r3, pc, #204	; (adr r3, 800fc40 <floor+0xf0>)
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	f7f0 fb80 	bl	800027c <__adddf3>
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f7f0 ffc2 	bl	8000b08 <__aeabi_dcmpgt>
 800fb84:	b138      	cbz	r0, 800fb96 <floor+0x46>
 800fb86:	2c00      	cmp	r4, #0
 800fb88:	da57      	bge.n	800fc3a <floor+0xea>
 800fb8a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fb8e:	431d      	orrs	r5, r3
 800fb90:	d001      	beq.n	800fb96 <floor+0x46>
 800fb92:	4c2d      	ldr	r4, [pc, #180]	; (800fc48 <floor+0xf8>)
 800fb94:	2500      	movs	r5, #0
 800fb96:	4621      	mov	r1, r4
 800fb98:	4628      	mov	r0, r5
 800fb9a:	e025      	b.n	800fbe8 <floor+0x98>
 800fb9c:	4f2b      	ldr	r7, [pc, #172]	; (800fc4c <floor+0xfc>)
 800fb9e:	4137      	asrs	r7, r6
 800fba0:	ea01 0307 	and.w	r3, r1, r7
 800fba4:	4303      	orrs	r3, r0
 800fba6:	d01f      	beq.n	800fbe8 <floor+0x98>
 800fba8:	a325      	add	r3, pc, #148	; (adr r3, 800fc40 <floor+0xf0>)
 800fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbae:	f7f0 fb65 	bl	800027c <__adddf3>
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f7f0 ffa7 	bl	8000b08 <__aeabi_dcmpgt>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	d0eb      	beq.n	800fb96 <floor+0x46>
 800fbbe:	2c00      	cmp	r4, #0
 800fbc0:	bfbe      	ittt	lt
 800fbc2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fbc6:	fa43 f606 	asrlt.w	r6, r3, r6
 800fbca:	19a4      	addlt	r4, r4, r6
 800fbcc:	ea24 0407 	bic.w	r4, r4, r7
 800fbd0:	2500      	movs	r5, #0
 800fbd2:	e7e0      	b.n	800fb96 <floor+0x46>
 800fbd4:	2e33      	cmp	r6, #51	; 0x33
 800fbd6:	dd0b      	ble.n	800fbf0 <floor+0xa0>
 800fbd8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fbdc:	d104      	bne.n	800fbe8 <floor+0x98>
 800fbde:	ee10 2a10 	vmov	r2, s0
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	f7f0 fb4a 	bl	800027c <__adddf3>
 800fbe8:	ec41 0b10 	vmov	d0, r0, r1
 800fbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fbf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fbf8:	fa23 f707 	lsr.w	r7, r3, r7
 800fbfc:	4207      	tst	r7, r0
 800fbfe:	d0f3      	beq.n	800fbe8 <floor+0x98>
 800fc00:	a30f      	add	r3, pc, #60	; (adr r3, 800fc40 <floor+0xf0>)
 800fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc06:	f7f0 fb39 	bl	800027c <__adddf3>
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f7f0 ff7b 	bl	8000b08 <__aeabi_dcmpgt>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	d0bf      	beq.n	800fb96 <floor+0x46>
 800fc16:	2c00      	cmp	r4, #0
 800fc18:	da02      	bge.n	800fc20 <floor+0xd0>
 800fc1a:	2e14      	cmp	r6, #20
 800fc1c:	d103      	bne.n	800fc26 <floor+0xd6>
 800fc1e:	3401      	adds	r4, #1
 800fc20:	ea25 0507 	bic.w	r5, r5, r7
 800fc24:	e7b7      	b.n	800fb96 <floor+0x46>
 800fc26:	2301      	movs	r3, #1
 800fc28:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fc2c:	fa03 f606 	lsl.w	r6, r3, r6
 800fc30:	4435      	add	r5, r6
 800fc32:	4545      	cmp	r5, r8
 800fc34:	bf38      	it	cc
 800fc36:	18e4      	addcc	r4, r4, r3
 800fc38:	e7f2      	b.n	800fc20 <floor+0xd0>
 800fc3a:	2500      	movs	r5, #0
 800fc3c:	462c      	mov	r4, r5
 800fc3e:	e7aa      	b.n	800fb96 <floor+0x46>
 800fc40:	8800759c 	.word	0x8800759c
 800fc44:	7e37e43c 	.word	0x7e37e43c
 800fc48:	bff00000 	.word	0xbff00000
 800fc4c:	000fffff 	.word	0x000fffff

0800fc50 <scalbn>:
 800fc50:	b570      	push	{r4, r5, r6, lr}
 800fc52:	ec55 4b10 	vmov	r4, r5, d0
 800fc56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	462b      	mov	r3, r5
 800fc5e:	b99a      	cbnz	r2, 800fc88 <scalbn+0x38>
 800fc60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fc64:	4323      	orrs	r3, r4
 800fc66:	d036      	beq.n	800fcd6 <scalbn+0x86>
 800fc68:	4b39      	ldr	r3, [pc, #228]	; (800fd50 <scalbn+0x100>)
 800fc6a:	4629      	mov	r1, r5
 800fc6c:	ee10 0a10 	vmov	r0, s0
 800fc70:	2200      	movs	r2, #0
 800fc72:	f7f0 fcb9 	bl	80005e8 <__aeabi_dmul>
 800fc76:	4b37      	ldr	r3, [pc, #220]	; (800fd54 <scalbn+0x104>)
 800fc78:	429e      	cmp	r6, r3
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	460d      	mov	r5, r1
 800fc7e:	da10      	bge.n	800fca2 <scalbn+0x52>
 800fc80:	a32b      	add	r3, pc, #172	; (adr r3, 800fd30 <scalbn+0xe0>)
 800fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc86:	e03a      	b.n	800fcfe <scalbn+0xae>
 800fc88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fc8c:	428a      	cmp	r2, r1
 800fc8e:	d10c      	bne.n	800fcaa <scalbn+0x5a>
 800fc90:	ee10 2a10 	vmov	r2, s0
 800fc94:	4620      	mov	r0, r4
 800fc96:	4629      	mov	r1, r5
 800fc98:	f7f0 faf0 	bl	800027c <__adddf3>
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	460d      	mov	r5, r1
 800fca0:	e019      	b.n	800fcd6 <scalbn+0x86>
 800fca2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fca6:	460b      	mov	r3, r1
 800fca8:	3a36      	subs	r2, #54	; 0x36
 800fcaa:	4432      	add	r2, r6
 800fcac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fcb0:	428a      	cmp	r2, r1
 800fcb2:	dd08      	ble.n	800fcc6 <scalbn+0x76>
 800fcb4:	2d00      	cmp	r5, #0
 800fcb6:	a120      	add	r1, pc, #128	; (adr r1, 800fd38 <scalbn+0xe8>)
 800fcb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcbc:	da1c      	bge.n	800fcf8 <scalbn+0xa8>
 800fcbe:	a120      	add	r1, pc, #128	; (adr r1, 800fd40 <scalbn+0xf0>)
 800fcc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcc4:	e018      	b.n	800fcf8 <scalbn+0xa8>
 800fcc6:	2a00      	cmp	r2, #0
 800fcc8:	dd08      	ble.n	800fcdc <scalbn+0x8c>
 800fcca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fcce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fcd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fcd6:	ec45 4b10 	vmov	d0, r4, r5
 800fcda:	bd70      	pop	{r4, r5, r6, pc}
 800fcdc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fce0:	da19      	bge.n	800fd16 <scalbn+0xc6>
 800fce2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fce6:	429e      	cmp	r6, r3
 800fce8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fcec:	dd0a      	ble.n	800fd04 <scalbn+0xb4>
 800fcee:	a112      	add	r1, pc, #72	; (adr r1, 800fd38 <scalbn+0xe8>)
 800fcf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d1e2      	bne.n	800fcbe <scalbn+0x6e>
 800fcf8:	a30f      	add	r3, pc, #60	; (adr r3, 800fd38 <scalbn+0xe8>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 fc73 	bl	80005e8 <__aeabi_dmul>
 800fd02:	e7cb      	b.n	800fc9c <scalbn+0x4c>
 800fd04:	a10a      	add	r1, pc, #40	; (adr r1, 800fd30 <scalbn+0xe0>)
 800fd06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d0b8      	beq.n	800fc80 <scalbn+0x30>
 800fd0e:	a10e      	add	r1, pc, #56	; (adr r1, 800fd48 <scalbn+0xf8>)
 800fd10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd14:	e7b4      	b.n	800fc80 <scalbn+0x30>
 800fd16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd1a:	3236      	adds	r2, #54	; 0x36
 800fd1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fd24:	4620      	mov	r0, r4
 800fd26:	4b0c      	ldr	r3, [pc, #48]	; (800fd58 <scalbn+0x108>)
 800fd28:	2200      	movs	r2, #0
 800fd2a:	e7e8      	b.n	800fcfe <scalbn+0xae>
 800fd2c:	f3af 8000 	nop.w
 800fd30:	c2f8f359 	.word	0xc2f8f359
 800fd34:	01a56e1f 	.word	0x01a56e1f
 800fd38:	8800759c 	.word	0x8800759c
 800fd3c:	7e37e43c 	.word	0x7e37e43c
 800fd40:	8800759c 	.word	0x8800759c
 800fd44:	fe37e43c 	.word	0xfe37e43c
 800fd48:	c2f8f359 	.word	0xc2f8f359
 800fd4c:	81a56e1f 	.word	0x81a56e1f
 800fd50:	43500000 	.word	0x43500000
 800fd54:	ffff3cb0 	.word	0xffff3cb0
 800fd58:	3c900000 	.word	0x3c900000

0800fd5c <_init>:
 800fd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5e:	bf00      	nop
 800fd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd62:	bc08      	pop	{r3}
 800fd64:	469e      	mov	lr, r3
 800fd66:	4770      	bx	lr

0800fd68 <_fini>:
 800fd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd6a:	bf00      	nop
 800fd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd6e:	bc08      	pop	{r3}
 800fd70:	469e      	mov	lr, r3
 800fd72:	4770      	bx	lr
