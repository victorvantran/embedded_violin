
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800cc1c  0800cc1c  0001cc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf90  0800cf90  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf90  0800cf90  0001cf90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf98  0800cf98  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf98  0800cf98  0001cf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf9c  0800cf9c  0001cf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800cfa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fa24  2000011c  0800d0bc  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fb40  0800d0bc  0002fb40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f58c  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054c5  00000000  00000000  0004f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022c8  00000000  00000000  00054ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d0  00000000  00000000  00056e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dec8  00000000  00000000  00058f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026347  00000000  00000000  00086e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118acf  00000000  00000000  000ad147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c5c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c84  00000000  00000000  001c5c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000011c 	.word	0x2000011c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc04 	.word	0x0800cc04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000120 	.word	0x20000120
 80001cc:	0800cc04 	.word	0x0800cc04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2140      	movs	r1, #64	; 0x40
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <SELECT+0x18>)
 8000572:	f004 f8cf 	bl	8004714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f002 fbc8 	bl	8002d0c <HAL_Delay>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	48000400 	.word	0x48000400

08000584 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <DESELECT+0x18>)
 800058e:	f004 f8c1 	bl	8004714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f002 fbba 	bl	8002d0c <HAL_Delay>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	48000400 	.word	0x48000400

080005a0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005aa:	bf00      	nop
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SPI_TxByte+0x30>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d1f8      	bne.n	80005ac <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <SPI_TxByte+0x30>)
 80005c2:	f005 fdc6 	bl	8006152 <HAL_SPI_Transmit>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000c8c4 	.word	0x2000c8c4

080005d4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005e0:	bf00      	nop
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <SPI_TxBuffer+0x30>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d1f8      	bne.n	80005e2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005f0:	887a      	ldrh	r2, [r7, #2]
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <SPI_TxBuffer+0x30>)
 80005f8:	f005 fdab 	bl	8006152 <HAL_SPI_Transmit>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000c8c4 	.word	0x2000c8c4

08000608 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800060e:	23ff      	movs	r3, #255	; 0xff
 8000610:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000612:	bf00      	nop
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <SPI_RxByte+0x34>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	2b02      	cmp	r3, #2
 8000620:	d1f8      	bne.n	8000614 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000622:	1dba      	adds	r2, r7, #6
 8000624:	1df9      	adds	r1, r7, #7
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <SPI_RxByte+0x34>)
 800062e:	f005 fefe 	bl	800642e <HAL_SPI_TransmitReceive>

	return data;
 8000632:	79bb      	ldrb	r3, [r7, #6]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000c8c4 	.word	0x2000c8c4

08000640 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000648:	f7ff ffde 	bl	8000608 <SPI_RxByte>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	701a      	strb	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <SD_ReadyWait+0x30>)
 8000664:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000668:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800066a:	f7ff ffcd 	bl	8000608 <SPI_RxByte>
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2bff      	cmp	r3, #255	; 0xff
 8000676:	d003      	beq.n	8000680 <SD_ReadyWait+0x24>
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <SD_ReadyWait+0x30>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f4      	bne.n	800066a <SD_ReadyWait+0xe>

	return res;
 8000680:	79fb      	ldrb	r3, [r7, #7]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20003578 	.word	0x20003578

08000690 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000696:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800069a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800069c:	f7ff ff72 	bl	8000584 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	e005      	b.n	80006b2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006a6:	20ff      	movs	r0, #255	; 0xff
 80006a8:	f7ff ff7a 	bl	80005a0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b09      	cmp	r3, #9
 80006b6:	ddf6      	ble.n	80006a6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006b8:	f7ff ff56 	bl	8000568 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006d0:	2395      	movs	r3, #149	; 0x95
 80006d2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006d4:	463b      	mov	r3, r7
 80006d6:	2106      	movs	r1, #6
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff7b 	bl	80005d4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006de:	e002      	b.n	80006e6 <SD_PowerOn+0x56>
	{
		cnt--;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006e6:	f7ff ff8f 	bl	8000608 <SPI_RxByte>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d002      	beq.n	80006f6 <SD_PowerOn+0x66>
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80006f6:	f7ff ff45 	bl	8000584 <DESELECT>
	SPI_TxByte(0XFF);
 80006fa:	20ff      	movs	r0, #255	; 0xff
 80006fc:	f7ff ff50 	bl	80005a0 <SPI_TxByte>

	PowerFlag = 1;
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <SD_PowerOn+0x80>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000139 	.word	0x20000139

08000714 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <SD_PowerOff+0x14>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	20000139 	.word	0x20000139

0800072c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <SD_CheckPower+0x14>)
 8000732:	781b      	ldrb	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000139 	.word	0x20000139

08000744 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SD_RxDataBlock+0x58>)
 8000750:	22c8      	movs	r2, #200	; 0xc8
 8000752:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000754:	f7ff ff58 	bl	8000608 <SPI_RxByte>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2bff      	cmp	r3, #255	; 0xff
 8000760:	d103      	bne.n	800076a <SD_RxDataBlock+0x26>
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <SD_RxDataBlock+0x58>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f4      	bne.n	8000754 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2bfe      	cmp	r3, #254	; 0xfe
 800076e:	d001      	beq.n	8000774 <SD_RxDataBlock+0x30>
 8000770:	2300      	movs	r3, #0
 8000772:	e00f      	b.n	8000794 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff60 	bl	8000640 <SPI_RxBytePtr>
	} while(len--);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	603a      	str	r2, [r7, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f4      	bne.n	8000774 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800078a:	f7ff ff3d 	bl	8000608 <SPI_RxByte>
	SPI_RxByte();
 800078e:	f7ff ff3b 	bl	8000608 <SPI_RxByte>

	return TRUE;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000357a 	.word	0x2000357a

080007a0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007b0:	f7ff ff54 	bl	800065c <SD_ReadyWait>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2bff      	cmp	r3, #255	; 0xff
 80007b8:	d001      	beq.n	80007be <SD_TxDataBlock+0x1e>
 80007ba:	2300      	movs	r3, #0
 80007bc:	e02f      	b.n	800081e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff feed 	bl	80005a0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2bfd      	cmp	r3, #253	; 0xfd
 80007ca:	d020      	beq.n	800080e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff feff 	bl	80005d4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007d6:	f7ff ff17 	bl	8000608 <SPI_RxByte>
		SPI_RxByte();
 80007da:	f7ff ff15 	bl	8000608 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007de:	e00b      	b.n	80007f8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007e0:	f7ff ff12 	bl	8000608 <SPI_RxByte>
 80007e4:	4603      	mov	r3, r0
 80007e6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	f003 031f 	and.w	r3, r3, #31
 80007ee:	2b05      	cmp	r3, #5
 80007f0:	d006      	beq.n	8000800 <SD_TxDataBlock+0x60>
			i++;
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	3301      	adds	r3, #1
 80007f6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	2b40      	cmp	r3, #64	; 0x40
 80007fc:	d9f0      	bls.n	80007e0 <SD_TxDataBlock+0x40>
 80007fe:	e000      	b.n	8000802 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000800:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000802:	bf00      	nop
 8000804:	f7ff ff00 	bl	8000608 <SPI_RxByte>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0fa      	beq.n	8000804 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	2b05      	cmp	r3, #5
 8000816:	d101      	bne.n	800081c <SD_TxDataBlock+0x7c>
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <SD_TxDataBlock+0x7e>

	return FALSE;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b084      	sub	sp, #16
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	6039      	str	r1, [r7, #0]
 8000830:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000832:	f7ff ff13 	bl	800065c <SD_ReadyWait>
 8000836:	4603      	mov	r3, r0
 8000838:	2bff      	cmp	r3, #255	; 0xff
 800083a:	d001      	beq.n	8000840 <SD_SendCmd+0x1a>
 800083c:	23ff      	movs	r3, #255	; 0xff
 800083e:	e042      	b.n	80008c6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff feac 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	0e1b      	lsrs	r3, r3, #24
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fea6 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0c1b      	lsrs	r3, r3, #16
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fea0 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe9a 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe95 	bl	80005a0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b40      	cmp	r3, #64	; 0x40
 800087a:	d102      	bne.n	8000882 <SD_SendCmd+0x5c>
 800087c:	2395      	movs	r3, #149	; 0x95
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e007      	b.n	8000892 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b48      	cmp	r3, #72	; 0x48
 8000886:	d102      	bne.n	800088e <SD_SendCmd+0x68>
 8000888:	2387      	movs	r3, #135	; 0x87
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e001      	b.n	8000892 <SD_SendCmd+0x6c>
	else crc = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe83 	bl	80005a0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b4c      	cmp	r3, #76	; 0x4c
 800089e:	d101      	bne.n	80008a4 <SD_SendCmd+0x7e>
 80008a0:	f7ff feb2 	bl	8000608 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008a4:	230a      	movs	r3, #10
 80008a6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008a8:	f7ff feae 	bl	8000608 <SPI_RxByte>
 80008ac:	4603      	mov	r3, r0
 80008ae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	da05      	bge.n	80008c4 <SD_SendCmd+0x9e>
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	73bb      	strb	r3, [r7, #14]
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f1      	bne.n	80008a8 <SD_SendCmd+0x82>

	return res;
 80008c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SD_disk_initialize+0x14>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e0d1      	b.n	8000a88 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008e4:	4b6a      	ldr	r3, [pc, #424]	; (8000a90 <SD_disk_initialize+0x1c0>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <SD_disk_initialize+0x2a>
 80008f2:	4b67      	ldr	r3, [pc, #412]	; (8000a90 <SD_disk_initialize+0x1c0>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	e0c6      	b.n	8000a88 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80008fa:	f7ff fec9 	bl	8000690 <SD_PowerOn>

	/* slave select */
	SELECT();
 80008fe:	f7ff fe33 	bl	8000568 <SELECT>

	/* check disk type */
	type = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000906:	2100      	movs	r1, #0
 8000908:	2040      	movs	r0, #64	; 0x40
 800090a:	f7ff ff8c 	bl	8000826 <SD_SendCmd>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	f040 80a1 	bne.w	8000a58 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800091c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800091e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000922:	2048      	movs	r0, #72	; 0x48
 8000924:	f7ff ff7f 	bl	8000826 <SD_SendCmd>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d155      	bne.n	80009da <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e00c      	b.n	800094e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000934:	7bfc      	ldrb	r4, [r7, #15]
 8000936:	f7ff fe67 	bl	8000608 <SPI_RxByte>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4423      	add	r3, r4
 8000944:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	3301      	adds	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d9ef      	bls.n	8000934 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000954:	7abb      	ldrb	r3, [r7, #10]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d17e      	bne.n	8000a58 <SD_disk_initialize+0x188>
 800095a:	7afb      	ldrb	r3, [r7, #11]
 800095c:	2baa      	cmp	r3, #170	; 0xaa
 800095e:	d17b      	bne.n	8000a58 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000960:	2100      	movs	r1, #0
 8000962:	2077      	movs	r0, #119	; 0x77
 8000964:	f7ff ff5f 	bl	8000826 <SD_SendCmd>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d807      	bhi.n	800097e <SD_disk_initialize+0xae>
 800096e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000972:	2069      	movs	r0, #105	; 0x69
 8000974:	f7ff ff57 	bl	8000826 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d004      	beq.n	8000988 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800097e:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1ec      	bne.n	8000960 <SD_disk_initialize+0x90>
 8000986:	e000      	b.n	800098a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000988:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <SD_disk_initialize+0x1c4>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d062      	beq.n	8000a58 <SD_disk_initialize+0x188>
 8000992:	2100      	movs	r1, #0
 8000994:	207a      	movs	r0, #122	; 0x7a
 8000996:	f7ff ff46 	bl	8000826 <SD_SendCmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d15b      	bne.n	8000a58 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e00c      	b.n	80009c0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009a6:	7bfc      	ldrb	r4, [r7, #15]
 80009a8:	f7ff fe2e 	bl	8000608 <SPI_RxByte>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4423      	add	r3, r4
 80009b6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	3301      	adds	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d9ef      	bls.n	80009a6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009c6:	7a3b      	ldrb	r3, [r7, #8]
 80009c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SD_disk_initialize+0x104>
 80009d0:	230c      	movs	r3, #12
 80009d2:	e000      	b.n	80009d6 <SD_disk_initialize+0x106>
 80009d4:	2304      	movs	r3, #4
 80009d6:	73bb      	strb	r3, [r7, #14]
 80009d8:	e03e      	b.n	8000a58 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009da:	2100      	movs	r1, #0
 80009dc:	2077      	movs	r0, #119	; 0x77
 80009de:	f7ff ff22 	bl	8000826 <SD_SendCmd>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d808      	bhi.n	80009fa <SD_disk_initialize+0x12a>
 80009e8:	2100      	movs	r1, #0
 80009ea:	2069      	movs	r0, #105	; 0x69
 80009ec:	f7ff ff1b 	bl	8000826 <SD_SendCmd>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d801      	bhi.n	80009fa <SD_disk_initialize+0x12a>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e000      	b.n	80009fc <SD_disk_initialize+0x12c>
 80009fa:	2301      	movs	r3, #1
 80009fc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d10e      	bne.n	8000a22 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a04:	2100      	movs	r1, #0
 8000a06:	2077      	movs	r0, #119	; 0x77
 8000a08:	f7ff ff0d 	bl	8000826 <SD_SendCmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d80e      	bhi.n	8000a30 <SD_disk_initialize+0x160>
 8000a12:	2100      	movs	r1, #0
 8000a14:	2069      	movs	r0, #105	; 0x69
 8000a16:	f7ff ff06 	bl	8000826 <SD_SendCmd>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d107      	bne.n	8000a30 <SD_disk_initialize+0x160>
 8000a20:	e00c      	b.n	8000a3c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a22:	2100      	movs	r1, #0
 8000a24:	2041      	movs	r0, #65	; 0x41
 8000a26:	f7ff fefe 	bl	8000826 <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d004      	beq.n	8000a3a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1e2      	bne.n	80009fe <SD_disk_initialize+0x12e>
 8000a38:	e000      	b.n	8000a3c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a3a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d007      	beq.n	8000a54 <SD_disk_initialize+0x184>
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	2050      	movs	r0, #80	; 0x50
 8000a4a:	f7ff feec 	bl	8000826 <SD_SendCmd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x188>
 8000a54:	2300      	movs	r3, #0
 8000a56:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <SD_disk_initialize+0x1c8>)
 8000a5a:	7bbb      	ldrb	r3, [r7, #14]
 8000a5c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a5e:	f7ff fd91 	bl	8000584 <DESELECT>
	SPI_RxByte();
 8000a62:	f7ff fdd1 	bl	8000608 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d008      	beq.n	8000a7e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <SD_disk_initialize+0x1c0>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SD_disk_initialize+0x1c0>)
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e001      	b.n	8000a82 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a7e:	f7ff fe49 	bl	8000714 <SD_PowerOff>
	}

	return Stat;
 8000a82:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <SD_disk_initialize+0x1c0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	2000357a 	.word	0x2000357a
 8000a98:	20000138 	.word	0x20000138

08000a9c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SD_disk_status+0x14>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e002      	b.n	8000ab6 <SD_disk_status+0x1a>
	return Stat;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SD_disk_status+0x28>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000000 	.word	0x20000000

08000ac8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <SD_disk_read+0x1c>
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <SD_disk_read+0x20>
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	e051      	b.n	8000b8c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <SD_disk_read+0xcc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SD_disk_read+0x32>
 8000af6:	2303      	movs	r3, #3
 8000af8:	e048      	b.n	8000b8c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000afa:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <SD_disk_read+0xd0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <SD_disk_read+0x44>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	025b      	lsls	r3, r3, #9
 8000b0a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b0c:	f7ff fd2c 	bl	8000568 <SELECT>

	if (count == 1)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d111      	bne.n	8000b3a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	2051      	movs	r0, #81	; 0x51
 8000b1a:	f7ff fe84 	bl	8000826 <SD_SendCmd>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d129      	bne.n	8000b78 <SD_disk_read+0xb0>
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f7ff fe0b 	bl	8000744 <SD_RxDataBlock>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d021      	beq.n	8000b78 <SD_disk_read+0xb0>
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	e01e      	b.n	8000b78 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2052      	movs	r0, #82	; 0x52
 8000b3e:	f7ff fe72 	bl	8000826 <SD_SendCmd>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d117      	bne.n	8000b78 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	68b8      	ldr	r0, [r7, #8]
 8000b4e:	f7ff fdf9 	bl	8000744 <SD_RxDataBlock>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00a      	beq.n	8000b6e <SD_disk_read+0xa6>
				buff += 512;
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b5e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1ed      	bne.n	8000b48 <SD_disk_read+0x80>
 8000b6c:	e000      	b.n	8000b70 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b6e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b70:	2100      	movs	r1, #0
 8000b72:	204c      	movs	r0, #76	; 0x4c
 8000b74:	f7ff fe57 	bl	8000826 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b78:	f7ff fd04 	bl	8000584 <DESELECT>
	SPI_RxByte();
 8000b7c:	f7ff fd44 	bl	8000608 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000138 	.word	0x20000138

08000b9c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4603      	mov	r3, r0
 8000baa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <SD_disk_write+0x1c>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <SD_disk_write+0x20>
 8000bb8:	2304      	movs	r3, #4
 8000bba:	e06b      	b.n	8000c94 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <SD_disk_write+0x100>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SD_disk_write+0x32>
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e062      	b.n	8000c94 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <SD_disk_write+0x100>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SD_disk_write+0x44>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e059      	b.n	8000c94 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <SD_disk_write+0x104>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <SD_disk_write+0x56>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	025b      	lsls	r3, r3, #9
 8000bf0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000bf2:	f7ff fcb9 	bl	8000568 <SELECT>

	if (count == 1)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d110      	bne.n	8000c1e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	2058      	movs	r0, #88	; 0x58
 8000c00:	f7ff fe11 	bl	8000826 <SD_SendCmd>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d13a      	bne.n	8000c80 <SD_disk_write+0xe4>
 8000c0a:	21fe      	movs	r1, #254	; 0xfe
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f7ff fdc7 	bl	80007a0 <SD_TxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d033      	beq.n	8000c80 <SD_disk_write+0xe4>
			count = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	e030      	b.n	8000c80 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <SD_disk_write+0x104>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d007      	beq.n	8000c3a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2077      	movs	r0, #119	; 0x77
 8000c2e:	f7ff fdfa 	bl	8000826 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	2057      	movs	r0, #87	; 0x57
 8000c36:	f7ff fdf6 	bl	8000826 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2059      	movs	r0, #89	; 0x59
 8000c3e:	f7ff fdf2 	bl	8000826 <SD_SendCmd>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11b      	bne.n	8000c80 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c48:	21fc      	movs	r1, #252	; 0xfc
 8000c4a:	68b8      	ldr	r0, [r7, #8]
 8000c4c:	f7ff fda8 	bl	80007a0 <SD_TxDataBlock>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d00a      	beq.n	8000c6c <SD_disk_write+0xd0>
				buff += 512;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c5c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1ee      	bne.n	8000c48 <SD_disk_write+0xac>
 8000c6a:	e000      	b.n	8000c6e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c6c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c6e:	21fd      	movs	r1, #253	; 0xfd
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fd95 	bl	80007a0 <SD_TxDataBlock>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d101      	bne.n	8000c80 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c80:	f7ff fc80 	bl	8000584 <DESELECT>
	SPI_RxByte();
 8000c84:	f7ff fcc0 	bl	8000608 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000138 	.word	0x20000138

08000ca4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b08b      	sub	sp, #44	; 0x2c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	603a      	str	r2, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SD_disk_ioctl+0x1e>
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e115      	b.n	8000eee <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d124      	bne.n	8000d18 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cce:	6a3b      	ldr	r3, [r7, #32]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d012      	beq.n	8000cfc <SD_disk_ioctl+0x58>
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	dc1a      	bgt.n	8000d10 <SD_disk_ioctl+0x6c>
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <SD_disk_ioctl+0x40>
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d006      	beq.n	8000cf0 <SD_disk_ioctl+0x4c>
 8000ce2:	e015      	b.n	8000d10 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000ce4:	f7ff fd16 	bl	8000714 <SD_PowerOff>
			res = RES_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cee:	e0fc      	b.n	8000eea <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000cf0:	f7ff fcce 	bl	8000690 <SD_PowerOn>
			res = RES_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cfa:	e0f6      	b.n	8000eea <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	1c5c      	adds	r4, r3, #1
 8000d00:	f7ff fd14 	bl	800072c <SD_CheckPower>
 8000d04:	4603      	mov	r3, r0
 8000d06:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0e:	e0ec      	b.n	8000eea <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d10:	2304      	movs	r3, #4
 8000d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d16:	e0e8      	b.n	8000eea <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d18:	4b77      	ldr	r3, [pc, #476]	; (8000ef8 <SD_disk_ioctl+0x254>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SD_disk_ioctl+0x86>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e0e1      	b.n	8000eee <SD_disk_ioctl+0x24a>

		SELECT();
 8000d2a:	f7ff fc1d 	bl	8000568 <SELECT>

		switch (ctrl)
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	2b0d      	cmp	r3, #13
 8000d32:	f200 80cb 	bhi.w	8000ecc <SD_disk_ioctl+0x228>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <SD_disk_ioctl+0x98>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000e37 	.word	0x08000e37
 8000d40:	08000d75 	.word	0x08000d75
 8000d44:	08000e27 	.word	0x08000e27
 8000d48:	08000ecd 	.word	0x08000ecd
 8000d4c:	08000ecd 	.word	0x08000ecd
 8000d50:	08000ecd 	.word	0x08000ecd
 8000d54:	08000ecd 	.word	0x08000ecd
 8000d58:	08000ecd 	.word	0x08000ecd
 8000d5c:	08000ecd 	.word	0x08000ecd
 8000d60:	08000ecd 	.word	0x08000ecd
 8000d64:	08000ecd 	.word	0x08000ecd
 8000d68:	08000e49 	.word	0x08000e49
 8000d6c:	08000e6d 	.word	0x08000e6d
 8000d70:	08000e91 	.word	0x08000e91
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d74:	2100      	movs	r1, #0
 8000d76:	2049      	movs	r0, #73	; 0x49
 8000d78:	f7ff fd55 	bl	8000826 <SD_SendCmd>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 80a8 	bne.w	8000ed4 <SD_disk_ioctl+0x230>
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fcda 	bl	8000744 <SD_RxDataBlock>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 809e 	beq.w	8000ed4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d98:	7b3b      	ldrb	r3, [r7, #12]
 8000d9a:	099b      	lsrs	r3, r3, #6
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10e      	bne.n	8000dc0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000da2:	7d7b      	ldrb	r3, [r7, #21]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	7d3b      	ldrb	r3, [r7, #20]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4413      	add	r3, r2
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000db6:	8bfb      	ldrh	r3, [r7, #30]
 8000db8:	029a      	lsls	r2, r3, #10
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e02e      	b.n	8000e1e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dc0:	7c7b      	ldrb	r3, [r7, #17]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	7dbb      	ldrb	r3, [r7, #22]
 8000dca:	09db      	lsrs	r3, r3, #7
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4413      	add	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 0306 	and.w	r3, r3, #6
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3302      	adds	r3, #2
 8000de4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000de8:	7d3b      	ldrb	r3, [r7, #20]
 8000dea:	099b      	lsrs	r3, r3, #6
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	7cfb      	ldrb	r3, [r7, #19]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	7cbb      	ldrb	r3, [r7, #18]
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e10:	8bfa      	ldrh	r2, [r7, #30]
 8000e12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e16:	3b09      	subs	r3, #9
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e24:	e056      	b.n	8000ed4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e34:	e055      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e36:	f7ff fc11 	bl	800065c <SD_ReadyWait>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2bff      	cmp	r3, #255	; 0xff
 8000e3e:	d14b      	bne.n	8000ed8 <SD_disk_ioctl+0x234>
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e46:	e047      	b.n	8000ed8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2049      	movs	r0, #73	; 0x49
 8000e4c:	f7ff fceb 	bl	8000826 <SD_SendCmd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d142      	bne.n	8000edc <SD_disk_ioctl+0x238>
 8000e56:	2110      	movs	r1, #16
 8000e58:	6a38      	ldr	r0, [r7, #32]
 8000e5a:	f7ff fc73 	bl	8000744 <SD_RxDataBlock>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d03b      	beq.n	8000edc <SD_disk_ioctl+0x238>
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e6a:	e037      	b.n	8000edc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	204a      	movs	r0, #74	; 0x4a
 8000e70:	f7ff fcd9 	bl	8000826 <SD_SendCmd>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d132      	bne.n	8000ee0 <SD_disk_ioctl+0x23c>
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	6a38      	ldr	r0, [r7, #32]
 8000e7e:	f7ff fc61 	bl	8000744 <SD_RxDataBlock>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d02b      	beq.n	8000ee0 <SD_disk_ioctl+0x23c>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e8e:	e027      	b.n	8000ee0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e90:	2100      	movs	r1, #0
 8000e92:	207a      	movs	r0, #122	; 0x7a
 8000e94:	f7ff fcc7 	bl	8000826 <SD_SendCmd>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d116      	bne.n	8000ecc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ea4:	e00b      	b.n	8000ebe <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000ea6:	6a3c      	ldr	r4, [r7, #32]
 8000ea8:	1c63      	adds	r3, r4, #1
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	f7ff fbac 	bl	8000608 <SPI_RxByte>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d9ef      	bls.n	8000ea6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ed2:	e006      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000ed4:	bf00      	nop
 8000ed6:	e004      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000ed8:	bf00      	nop
 8000eda:	e002      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000edc:	bf00      	nop
 8000ede:	e000      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000ee0:	bf00      	nop
		}

		DESELECT();
 8000ee2:	f7ff fb4f 	bl	8000584 <DESELECT>
		SPI_RxByte();
 8000ee6:	f7ff fb8f 	bl	8000608 <SPI_RxByte>
	}

	return res;
 8000eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	372c      	adds	r7, #44	; 0x2c
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000

08000efc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8000f04:	1d39      	adds	r1, r7, #4
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <__io_putchar+0x20>)
 8000f0c:	f007 f8aa 	bl	8008064 <HAL_UART_Transmit>
	return ch;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000c928 	.word	0x2000c928

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f24:	f001 feb2 	bl	8002c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f28:	f000 f850 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2c:	f000 fc7c 	bl	8001828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f30:	f000 fc4a 	bl	80017c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f34:	f000 f8d4 	bl	80010e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f38:	f000 f9c6 	bl	80012c8 <MX_TIM1_Init>
  MX_FATFS_Init();
 8000f3c:	f007 fd18 	bl	8008970 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000f40:	f000 f984 	bl	800124c <MX_SPI1_Init>
  MX_TIM15_Init();
 8000f44:	f000 facc 	bl	80014e0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000f48:	f000 fb4e 	bl	80015e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000f4c:	f000 fbc4 	bl	80016d8 <MX_TIM17_Init>
  MX_I2C1_Init();
 8000f50:	f000 f93c 	bl	80011cc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f54:	f000 fa48 	bl	80013e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f58:	f007 fe12 	bl	8008b80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 8000f5c:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <main+0x80>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <main+0x84>)
 8000f62:	f007 fe57 	bl	8008c14 <osThreadNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <main+0x88>)
 8000f6a:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <main+0x8c>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <main+0x90>)
 8000f72:	f007 fe4f 	bl	8008c14 <osThreadNew>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <main+0x94>)
 8000f7a:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <main+0x98>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	480e      	ldr	r0, [pc, #56]	; (8000fbc <main+0x9c>)
 8000f82:	f007 fe47 	bl	8008c14 <osThreadNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <main+0xa0>)
 8000f8a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <main+0xa4>)
 8000f8e:	f007 ff1b 	bl	8008dc8 <osEventFlagsNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a0c      	ldr	r2, [pc, #48]	; (8000fc8 <main+0xa8>)
 8000f96:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f98:	f007 fe16 	bl	8008bc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <main+0x7c>
 8000f9e:	bf00      	nop
 8000fa0:	0800ce28 	.word	0x0800ce28
 8000fa4:	080018d5 	.word	0x080018d5
 8000fa8:	20004760 	.word	0x20004760
 8000fac:	0800ce4c 	.word	0x0800ce4c
 8000fb0:	08001939 	.word	0x08001939
 8000fb4:	20003580 	.word	0x20003580
 8000fb8:	0800ce70 	.word	0x0800ce70
 8000fbc:	0800199d 	.word	0x0800199d
 8000fc0:	2000c8bc 	.word	0x2000c8bc
 8000fc4:	0800ce94 	.word	0x0800ce94
 8000fc8:	20003584 	.word	0x20003584

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0b8      	sub	sp, #224	; 0xe0
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd6:	2244      	movs	r2, #68	; 0x44
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00a fe3e 	bl	800bc5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2288      	movs	r2, #136	; 0x88
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00a fe30 	bl	800bc5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001006:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100a:	2310      	movs	r3, #16
 800100c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001022:	230a      	movs	r3, #10
 8001024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001028:	2307      	movs	r3, #7
 800102a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fd0a 	bl	8004a58 <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800104a:	f000 fcdb 	bl	8001a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2303      	movs	r3, #3
 8001056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800106c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001070:	2104      	movs	r1, #4
 8001072:	4618      	mov	r0, r3
 8001074:	f004 f8d6 	bl	8005224 <HAL_RCC_ClockConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800107e:	f000 fcc1 	bl	8001a04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001082:	f244 0342 	movw	r3, #16450	; 0x4042
 8001086:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001088:	2300      	movs	r3, #0
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800108c:	2300      	movs	r3, #0
 800108e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001090:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001094:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001096:	2302      	movs	r3, #2
 8001098:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800109e:	2308      	movs	r3, #8
 80010a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 faec 	bl	8005694 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80010c2:	f000 fc9f 	bl	8001a04 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ca:	f003 fc6f 	bl	80049ac <HAL_PWREx_ControlVoltageScaling>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80010d4:	f000 fc96 	bl	8001a04 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	37e0      	adds	r7, #224	; 0xe0
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001104:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <MX_ADC1_Init+0xe4>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MX_ADC1_Init+0xe0>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800111a:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <MX_ADC1_Init+0xe0>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001122:	2204      	movs	r2, #4
 8001124:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001128:	2200      	movs	r2, #0
 800112a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_ADC1_Init+0xe0>)
 800112e:	2200      	movs	r2, #0
 8001130:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001134:	2201      	movs	r2, #1
 8001136:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_ADC1_Init+0xe0>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001148:	2200      	movs	r2, #0
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_ADC1_Init+0xe0>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001156:	2200      	movs	r2, #0
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_ADC1_Init+0xe0>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001162:	4817      	ldr	r0, [pc, #92]	; (80011c0 <MX_ADC1_Init+0xe0>)
 8001164:	f001 ffc4 	bl	80030f0 <HAL_ADC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800116e:	f000 fc49 	bl	8001a04 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <MX_ADC1_Init+0xe0>)
 800117e:	f002 ff8d 	bl	800409c <HAL_ADCEx_MultiModeConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001188:	f000 fc3c 	bl	8001a04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_ADC1_Init+0xe8>)
 800118e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001190:	2306      	movs	r3, #6
 8001192:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001198:	237f      	movs	r3, #127	; 0x7f
 800119a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800119c:	2304      	movs	r3, #4
 800119e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_ADC1_Init+0xe0>)
 80011aa:	f002 fb2f 	bl	800380c <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011b4:	f000 fc26 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200046fc 	.word	0x200046fc
 80011c4:	50040000 	.word	0x50040000
 80011c8:	04300002 	.word	0x04300002

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_I2C1_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_I2C1_Init+0x7c>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_I2C1_Init+0x74>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_I2C1_Init+0x74>)
 8001208:	f003 fa9c 	bl	8004744 <HAL_I2C_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001212:	f000 fbf7 	bl	8001a04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_I2C1_Init+0x74>)
 800121a:	f003 fb22 	bl	8004862 <HAL_I2CEx_ConfigAnalogFilter>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001224:	f000 fbee 	bl	8001a04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_I2C1_Init+0x74>)
 800122c:	f003 fb64 	bl	80048f8 <HAL_I2CEx_ConfigDigitalFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001236:	f000 fbe5 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200045c4 	.word	0x200045c4
 8001244:	40005400 	.word	0x40005400
 8001248:	10909cec 	.word	0x10909cec

0800124c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_SPI1_Init+0x74>)
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <MX_SPI1_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_SPI1_Init+0x74>)
 8001258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800125c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_SPI1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_SPI1_Init+0x74>)
 8001266:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800126a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_SPI1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_SPI1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_SPI1_Init+0x74>)
 800127a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_SPI1_Init+0x74>)
 8001282:	2220      	movs	r2, #32
 8001284:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_SPI1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_SPI1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_SPI1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_SPI1_Init+0x74>)
 800129a:	2207      	movs	r2, #7
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_SPI1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_SPI1_Init+0x74>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_SPI1_Init+0x74>)
 80012ac:	f004 feae 	bl	800600c <HAL_SPI_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012b6:	f000 fba5 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000c8c4 	.word	0x2000c8c4
 80012c4:	40013000 	.word	0x40013000

080012c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b096      	sub	sp, #88	; 0x58
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	222c      	movs	r2, #44	; 0x2c
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00a fcb1 	bl	800bc5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012fa:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <MX_TIM1_Init+0x118>)
 80012fc:	4a39      	ldr	r2, [pc, #228]	; (80013e4 <MX_TIM1_Init+0x11c>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <MX_TIM1_Init+0x118>)
 8001302:	2207      	movs	r2, #7
 8001304:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <MX_TIM1_Init+0x118>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <MX_TIM1_Init+0x118>)
 800130e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001312:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <MX_TIM1_Init+0x118>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800131a:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <MX_TIM1_Init+0x118>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001320:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <MX_TIM1_Init+0x118>)
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001326:	482e      	ldr	r0, [pc, #184]	; (80013e0 <MX_TIM1_Init+0x118>)
 8001328:	f005 fcbc 	bl	8006ca4 <HAL_TIM_PWM_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001332:	f000 fb67 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001342:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001346:	4619      	mov	r1, r3
 8001348:	4825      	ldr	r0, [pc, #148]	; (80013e0 <MX_TIM1_Init+0x118>)
 800134a:	f006 fd19 	bl	8007d80 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001354:	f000 fb56 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001358:	2360      	movs	r3, #96	; 0x60
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001360:	2300      	movs	r3, #0
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001364:	2300      	movs	r3, #0
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	4818      	ldr	r0, [pc, #96]	; (80013e0 <MX_TIM1_Init+0x118>)
 800137e:	f006 f831 	bl	80073e4 <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001388:	f000 fb3c 	bl	8001a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <MX_TIM1_Init+0x118>)
 80013c2:	f006 fd65 	bl	8007e90 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80013cc:	f000 fb1a 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <MX_TIM1_Init+0x118>)
 80013d2:	f001 f997 	bl	8002704 <HAL_TIM_MspPostInit>

}
 80013d6:	bf00      	nop
 80013d8:	3758      	adds	r7, #88	; 0x58
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000c86c 	.word	0x2000c86c
 80013e4:	40012c00 	.word	0x40012c00

080013e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <MX_TIM3_Init+0xf0>)
 800140e:	4a33      	ldr	r2, [pc, #204]	; (80014dc <MX_TIM3_Init+0xf4>)
 8001410:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <MX_TIM3_Init+0xf0>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MX_TIM3_Init+0xf0>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_TIM3_Init+0xf0>)
 8001420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001424:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_TIM3_Init+0xf0>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <MX_TIM3_Init+0xf0>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001432:	4829      	ldr	r0, [pc, #164]	; (80014d8 <MX_TIM3_Init+0xf0>)
 8001434:	f005 fc36 	bl	8006ca4 <HAL_TIM_PWM_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800143e:	f000 fae1 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4821      	ldr	r0, [pc, #132]	; (80014d8 <MX_TIM3_Init+0xf0>)
 8001452:	f006 fc95 	bl	8007d80 <HAL_TIMEx_MasterConfigSynchronization>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800145c:	f000 fad2 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001460:	2360      	movs	r3, #96	; 0x60
 8001462:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	4619      	mov	r1, r3
 8001476:	4818      	ldr	r0, [pc, #96]	; (80014d8 <MX_TIM3_Init+0xf0>)
 8001478:	f005 ffb4 	bl	80073e4 <HAL_TIM_PWM_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001482:	f000 fabf 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	2204      	movs	r2, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4812      	ldr	r0, [pc, #72]	; (80014d8 <MX_TIM3_Init+0xf0>)
 800148e:	f005 ffa9 	bl	80073e4 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001498:	f000 fab4 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	2208      	movs	r2, #8
 80014a0:	4619      	mov	r1, r3
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_TIM3_Init+0xf0>)
 80014a4:	f005 ff9e 	bl	80073e4 <HAL_TIM_PWM_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80014ae:	f000 faa9 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	220c      	movs	r2, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM3_Init+0xf0>)
 80014ba:	f005 ff93 	bl	80073e4 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80014c4:	f000 fa9e 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM3_Init+0xf0>)
 80014ca:	f001 f91b 	bl	8002704 <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200046b0 	.word	0x200046b0
 80014dc:	40000400 	.word	0x40000400

080014e0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b096      	sub	sp, #88	; 0x58
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	222c      	movs	r2, #44	; 0x2c
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f00a fba5 	bl	800bc5c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <MX_TIM15_Init+0x100>)
 8001514:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <MX_TIM15_Init+0x104>)
 8001516:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8 - 1;
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <MX_TIM15_Init+0x100>)
 800151a:	2207      	movs	r2, #7
 800151c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <MX_TIM15_Init+0x100>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <MX_TIM15_Init+0x100>)
 8001526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <MX_TIM15_Init+0x100>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <MX_TIM15_Init+0x100>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <MX_TIM15_Init+0x100>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800153e:	4828      	ldr	r0, [pc, #160]	; (80015e0 <MX_TIM15_Init+0x100>)
 8001540:	f005 fbb0 	bl	8006ca4 <HAL_TIM_PWM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800154a:	f000 fa5b 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001556:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800155a:	4619      	mov	r1, r3
 800155c:	4820      	ldr	r0, [pc, #128]	; (80015e0 <MX_TIM15_Init+0x100>)
 800155e:	f006 fc0f 	bl	8007d80 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001568:	f000 fa4c 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156c:	2360      	movs	r3, #96	; 0x60
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001574:	2300      	movs	r3, #0
 8001576:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800158c:	2200      	movs	r2, #0
 800158e:	4619      	mov	r1, r3
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <MX_TIM15_Init+0x100>)
 8001592:	f005 ff27 	bl	80073e4 <HAL_TIM_PWM_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800159c:	f000 fa32 	bl	8001a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <MX_TIM15_Init+0x100>)
 80015c4:	f006 fc64 	bl	8007e90 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80015ce:	f000 fa19 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <MX_TIM15_Init+0x100>)
 80015d4:	f001 f896 	bl	8002704 <HAL_TIM_MspPostInit>

}
 80015d8:	bf00      	nop
 80015da:	3758      	adds	r7, #88	; 0x58
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20004610 	.word	0x20004610
 80015e4:	40014000 	.word	0x40014000

080015e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b092      	sub	sp, #72	; 0x48
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	615a      	str	r2, [r3, #20]
 8001600:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001602:	463b      	mov	r3, r7
 8001604:	222c      	movs	r2, #44	; 0x2c
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f00a fb27 	bl	800bc5c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <MX_TIM16_Init+0xe8>)
 8001610:	4a30      	ldr	r2, [pc, #192]	; (80016d4 <MX_TIM16_Init+0xec>)
 8001612:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8 - 1;
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <MX_TIM16_Init+0xe8>)
 8001616:	2207      	movs	r2, #7
 8001618:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <MX_TIM16_Init+0xe8>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <MX_TIM16_Init+0xe8>)
 8001622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001626:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <MX_TIM16_Init+0xe8>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <MX_TIM16_Init+0xe8>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <MX_TIM16_Init+0xe8>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800163a:	4825      	ldr	r0, [pc, #148]	; (80016d0 <MX_TIM16_Init+0xe8>)
 800163c:	f005 fa6a 	bl	8006b14 <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001646:	f000 f9dd 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800164a:	4821      	ldr	r0, [pc, #132]	; (80016d0 <MX_TIM16_Init+0xe8>)
 800164c:	f005 fb2a 	bl	8006ca4 <HAL_TIM_PWM_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001656:	f000 f9d5 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165a:	2360      	movs	r3, #96	; 0x60
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001662:	2300      	movs	r3, #0
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001666:	2300      	movs	r3, #0
 8001668:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	4814      	ldr	r0, [pc, #80]	; (80016d0 <MX_TIM16_Init+0xe8>)
 8001680:	f005 feb0 	bl	80073e4 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800168a:	f000 f9bb 	bl	8001a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80016ac:	463b      	mov	r3, r7
 80016ae:	4619      	mov	r1, r3
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <MX_TIM16_Init+0xe8>)
 80016b2:	f006 fbed 	bl	8007e90 <HAL_TIMEx_ConfigBreakDeadTime>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80016bc:	f000 f9a2 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <MX_TIM16_Init+0xe8>)
 80016c2:	f001 f81f 	bl	8002704 <HAL_TIM_MspPostInit>

}
 80016c6:	bf00      	nop
 80016c8:	3748      	adds	r7, #72	; 0x48
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000d9e0 	.word	0x2000d9e0
 80016d4:	40014400 	.word	0x40014400

080016d8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b092      	sub	sp, #72	; 0x48
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	615a      	str	r2, [r3, #20]
 80016f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	222c      	movs	r2, #44	; 0x2c
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00a faaf 	bl	800bc5c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <MX_TIM17_Init+0xe8>)
 8001700:	4a30      	ldr	r2, [pc, #192]	; (80017c4 <MX_TIM17_Init+0xec>)
 8001702:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8 - 1;
 8001704:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <MX_TIM17_Init+0xe8>)
 8001706:	2207      	movs	r2, #7
 8001708:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <MX_TIM17_Init+0xe8>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <MX_TIM17_Init+0xe8>)
 8001712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001716:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <MX_TIM17_Init+0xe8>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800171e:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <MX_TIM17_Init+0xe8>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <MX_TIM17_Init+0xe8>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800172a:	4825      	ldr	r0, [pc, #148]	; (80017c0 <MX_TIM17_Init+0xe8>)
 800172c:	f005 f9f2 	bl	8006b14 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001736:	f000 f965 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800173a:	4821      	ldr	r0, [pc, #132]	; (80017c0 <MX_TIM17_Init+0xe8>)
 800173c:	f005 fab2 	bl	8006ca4 <HAL_TIM_PWM_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001746:	f000 f95d 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174a:	2360      	movs	r3, #96	; 0x60
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001756:	2300      	movs	r3, #0
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176a:	2200      	movs	r2, #0
 800176c:	4619      	mov	r1, r3
 800176e:	4814      	ldr	r0, [pc, #80]	; (80017c0 <MX_TIM17_Init+0xe8>)
 8001770:	f005 fe38 	bl	80073e4 <HAL_TIM_PWM_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800177a:	f000 f943 	bl	8001a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001796:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	4807      	ldr	r0, [pc, #28]	; (80017c0 <MX_TIM17_Init+0xe8>)
 80017a2:	f006 fb75 	bl	8007e90 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 80017ac:	f000 f92a 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <MX_TIM17_Init+0xe8>)
 80017b2:	f000 ffa7 	bl	8002704 <HAL_TIM_MspPostInit>

}
 80017b6:	bf00      	nop
 80017b8:	3748      	adds	r7, #72	; 0x48
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20004664 	.word	0x20004664
 80017c4:	40014800 	.word	0x40014800

080017c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <MX_USART2_UART_Init+0x5c>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART2_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART2_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART2_UART_Init+0x58>)
 800180c:	f006 fbdc 	bl	8007fc8 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001816:	f000 f8f5 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000c928 	.word	0x2000c928
 8001824:	40004400 	.word	0x40004400

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <MX_GPIO_Init+0xa4>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a22      	ldr	r2, [pc, #136]	; (80018cc <MX_GPIO_Init+0xa4>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <MX_GPIO_Init+0xa4>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_GPIO_Init+0xa4>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <MX_GPIO_Init+0xa4>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_GPIO_Init+0xa4>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_GPIO_Init+0xa4>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a16      	ldr	r2, [pc, #88]	; (80018cc <MX_GPIO_Init+0xa4>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_GPIO_Init+0xa4>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_GPIO_Init+0xa4>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <MX_GPIO_Init+0xa4>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_GPIO_Init+0xa4>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2140      	movs	r1, #64	; 0x40
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <MX_GPIO_Init+0xa8>)
 80018a4:	f002 ff36 	bl	8004714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018a8:	2340      	movs	r3, #64	; 0x40
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018b4:	2301      	movs	r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_GPIO_Init+0xa8>)
 80018c0:	f002 fd7e 	bl	80043c0 <HAL_GPIO_Init>

}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000400 	.word	0x48000400

080018d4 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <StartMainMenuTask+0x58>)
 80018de:	f00a fa4b 	bl	800bd78 <puts>
    osDelay(1000);
 80018e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e6:	f007 fa27 	bl	8008d38 <osDelay>

    printf("Reading song\r\n");
 80018ea:	4811      	ldr	r0, [pc, #68]	; (8001930 <StartMainMenuTask+0x5c>)
 80018ec:	f00a fa44 	bl	800bd78 <puts>
    osDelay(1000);
 80018f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f4:	f007 fa20 	bl	8008d38 <osDelay>


    printf("%i\r\n", WS2812B_ARR);
 80018f8:	2164      	movs	r1, #100	; 0x64
 80018fa:	480e      	ldr	r0, [pc, #56]	; (8001934 <StartMainMenuTask+0x60>)
 80018fc:	f00a f9b6 	bl	800bc6c <iprintf>


    printf("%i\r\n", WS2812B_T0H_TICKS);
 8001900:	2120      	movs	r1, #32
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <StartMainMenuTask+0x60>)
 8001904:	f00a f9b2 	bl	800bc6c <iprintf>
    printf("%i\r\n", WS2812B_T0L_TICKS);
 8001908:	2144      	movs	r1, #68	; 0x44
 800190a:	480a      	ldr	r0, [pc, #40]	; (8001934 <StartMainMenuTask+0x60>)
 800190c:	f00a f9ae 	bl	800bc6c <iprintf>
    printf("%i\r\n", WS2812B_T1H_TICKS);
 8001910:	2140      	movs	r1, #64	; 0x40
 8001912:	4808      	ldr	r0, [pc, #32]	; (8001934 <StartMainMenuTask+0x60>)
 8001914:	f00a f9aa 	bl	800bc6c <iprintf>
    printf("%i\r\n", WS2812B_T1L_TICKS);
 8001918:	2124      	movs	r1, #36	; 0x24
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <StartMainMenuTask+0x60>)
 800191c:	f00a f9a6 	bl	800bc6c <iprintf>

    osDelay(1000);
 8001920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001924:	f007 fa08 	bl	8008d38 <osDelay>
  	printf("Main Menu\r\n");
 8001928:	e7d8      	b.n	80018dc <StartMainMenuTask+0x8>
 800192a:	bf00      	nop
 800192c:	0800cc68 	.word	0x0800cc68
 8001930:	0800cc74 	.word	0x0800cc74
 8001934:	0800cc84 	.word	0x0800cc84

08001938 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <StartPlayTickTask+0x4c>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <StartPlayTickTask+0x50>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	2200      	movs	r2, #0
 8001950:	f007 fa79 	bl	8008e46 <osEventFlagsWait>
 8001954:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	dbf1      	blt.n	8001940 <StartPlayTickTask+0x8>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0ec      	beq.n	8001940 <StartPlayTickTask+0x8>
		{
			while (running)
 8001966:	e008      	b.n	800197a <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <StartPlayTickTask+0x54>)
 800196a:	f00a fa05 	bl	800bd78 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <StartPlayTickTask+0x58>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <StartPlayTickTask+0x5c>)
 8001976:	f008 fb85 	bl	800a084 <vTaskDelayUntil>
			while (running)
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <StartPlayTickTask+0x60>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f2      	bne.n	8001968 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001982:	e7dd      	b.n	8001940 <StartPlayTickTask+0x8>
 8001984:	20003584 	.word	0x20003584
 8001988:	0800cea4 	.word	0x0800cea4
 800198c:	0800cc8c 	.word	0x0800cc8c
 8001990:	0800cea8 	.word	0x0800cea8
 8001994:	2000465c 	.word	0x2000465c
 8001998:	2000013c 	.word	0x2000013c

0800199c <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <StartPlayState+0x38>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <StartPlayState+0x3c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	2200      	movs	r2, #0
 80019b4:	f007 fa47 	bl	8008e46 <osEventFlagsWait>
 80019b8:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	dbf1      	blt.n	80019a4 <StartPlayState+0x8>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0ec      	beq.n	80019a4 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 80019ca:	4804      	ldr	r0, [pc, #16]	; (80019dc <StartPlayState+0x40>)
 80019cc:	f000 f83a 	bl	8001a44 <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 80019d0:	e7e8      	b.n	80019a4 <StartPlayState+0x8>
 80019d2:	bf00      	nop
 80019d4:	20003584 	.word	0x20003584
 80019d8:	0800ceac 	.word	0x0800ceac
 80019dc:	200047c8 	.word	0x200047c8

080019e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019f2:	f001 f96b 	bl	8002ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40001000 	.word	0x40001000

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <Error_Handler+0x8>

08001a0e <Piece_ucParseBeatValue>:
	pxPiece->xCapture.ulTick = osKernelGetTickCount();
}


uint8_t Piece_ucParseBeatValue(PieceHandle_t *pxPiece)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usBeat, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usBeat));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3305      	adds	r3, #5
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	440a      	add	r2, r1
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usBeat);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]

	return pxPiece->xPieceInstruction.usBeat;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	795b      	ldrb	r3, [r3, #5]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	uint8_t endCommand = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]

	while (!endCommand)
 8001a50:	e045      	b.n	8001ade <Piece_vParseCommand+0x9a>
	{
		memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3304      	adds	r3, #4
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	440a      	add	r2, r1
 8001a62:	7812      	ldrb	r2, [r2, #0]
 8001a64:	701a      	strb	r2, [r3, #0]
		pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	601a      	str	r2, [r3, #0]

		printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4827      	ldr	r0, [pc, #156]	; (8001b14 <Piece_vParseCommand+0xd0>)
 8001a78:	f00a f8f8 	bl	800bc6c <iprintf>
		printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	791b      	ldrb	r3, [r3, #4]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4825      	ldr	r0, [pc, #148]	; (8001b18 <Piece_vParseCommand+0xd4>)
 8001a84:	f00a f8f2 	bl	800bc6c <iprintf>

		switch (pxPiece->xPieceInstruction.usCommand)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <Piece_vParseCommand+0x52>
 8001a90:	2b7f      	cmp	r3, #127	; 0x7f
 8001a92:	d003      	beq.n	8001a9c <Piece_vParseCommand+0x58>
 8001a94:	e006      	b.n	8001aa4 <Piece_vParseCommand+0x60>
		{
		case 0b00000000:
			endCommand = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
			break;
 8001a9a:	e020      	b.n	8001ade <Piece_vParseCommand+0x9a>
		case 0b01111111:
			Piece_vConfigureAll(pxPiece);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f891 	bl	8001bc4 <Piece_vConfigureAll>
			break;
 8001aa2:	e01c      	b.n	8001ade <Piece_vParseCommand+0x9a>
		default:
			if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fb4b 	bl	8002144 <bIsPlayCommand>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <Piece_vParseCommand+0x92>
			{
				uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	791b      	ldrb	r3, [r3, #4]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	73bb      	strb	r3, [r7, #14]
				//uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
				uint8_t ucBeatValue = Piece_ucParseBeatValue(pxPiece);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffa5 	bl	8001a0e <Piece_ucParseBeatValue>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	737b      	strb	r3, [r7, #13]
				Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8001ac8:	7bba      	ldrb	r2, [r7, #14]
 8001aca:	7b7b      	ldrb	r3, [r7, #13]
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f9d8 	bl	8001e84 <Piece_vPlayNotes>
 8001ad4:	e002      	b.n	8001adc <Piece_vParseCommand+0x98>
			}
			else
			{
				printf("UNKNOWN COMMAND\r\n");
 8001ad6:	4811      	ldr	r0, [pc, #68]	; (8001b1c <Piece_vParseCommand+0xd8>)
 8001ad8:	f00a f94e 	bl	800bd78 <puts>
			}
			break;
 8001adc:	bf00      	nop
	while (!endCommand)
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0b6      	beq.n	8001a52 <Piece_vParseCommand+0xe>
		}
	}



	printf("END OF COMPOSITION\r\n");
 8001ae4:	480e      	ldr	r0, [pc, #56]	; (8001b20 <Piece_vParseCommand+0xdc>)
 8001ae6:	f00a f947 	bl	800bd78 <puts>
	HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8001aea:	2100      	movs	r1, #0
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <Piece_vParseCommand+0xe0>)
 8001aee:	f005 fa7d 	bl	8006fec <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 8001af2:	2100      	movs	r1, #0
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <Piece_vParseCommand+0xe4>)
 8001af6:	f005 fa79 	bl	8006fec <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8001afa:	2100      	movs	r1, #0
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <Piece_vParseCommand+0xe8>)
 8001afe:	f005 fa75 	bl	8006fec <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 8001b02:	2100      	movs	r1, #0
 8001b04:	480a      	ldr	r0, [pc, #40]	; (8001b30 <Piece_vParseCommand+0xec>)
 8001b06:	f005 fa71 	bl	8006fec <HAL_TIM_PWM_Stop_IT>
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	0800ccdc 	.word	0x0800ccdc
 8001b18:	0800ccf0 	.word	0x0800ccf0
 8001b1c:	0800cd00 	.word	0x0800cd00
 8001b20:	0800cd14 	.word	0x0800cd14
 8001b24:	2000c86c 	.word	0x2000c86c
 8001b28:	20004610 	.word	0x20004610
 8001b2c:	2000d9e0 	.word	0x2000d9e0
 8001b30:	20004664 	.word	0x20004664

08001b34 <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <Piece_vSetMovement+0x2c>)
 8001b52:	f00a f88b 	bl	800bc6c <iprintf>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	0800cd28 	.word	0x0800cd28

08001b64 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <Piece_vSetBPM+0x2c>)
 8001b82:	f00a f873 	bl	800bc6c <iprintf>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800cd38 	.word	0x0800cd38

08001b94 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <Piece_vSetDynamic+0x2c>)
 8001bb2:	f00a f85b 	bl	800bc6c <iprintf>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	0800cd44 	.word	0x0800cd44

08001bc4 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8001bcc:	481e      	ldr	r0, [pc, #120]	; (8001c48 <Piece_vConfigureAll+0x84>)
 8001bce:	f00a f8d3 	bl	800bd78 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	1c9a      	adds	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff84 	bl	8001b34 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 8001c2c:	89bb      	ldrh	r3, [r7, #12]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff97 	bl	8001b64 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 8001c36:	7afb      	ldrb	r3, [r7, #11]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffaa 	bl	8001b94 <Piece_vSetDynamic>
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	0800cd54 	.word	0x0800cd54

08001c4c <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	int count = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8001c5a:	e01e      	b.n	8001c9a <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c62:	3394      	adds	r3, #148	; 0x94
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c70:	3394      	adds	r3, #148	; 0x94
 8001c72:	601a      	str	r2, [r3, #0]
		count++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	3b32      	subs	r3, #50	; 0x32
 8001c7e:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 8001c80:	2232      	movs	r2, #50	; 0x32
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	4819      	ldr	r0, [pc, #100]	; (8001cec <Piece_vCaptureFragment+0xa0>)
 8001c86:	f009 fff1 	bl	800bc6c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c90:	3394      	adds	r3, #148	; 0x94
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f007 f86a 	bl	8008d6e <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b31      	cmp	r3, #49	; 0x31
 8001c9e:	dcdd      	bgt.n	8001c5c <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	dd1b      	ble.n	8001cde <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cac:	3394      	adds	r3, #148	; 0x94
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	441a      	add	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cba:	3394      	adds	r3, #148	; 0x94
 8001cbc:	601a      	str	r2, [r3, #0]

		count++;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	4808      	ldr	r0, [pc, #32]	; (8001cec <Piece_vCaptureFragment+0xa0>)
 8001cca:	f009 ffcf 	bl	800bc6c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cd4:	3394      	adds	r3, #148	; 0x94
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f007 f848 	bl	8008d6e <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	0800cd70 	.word	0x0800cd70

08001cf0 <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cfe:	3398      	adds	r3, #152	; 0x98
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d0a:	339b      	adds	r3, #155	; 0x9b
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d16:	339e      	adds	r3, #158	; 0x9e
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d22:	33a1      	adds	r3, #161	; 0xa1
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <Piece_vParseNoteGoal>:




void Piece_vParseNoteGoal(PieceHandle_t *pxPiece)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3306      	adds	r3, #6
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	440a      	add	r2, r1
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	1c9a      	adds	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	88db      	ldrh	r3, [r3, #6]
 8001d60:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	88db      	ldrh	r3, [r3, #6]
 8001d66:	0b9b      	lsrs	r3, r3, #14
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	88db      	ldrh	r3, [r3, #6]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d7a:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 8001d7c:	7bbb      	ldrb	r3, [r7, #14]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d856      	bhi.n	8001e30 <Piece_vParseNoteGoal+0xfc>
 8001d82:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <Piece_vParseNoteGoal+0x54>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001d99 	.word	0x08001d99
 8001d8c:	08001dbf 	.word	0x08001dbf
 8001d90:	08001de5 	.word	0x08001de5
 8001d94:	08001e0b 	.word	0x08001e0b
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d9e:	3398      	adds	r3, #152	; 0x98
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001daa:	3399      	adds	r3, #153	; 0x99
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001db6:	339a      	adds	r3, #154	; 0x9a
 8001db8:	7b7a      	ldrb	r2, [r7, #13]
 8001dba:	701a      	strb	r2, [r3, #0]
		break;
 8001dbc:	e039      	b.n	8001e32 <Piece_vParseNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001dc4:	339b      	adds	r3, #155	; 0x9b
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001dd0:	339c      	adds	r3, #156	; 0x9c
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ddc:	339d      	adds	r3, #157	; 0x9d
 8001dde:	7b7a      	ldrb	r2, [r7, #13]
 8001de0:	701a      	strb	r2, [r3, #0]
		break;
 8001de2:	e026      	b.n	8001e32 <Piece_vParseNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001dea:	339e      	adds	r3, #158	; 0x9e
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001df6:	339f      	adds	r3, #159	; 0x9f
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e02:	33a0      	adds	r3, #160	; 0xa0
 8001e04:	7b7a      	ldrb	r2, [r7, #13]
 8001e06:	701a      	strb	r2, [r3, #0]
		break;
 8001e08:	e013      	b.n	8001e32 <Piece_vParseNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e10:	33a1      	adds	r3, #161	; 0xa1
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e1c:	33a2      	adds	r3, #162	; 0xa2
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e28:	33a3      	adds	r3, #163	; 0xa3
 8001e2a:	7b7a      	ldrb	r2, [r7, #13]
 8001e2c:	701a      	strb	r2, [r3, #0]
		break;
 8001e2e:	e000      	b.n	8001e32 <Piece_vParseNoteGoal+0xfe>
	default:
		break;
 8001e30:	bf00      	nop
	}
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop

08001e40 <Piece_vParseGoal>:


void Piece_vParseGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d901      	bls.n	8001e56 <Piece_vParseGoal+0x16>
 8001e52:	2304      	movs	r3, #4
 8001e54:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	81fb      	strh	r3, [r7, #14]
 8001e5a:	e008      	b.n	8001e6e <Piece_vParseGoal+0x2e>
	{
		Piece_vParseNoteGoal(pxPiece);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff69 	bl	8001d34 <Piece_vParseNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 8001e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	81fb      	strh	r3, [r7, #14]
 8001e6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbf1      	blt.n	8001e5c <Piece_vParseGoal+0x1c>
	}
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
 8001e90:	4613      	mov	r3, r2
 8001e92:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 8001e94:	78bb      	ldrb	r3, [r7, #2]
 8001e96:	4619      	mov	r1, r3
 8001e98:	48a0      	ldr	r0, [pc, #640]	; (800211c <Piece_vPlayNotes+0x298>)
 8001e9a:	f009 fee7 	bl	800bc6c <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	489f      	ldr	r0, [pc, #636]	; (8002120 <Piece_vPlayNotes+0x29c>)
 8001ea4:	f009 fee2 	bl	800bc6c <iprintf>

	Piece_vResetGoal(pxPiece);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff21 	bl	8001cf0 <Piece_vResetGoal>
	Piece_vParseGoal(pxPiece, ucNumNotes);
 8001eae:	78bb      	ldrb	r3, [r7, #2]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffc4 	bl	8001e40 <Piece_vParseGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f98d 	bl	80021d8 <Piece_Debug_vPrintGoal>

	float fTupletScale;
	switch (ucBeatValue)
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d820      	bhi.n	8001f06 <Piece_vPlayNotes+0x82>
 8001ec4:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <Piece_vPlayNotes+0x48>)
 8001ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eca:	bf00      	nop
 8001ecc:	08001ee1 	.word	0x08001ee1
 8001ed0:	08001ee9 	.word	0x08001ee9
 8001ed4:	08001eef 	.word	0x08001eef
 8001ed8:	08001ef7 	.word	0x08001ef7
 8001edc:	08001eff 	.word	0x08001eff
	{
	case NOPELET:
		fTupletScale = NOPELET_SCALE;
 8001ee0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ee4:	617b      	str	r3, [r7, #20]
		break;
 8001ee6:	e012      	b.n	8001f0e <Piece_vPlayNotes+0x8a>
	case TRIPLET:
		fTupletScale = TRIPLET_SCALE;
 8001ee8:	4b8e      	ldr	r3, [pc, #568]	; (8002124 <Piece_vPlayNotes+0x2a0>)
 8001eea:	617b      	str	r3, [r7, #20]
		break;
 8001eec:	e00f      	b.n	8001f0e <Piece_vPlayNotes+0x8a>
	case QUINTUPLET:
		fTupletScale = QUINTUPLET_SCALE;
 8001eee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ef2:	617b      	str	r3, [r7, #20]
		break;
 8001ef4:	e00b      	b.n	8001f0e <Piece_vPlayNotes+0x8a>
	case SEXTUPLET:
		fTupletScale = SEXTUPLET_SCALE;
 8001ef6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001efa:	617b      	str	r3, [r7, #20]
		break;
 8001efc:	e007      	b.n	8001f0e <Piece_vPlayNotes+0x8a>
	case SEPTUPLET:
		fTupletScale = SEPTUPLET_SCALE;
 8001efe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f02:	617b      	str	r3, [r7, #20]
		break;
 8001f04:	e003      	b.n	8001f0e <Piece_vPlayNotes+0x8a>
	default:
		fTupletScale = NOPELET_SCALE;
 8001f06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f0a:	617b      	str	r3, [r7, #20]
		break;
 8001f0c:	bf00      	nop
	}

	uint32_t ulMSPerBeatValue;
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f1c:	eddf 6a82 	vldr	s13, [pc, #520]	; 8002128 <Piece_vPlayNotes+0x2a4>
 8001f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f24:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800212c <Piece_vPlayNotes+0x2a8>
 8001f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2c:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b0b      	cmp	r3, #11
 8001f34:	f200 80d6 	bhi.w	80020e4 <Piece_vPlayNotes+0x260>
 8001f38:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <Piece_vPlayNotes+0xbc>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08001f71 	.word	0x08001f71
 8001f44:	08001f91 	.word	0x08001f91
 8001f48:	08001fb1 	.word	0x08001fb1
 8001f4c:	08001fd1 	.word	0x08001fd1
 8001f50:	08001ff1 	.word	0x08001ff1
 8001f54:	0800200d 	.word	0x0800200d
 8001f58:	08002025 	.word	0x08002025
 8001f5c:	08002045 	.word	0x08002045
 8001f60:	08002065 	.word	0x08002065
 8001f64:	08002085 	.word	0x08002085
 8001f68:	080020a5 	.word	0x080020a5
 8001f6c:	080020c5 	.word	0x080020c5
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LARGE_SCALE*fTupletScale);
 8001f70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f74:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002130 <Piece_vPlayNotes+0x2ac>
 8001f78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f88:	ee17 3a90 	vmov	r3, s15
 8001f8c:	613b      	str	r3, [r7, #16]
		break;
 8001f8e:	e0b5      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case LONG:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LONG_SCALE*fTupletScale);
 8001f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f94:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001f98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa8:	ee17 3a90 	vmov	r3, s15
 8001fac:	613b      	str	r3, [r7, #16]
		break;
 8001fae:	e0a5      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case BREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*BREVE_SCALE*fTupletScale);
 8001fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fb4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001fb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc8:	ee17 3a90 	vmov	r3, s15
 8001fcc:	613b      	str	r3, [r7, #16]
		break;
 8001fce:	e095      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case SEMIBREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIBREVE_SCALE*fTupletScale);
 8001fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001fd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	613b      	str	r3, [r7, #16]
		break;
 8001fee:	e085      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case MINIM:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*MINIM_SCALE*fTupletScale);
 8001ff0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ff4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ff8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002004:	ee17 3a90 	vmov	r3, s15
 8002008:	613b      	str	r3, [r7, #16]
		break;
 800200a:	e077      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case CROTCHET:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 800200c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002010:	edd7 7a05 	vldr	s15, [r7, #20]
 8002014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800201c:	ee17 3a90 	vmov	r3, s15
 8002020:	613b      	str	r3, [r7, #16]
		break;
 8002022:	e06b      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case QUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*QUAVER_SCALE*fTupletScale);
 8002024:	edd7 7a03 	vldr	s15, [r7, #12]
 8002028:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800202c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002030:	edd7 7a05 	vldr	s15, [r7, #20]
 8002034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800203c:	ee17 3a90 	vmov	r3, s15
 8002040:	613b      	str	r3, [r7, #16]
		break;
 8002042:	e05b      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case SEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIQUAVER_SCALE*fTupletScale);
 8002044:	edd7 7a03 	vldr	s15, [r7, #12]
 8002048:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800204c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002050:	edd7 7a05 	vldr	s15, [r7, #20]
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800205c:	ee17 3a90 	vmov	r3, s15
 8002060:	613b      	str	r3, [r7, #16]
		break;
 8002062:	e04b      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case DEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIQUAVER_SCALE*fTupletScale);
 8002064:	edd7 7a03 	vldr	s15, [r7, #12]
 8002068:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800206c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002070:	edd7 7a05 	vldr	s15, [r7, #20]
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	613b      	str	r3, [r7, #16]
		break;
 8002082:	e03b      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case HEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*HEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002084:	edd7 7a03 	vldr	s15, [r7, #12]
 8002088:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002134 <Piece_vPlayNotes+0x2b0>
 800208c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002090:	edd7 7a05 	vldr	s15, [r7, #20]
 8002094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209c:	ee17 3a90 	vmov	r3, s15
 80020a0:	613b      	str	r3, [r7, #16]
		break;
 80020a2:	e02b      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case SEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80020a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002138 <Piece_vPlayNotes+0x2b4>
 80020ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020bc:	ee17 3a90 	vmov	r3, s15
 80020c0:	613b      	str	r3, [r7, #16]
		break;
 80020c2:	e01b      	b.n	80020fc <Piece_vPlayNotes+0x278>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80020c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020c8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800213c <Piece_vPlayNotes+0x2b8>
 80020cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020dc:	ee17 3a90 	vmov	r3, s15
 80020e0:	613b      	str	r3, [r7, #16]
		break;
 80020e2:	e00b      	b.n	80020fc <Piece_vPlayNotes+0x278>
	default:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 80020e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80020e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f4:	ee17 3a90 	vmov	r3, s15
 80020f8:	613b      	str	r3, [r7, #16]
		break;
 80020fa:	bf00      	nop
	}


	if (ucNumNotes == 0)
 80020fc:	78bb      	ldrb	r3, [r7, #2]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <Piece_vPlayNotes+0x284>
	{
		printf("REST\r\n");
 8002102:	480f      	ldr	r0, [pc, #60]	; (8002140 <Piece_vPlayNotes+0x2bc>)
 8002104:	f009 fe38 	bl	800bd78 <puts>
	}

	Piece_vCaptureFragment(pxPiece, ulMSPerBeatValue);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff fd9d 	bl	8001c4c <Piece_vCaptureFragment>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	0800cd88 	.word	0x0800cd88
 8002120:	0800cd9c 	.word	0x0800cd9c
 8002124:	3f2aaaab 	.word	0x3f2aaaab
 8002128:	42700000 	.word	0x42700000
 800212c:	447a0000 	.word	0x447a0000
 8002130:	42000000 	.word	0x42000000
 8002134:	3d800000 	.word	0x3d800000
 8002138:	3d000000 	.word	0x3d000000
 800213c:	3c800000 	.word	0x3c800000
 8002140:	0800cdb0 	.word	0x0800cdb0

08002144 <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	09db      	lsrs	r3, r3, #7
 8002156:	b2db      	uxtb	r3, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d816      	bhi.n	80021a8 <Piece_usGetPitchTick+0x44>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <Piece_usGetPitchTick+0x1c>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	08002191 	.word	0x08002191
 8002184:	08002197 	.word	0x08002197
 8002188:	0800219d 	.word	0x0800219d
 800218c:	080021a3 	.word	0x080021a3
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
		break;
 8002194:	e00b      	b.n	80021ae <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 8002196:	230a      	movs	r3, #10
 8002198:	73fb      	strb	r3, [r7, #15]
		break;
 800219a:	e008      	b.n	80021ae <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 800219c:	2314      	movs	r3, #20
 800219e:	73fb      	strb	r3, [r7, #15]
		break;
 80021a0:	e005      	b.n	80021ae <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 80021a2:	231e      	movs	r3, #30
 80021a4:	73fb      	strb	r3, [r7, #15]
		break;
 80021a6:	e002      	b.n	80021ae <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
		break;
 80021ac:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	4413      	add	r3, r2
 80021b4:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b47      	cmp	r3, #71	; 0x47
 80021ba:	bf28      	it	cs
 80021bc:	2347      	movcs	r3, #71	; 0x47
 80021be:	73fb      	strb	r3, [r7, #15]

	return pusPitchTickMap[ucPitchTickIndex];
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <Piece_usGetPitchTick+0x70>)
 80021c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	20000004 	.word	0x20000004

080021d8 <Piece_Debug_vPrintGoal>:
}



void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 80021e0:	4877      	ldr	r0, [pc, #476]	; (80023c0 <Piece_Debug_vPrintGoal+0x1e8>)
 80021e2:	f009 fdc9 	bl	800bd78 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021ec:	3398      	adds	r3, #152	; 0x98
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d02e      	beq.n	8002252 <Piece_Debug_vPrintGoal+0x7a>
	{
		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021fa:	339a      	adds	r3, #154	; 0x9a
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461c      	mov	r4, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002206:	339a      	adds	r3, #154	; 0x9a
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff ffa9 	bl	8002164 <Piece_usGetPitchTick>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4621      	mov	r1, r4
 8002218:	486a      	ldr	r0, [pc, #424]	; (80023c4 <Piece_Debug_vPrintGoal+0x1ec>)
 800221a:	f009 fd27 	bl	800bc6c <iprintf>

		G_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002224:	339a      	adds	r3, #154	; 0x9a
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff ff9a 	bl	8002164 <Piece_usGetPitchTick>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b64      	ldr	r3, [pc, #400]	; (80023c8 <Piece_Debug_vPrintGoal+0x1f0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c
		G_TIMER_HANDLE.Instance->CCR1 = G_TIMER_HANDLE.Instance->ARR/2;
 800223a:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <Piece_Debug_vPrintGoal+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002240:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <Piece_Debug_vPrintGoal+0x1f0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0852      	lsrs	r2, r2, #1
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8002248:	2100      	movs	r1, #0
 800224a:	485f      	ldr	r0, [pc, #380]	; (80023c8 <Piece_Debug_vPrintGoal+0x1f0>)
 800224c:	f004 fd82 	bl	8006d54 <HAL_TIM_PWM_Start_IT>
 8002250:	e003      	b.n	800225a <Piece_Debug_vPrintGoal+0x82>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8002252:	2100      	movs	r1, #0
 8002254:	485c      	ldr	r0, [pc, #368]	; (80023c8 <Piece_Debug_vPrintGoal+0x1f0>)
 8002256:	f004 fec9 	bl	8006fec <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xDString.bActive)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002260:	339b      	adds	r3, #155	; 0x9b
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02e      	beq.n	80022c6 <Piece_Debug_vPrintGoal+0xee>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800226e:	339d      	adds	r3, #157	; 0x9d
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461c      	mov	r4, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800227a:	339d      	adds	r3, #157	; 0x9d
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4619      	mov	r1, r3
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff ff6f 	bl	8002164 <Piece_usGetPitchTick>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	4621      	mov	r1, r4
 800228c:	484f      	ldr	r0, [pc, #316]	; (80023cc <Piece_Debug_vPrintGoal+0x1f4>)
 800228e:	f009 fced 	bl	800bc6c <iprintf>

		D_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002298:	339d      	adds	r3, #157	; 0x9d
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	2001      	movs	r0, #1
 80022a0:	f7ff ff60 	bl	8002164 <Piece_usGetPitchTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <Piece_Debug_vPrintGoal+0x1f8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c
		D_TIMER_HANDLE.Instance->CCR1 = D_TIMER_HANDLE.Instance->ARR/2;
 80022ae:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <Piece_Debug_vPrintGoal+0x1f8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	4b46      	ldr	r3, [pc, #280]	; (80023d0 <Piece_Debug_vPrintGoal+0x1f8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0852      	lsrs	r2, r2, #1
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80022bc:	2100      	movs	r1, #0
 80022be:	4844      	ldr	r0, [pc, #272]	; (80023d0 <Piece_Debug_vPrintGoal+0x1f8>)
 80022c0:	f004 fd48 	bl	8006d54 <HAL_TIM_PWM_Start_IT>
 80022c4:	e003      	b.n	80022ce <Piece_Debug_vPrintGoal+0xf6>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80022c6:	2100      	movs	r1, #0
 80022c8:	4841      	ldr	r0, [pc, #260]	; (80023d0 <Piece_Debug_vPrintGoal+0x1f8>)
 80022ca:	f004 fe8f 	bl	8006fec <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xAString.bActive)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022d4:	339e      	adds	r3, #158	; 0x9e
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d02e      	beq.n	800233a <Piece_Debug_vPrintGoal+0x162>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022e2:	33a0      	adds	r3, #160	; 0xa0
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461c      	mov	r4, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022ee:	33a0      	adds	r3, #160	; 0xa0
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	2002      	movs	r0, #2
 80022f6:	f7ff ff35 	bl	8002164 <Piece_usGetPitchTick>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	4621      	mov	r1, r4
 8002300:	4834      	ldr	r0, [pc, #208]	; (80023d4 <Piece_Debug_vPrintGoal+0x1fc>)
 8002302:	f009 fcb3 	bl	800bc6c <iprintf>

		A_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800230c:	33a0      	adds	r3, #160	; 0xa0
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	2002      	movs	r0, #2
 8002314:	f7ff ff26 	bl	8002164 <Piece_usGetPitchTick>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <Piece_Debug_vPrintGoal+0x200>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
		A_TIMER_HANDLE.Instance->CCR1 = A_TIMER_HANDLE.Instance->ARR/2;
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <Piece_Debug_vPrintGoal+0x200>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <Piece_Debug_vPrintGoal+0x200>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0852      	lsrs	r2, r2, #1
 800232e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8002330:	2100      	movs	r1, #0
 8002332:	4829      	ldr	r0, [pc, #164]	; (80023d8 <Piece_Debug_vPrintGoal+0x200>)
 8002334:	f004 fd0e 	bl	8006d54 <HAL_TIM_PWM_Start_IT>
 8002338:	e003      	b.n	8002342 <Piece_Debug_vPrintGoal+0x16a>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 800233a:	2100      	movs	r1, #0
 800233c:	4826      	ldr	r0, [pc, #152]	; (80023d8 <Piece_Debug_vPrintGoal+0x200>)
 800233e:	f004 fe55 	bl	8006fec <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xEString.bActive)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002348:	33a1      	adds	r3, #161	; 0xa1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d02e      	beq.n	80023ae <Piece_Debug_vPrintGoal+0x1d6>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002356:	33a3      	adds	r3, #163	; 0xa3
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461c      	mov	r4, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002362:	33a3      	adds	r3, #163	; 0xa3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	2003      	movs	r0, #3
 800236a:	f7ff fefb 	bl	8002164 <Piece_usGetPitchTick>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	4621      	mov	r1, r4
 8002374:	4819      	ldr	r0, [pc, #100]	; (80023dc <Piece_Debug_vPrintGoal+0x204>)
 8002376:	f009 fc79 	bl	800bc6c <iprintf>

		E_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002380:	33a3      	adds	r3, #163	; 0xa3
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	2003      	movs	r0, #3
 8002388:	f7ff feec 	bl	8002164 <Piece_usGetPitchTick>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <Piece_Debug_vPrintGoal+0x208>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
		E_TIMER_HANDLE.Instance->CCR1 = E_TIMER_HANDLE.Instance->ARR/2;
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <Piece_Debug_vPrintGoal+0x208>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239c:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <Piece_Debug_vPrintGoal+0x208>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0852      	lsrs	r2, r2, #1
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80023a4:	2100      	movs	r1, #0
 80023a6:	480e      	ldr	r0, [pc, #56]	; (80023e0 <Piece_Debug_vPrintGoal+0x208>)
 80023a8:	f004 fcd4 	bl	8006d54 <HAL_TIM_PWM_Start_IT>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
	}
}
 80023ac:	e003      	b.n	80023b6 <Piece_Debug_vPrintGoal+0x1de>
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80023ae:	2100      	movs	r1, #0
 80023b0:	480b      	ldr	r0, [pc, #44]	; (80023e0 <Piece_Debug_vPrintGoal+0x208>)
 80023b2:	f004 fe1b 	bl	8006fec <HAL_TIM_PWM_Stop_IT>
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	bf00      	nop
 80023c0:	0800cdc8 	.word	0x0800cdc8
 80023c4:	0800cdd0 	.word	0x0800cdd0
 80023c8:	2000c86c 	.word	0x2000c86c
 80023cc:	0800cde0 	.word	0x0800cde0
 80023d0:	20004610 	.word	0x20004610
 80023d4:	0800cdf0 	.word	0x0800cdf0
 80023d8:	2000d9e0 	.word	0x2000d9e0
 80023dc:	0800ce00 	.word	0x0800ce00
 80023e0:	20004664 	.word	0x20004664

080023e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_MspInit+0x4c>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	4a10      	ldr	r2, [pc, #64]	; (8002430 <HAL_MspInit+0x4c>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6613      	str	r3, [r2, #96]	; 0x60
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_MspInit+0x4c>)
 80023f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_MspInit+0x4c>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_MspInit+0x4c>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6593      	str	r3, [r2, #88]	; 0x58
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_MspInit+0x4c>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	210f      	movs	r1, #15
 800241e:	f06f 0001 	mvn.w	r0, #1
 8002422:	f001 ffa3 	bl	800436c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <HAL_ADC_MspInit+0x84>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d12b      	bne.n	80024ae <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_ADC_MspInit+0x88>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_ADC_MspInit+0x88>)
 800245c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_ADC_MspInit+0x88>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_ADC_MspInit+0x88>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_ADC_MspInit+0x88>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_ADC_MspInit+0x88>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002486:	230f      	movs	r3, #15
 8002488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800248a:	230b      	movs	r3, #11
 800248c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	4809      	ldr	r0, [pc, #36]	; (80024c0 <HAL_ADC_MspInit+0x8c>)
 800249a:	f001 ff91 	bl	80043c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	2012      	movs	r0, #18
 80024a4:	f001 ff62 	bl	800436c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80024a8:	2012      	movs	r0, #18
 80024aa:	f001 ff7b 	bl	80043a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	50040000 	.word	0x50040000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	48000800 	.word	0x48000800

080024c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_I2C_MspInit+0x7c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d128      	bne.n	8002538 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_I2C_MspInit+0x80>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_I2C_MspInit+0x80>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_I2C_MspInit+0x80>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80024fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002504:	2312      	movs	r3, #18
 8002506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002508:	2301      	movs	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002510:	2304      	movs	r3, #4
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	480b      	ldr	r0, [pc, #44]	; (8002548 <HAL_I2C_MspInit+0x84>)
 800251c:	f001 ff50 	bl	80043c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_I2C_MspInit+0x80>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_I2C_MspInit+0x80>)
 8002526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800252a:	6593      	str	r3, [r2, #88]	; 0x58
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_I2C_MspInit+0x80>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002538:	bf00      	nop
 800253a:	3728      	adds	r7, #40	; 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40005400 	.word	0x40005400
 8002544:	40021000 	.word	0x40021000
 8002548:	48000400 	.word	0x48000400

0800254c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a25      	ldr	r2, [pc, #148]	; (8002600 <HAL_SPI_MspInit+0xb4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d144      	bne.n	80025f8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_SPI_MspInit+0xb8>)
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	4a24      	ldr	r2, [pc, #144]	; (8002604 <HAL_SPI_MspInit+0xb8>)
 8002574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002578:	6613      	str	r3, [r2, #96]	; 0x60
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_SPI_MspInit+0xb8>)
 800257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_SPI_MspInit+0xb8>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_SPI_MspInit+0xb8>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_SPI_MspInit+0xb8>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_SPI_MspInit+0xb8>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_SPI_MspInit+0xb8>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_SPI_MspInit+0xb8>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025b6:	2320      	movs	r3, #32
 80025b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025c6:	2305      	movs	r3, #5
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d4:	f001 fef4 	bl	80043c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025d8:	2330      	movs	r3, #48	; 0x30
 80025da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025e8:	2305      	movs	r3, #5
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_SPI_MspInit+0xbc>)
 80025f4:	f001 fee4 	bl	80043c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40013000 	.word	0x40013000
 8002604:	40021000 	.word	0x40021000
 8002608:	48000400 	.word	0x48000400

0800260c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1c      	ldr	r2, [pc, #112]	; (800268c <HAL_TIM_PWM_MspInit+0x80>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10c      	bne.n	8002638 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_TIM_PWM_MspInit+0x84>)
 8002620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002622:	4a1b      	ldr	r2, [pc, #108]	; (8002690 <HAL_TIM_PWM_MspInit+0x84>)
 8002624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002628:	6613      	str	r3, [r2, #96]	; 0x60
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_TIM_PWM_MspInit+0x84>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002636:	e022      	b.n	800267e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a15      	ldr	r2, [pc, #84]	; (8002694 <HAL_TIM_PWM_MspInit+0x88>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10c      	bne.n	800265c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_TIM_PWM_MspInit+0x84>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <HAL_TIM_PWM_MspInit+0x84>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6593      	str	r3, [r2, #88]	; 0x58
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_TIM_PWM_MspInit+0x84>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
}
 800265a:	e010      	b.n	800267e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <HAL_TIM_PWM_MspInit+0x8c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10b      	bne.n	800267e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_TIM_PWM_MspInit+0x84>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_TIM_PWM_MspInit+0x84>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6613      	str	r3, [r2, #96]	; 0x60
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_TIM_PWM_MspInit+0x84>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
}
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40000400 	.word	0x40000400
 8002698:	40014000 	.word	0x40014000

0800269c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <HAL_TIM_Base_MspInit+0x5c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10c      	bne.n	80026c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_TIM_Base_MspInit+0x60>)
 80026b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_TIM_Base_MspInit+0x60>)
 80026b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b8:	6613      	str	r3, [r2, #96]	; 0x60
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_TIM_Base_MspInit+0x60>)
 80026bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80026c6:	e010      	b.n	80026ea <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_TIM_Base_MspInit+0x64>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10b      	bne.n	80026ea <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_TIM_Base_MspInit+0x60>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_TIM_Base_MspInit+0x60>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6613      	str	r3, [r2, #96]	; 0x60
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_TIM_Base_MspInit+0x60>)
 80026e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40014400 	.word	0x40014400
 80026fc:	40021000 	.word	0x40021000
 8002700:	40014800 	.word	0x40014800

08002704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08e      	sub	sp, #56	; 0x38
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <HAL_TIM_MspPostInit+0x1b4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d11e      	bne.n	8002764 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	4a64      	ldr	r2, [pc, #400]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002732:	4b62      	ldr	r3, [pc, #392]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800273e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002750:	2301      	movs	r3, #1
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275e:	f001 fe2f 	bl	80043c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002762:	e0a5      	b.n	80028b0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a55      	ldr	r2, [pc, #340]	; (80028c0 <HAL_TIM_MspPostInit+0x1bc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d138      	bne.n	80027e0 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276e:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277a:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	4b4d      	ldr	r3, [pc, #308]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	4a4c      	ldr	r2, [pc, #304]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002792:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800279e:	2303      	movs	r3, #3
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ae:	2302      	movs	r3, #2
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b6:	4619      	mov	r1, r3
 80027b8:	4842      	ldr	r0, [pc, #264]	; (80028c4 <HAL_TIM_MspPostInit+0x1c0>)
 80027ba:	f001 fe01 	bl	80043c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027be:	23c0      	movs	r3, #192	; 0xc0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ce:	2302      	movs	r3, #2
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d6:	4619      	mov	r1, r3
 80027d8:	483b      	ldr	r0, [pc, #236]	; (80028c8 <HAL_TIM_MspPostInit+0x1c4>)
 80027da:	f001 fdf1 	bl	80043c0 <HAL_GPIO_Init>
}
 80027de:	e067      	b.n	80028b0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a39      	ldr	r2, [pc, #228]	; (80028cc <HAL_TIM_MspPostInit+0x1c8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d11d      	bne.n	8002826 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	4a33      	ldr	r2, [pc, #204]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002814:	230e      	movs	r3, #14
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281c:	4619      	mov	r1, r3
 800281e:	4829      	ldr	r0, [pc, #164]	; (80028c4 <HAL_TIM_MspPostInit+0x1c0>)
 8002820:	f001 fdce 	bl	80043c0 <HAL_GPIO_Init>
}
 8002824:	e044      	b.n	80028b0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <HAL_TIM_MspPostInit+0x1cc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d11d      	bne.n	800286c <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	4a21      	ldr	r2, [pc, #132]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 800283e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002848:	2340      	movs	r3, #64	; 0x40
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002858:	230e      	movs	r3, #14
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002866:	f001 fdab 	bl	80043c0 <HAL_GPIO_Init>
}
 800286a:	e021      	b.n	80028b0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <HAL_TIM_MspPostInit+0x1d0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d11c      	bne.n	80028b0 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_TIM_MspPostInit+0x1b8>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 800289e:	230e      	movs	r3, #14
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ac:	f001 fd88 	bl	80043c0 <HAL_GPIO_Init>
}
 80028b0:	bf00      	nop
 80028b2:	3738      	adds	r7, #56	; 0x38
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40000400 	.word	0x40000400
 80028c4:	48000400 	.word	0x48000400
 80028c8:	48000800 	.word	0x48000800
 80028cc:	40014000 	.word	0x40014000
 80028d0:	40014400 	.word	0x40014400
 80028d4:	40014800 	.word	0x40014800

080028d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a17      	ldr	r2, [pc, #92]	; (8002954 <HAL_UART_MspInit+0x7c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d128      	bne.n	800294c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_UART_MspInit+0x80>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_UART_MspInit+0x80>)
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	6593      	str	r3, [r2, #88]	; 0x58
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_UART_MspInit+0x80>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_UART_MspInit+0x80>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_UART_MspInit+0x80>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_UART_MspInit+0x80>)
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800292a:	230c      	movs	r3, #12
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800293a:	2307      	movs	r3, #7
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002948:	f001 fd3a 	bl	80043c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800294c:	bf00      	nop
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40004400 	.word	0x40004400
 8002958:	40021000 	.word	0x40021000

0800295c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	2036      	movs	r0, #54	; 0x36
 8002972:	f001 fcfb 	bl	800436c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002976:	2036      	movs	r0, #54	; 0x36
 8002978:	f001 fd14 	bl	80043a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <HAL_InitTick+0x9c>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_InitTick+0x9c>)
 8002982:	f043 0310 	orr.w	r3, r3, #16
 8002986:	6593      	str	r3, [r2, #88]	; 0x58
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_InitTick+0x9c>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002994:	f107 0210 	add.w	r2, r7, #16
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fde6 	bl	8005570 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029a4:	f002 fdb8 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 80029a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	4a13      	ldr	r2, [pc, #76]	; (80029fc <HAL_InitTick+0xa0>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0c9b      	lsrs	r3, r3, #18
 80029b4:	3b01      	subs	r3, #1
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_InitTick+0xa4>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <HAL_InitTick+0xa8>)
 80029bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_InitTick+0xa4>)
 80029c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <HAL_InitTick+0xa4>)
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_InitTick+0xa4>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_InitTick+0xa4>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <HAL_InitTick+0xa4>)
 80029da:	f004 f89b 	bl	8006b14 <HAL_TIM_Base_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d104      	bne.n	80029ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80029e4:	4806      	ldr	r0, [pc, #24]	; (8002a00 <HAL_InitTick+0xa4>)
 80029e6:	f004 f8ed 	bl	8006bc4 <HAL_TIM_Base_Start_IT>
 80029ea:	4603      	mov	r3, r0
 80029ec:	e000      	b.n	80029f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3730      	adds	r7, #48	; 0x30
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	431bde83 	.word	0x431bde83
 8002a00:	2000da2c 	.word	0x2000da2c
 8002a04:	40001000 	.word	0x40001000

08002a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <NMI_Handler+0x4>

08002a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a12:	e7fe      	b.n	8002a12 <HardFault_Handler+0x4>

08002a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <MemManage_Handler+0x4>

08002a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <BusFault_Handler+0x4>

08002a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <UsageFault_Handler+0x4>

08002a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <ADC1_2_IRQHandler+0x10>)
 8002a3a:	f000 fcaf 	bl	800339c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200046fc 	.word	0x200046fc

08002a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <TIM6_DAC_IRQHandler+0x38>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <TIM6_DAC_IRQHandler+0x38>)
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <TIM6_DAC_IRQHandler+0x38>)
 8002a5e:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <TIM6_DAC_IRQHandler+0x3c>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <TIM6_DAC_IRQHandler+0x3c>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <TIM6_DAC_IRQHandler+0x3c>)
 8002a72:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a74:	4804      	ldr	r0, [pc, #16]	; (8002a88 <TIM6_DAC_IRQHandler+0x40>)
 8002a76:	f004 fb95 	bl	80071a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000357a 	.word	0x2000357a
 8002a84:	20003578 	.word	0x20003578
 8002a88:	2000da2c 	.word	0x2000da2c

08002a8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e00a      	b.n	8002ab4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a9e:	f3af 8000 	nop.w
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	60ba      	str	r2, [r7, #8]
 8002aaa:	b2ca      	uxtb	r2, r1
 8002aac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dbf0      	blt.n	8002a9e <_read+0x12>
	}

return len;
 8002abc:	687b      	ldr	r3, [r7, #4]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e009      	b.n	8002aec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	60ba      	str	r2, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fa0b 	bl	8000efc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbf1      	blt.n	8002ad8 <_write+0x12>
	}
	return len;
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_close>:

int _close(int file)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	return -1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b26:	605a      	str	r2, [r3, #4]
	return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_isatty>:

int _isatty(int file)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
	return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <_sbrk+0x5c>)
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <_sbrk+0x60>)
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <_sbrk+0x64>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <_sbrk+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d207      	bcs.n	8002ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b98:	f009 f828 	bl	800bbec <__errno>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ba6:	e009      	b.n	8002bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <_sbrk+0x64>)
 8002bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20018000 	.word	0x20018000
 8002bc8:	00000400 	.word	0x00000400
 8002bcc:	20000140 	.word	0x20000140
 8002bd0:	2000fb40 	.word	0x2000fb40

08002bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bd8:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <SystemInit+0x5c>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <SystemInit+0x5c>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <SystemInit+0x60>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <SystemInit+0x60>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <SystemInit+0x60>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <SystemInit+0x60>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <SystemInit+0x60>)
 8002c00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002c04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002c08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <SystemInit+0x60>)
 8002c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <SystemInit+0x60>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <SystemInit+0x60>)
 8002c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <SystemInit+0x60>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000ed00 	.word	0xe000ed00
 8002c34:	40021000 	.word	0x40021000

08002c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c3c:	f7ff ffca 	bl	8002bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c42:	e003      	b.n	8002c4c <LoopCopyDataInit>

08002c44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c4a:	3104      	adds	r1, #4

08002c4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c4c:	480a      	ldr	r0, [pc, #40]	; (8002c78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c54:	d3f6      	bcc.n	8002c44 <CopyDataInit>
	ldr	r2, =_sbss
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c58:	e002      	b.n	8002c60 <LoopFillZerobss>

08002c5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c5c:	f842 3b04 	str.w	r3, [r2], #4

08002c60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <LoopForever+0x16>)
	cmp	r2, r3
 8002c62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c64:	d3f9      	bcc.n	8002c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c66:	f008 ffc7 	bl	800bbf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c6a:	f7fe f959 	bl	8000f20 <main>

08002c6e <LoopForever>:

LoopForever:
    b LoopForever
 8002c6e:	e7fe      	b.n	8002c6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c70:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002c74:	0800cfa0 	.word	0x0800cfa0
	ldr	r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c7c:	2000011c 	.word	0x2000011c
	ldr	r2, =_sbss
 8002c80:	2000011c 	.word	0x2000011c
	ldr	r3, = _ebss
 8002c84:	2000fb40 	.word	0x2000fb40

08002c88 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c88:	e7fe      	b.n	8002c88 <ADC3_IRQHandler>
	...

08002c8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_Init+0x3c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <HAL_Init+0x3c>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	f001 fb57 	bl	8004356 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7ff fe57 	bl	800295c <HAL_InitTick>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	e001      	b.n	8002cbe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cba:	f7ff fb93 	bl	80023e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40022000 	.word	0x40022000

08002ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x20>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_IncTick+0x24>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <HAL_IncTick+0x24>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	2000009c 	.word	0x2000009c
 8002cf0:	2000da78 	.word	0x2000da78

08002cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_GetTick+0x14>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	2000da78 	.word	0x2000da78

08002d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff ffee 	bl	8002cf4 <HAL_GetTick>
 8002d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d24:	d005      	beq.n	8002d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_Delay+0x44>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4413      	add	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d32:	bf00      	nop
 8002d34:	f7ff ffde 	bl	8002cf4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d8f7      	bhi.n	8002d34 <HAL_Delay+0x28>
  {
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2000009c 	.word	0x2000009c

08002d54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3360      	adds	r3, #96	; 0x60
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <LL_ADC_SetOffset+0x44>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	03fff000 	.word	0x03fff000

08002e04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3360      	adds	r3, #96	; 0x60
 8002e12:	461a      	mov	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3360      	adds	r3, #96	; 0x60
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3330      	adds	r3, #48	; 0x30
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	4413      	add	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	211f      	movs	r1, #31
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	f003 011f 	and.w	r1, r3, #31
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b087      	sub	sp, #28
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3314      	adds	r3, #20
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	0e5b      	lsrs	r3, r3, #25
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	4413      	add	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0d1b      	lsrs	r3, r3, #20
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2107      	movs	r1, #7
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	401a      	ands	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	0d1b      	lsrs	r3, r3, #20
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0318 	and.w	r3, r3, #24
 8002f82:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f84:	40d9      	lsrs	r1, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	400b      	ands	r3, r1
 8002f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	0007ffff 	.word	0x0007ffff

08002fa8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6093      	str	r3, [r2, #8]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003018:	d101      	bne.n	800301e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800303c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003040:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003068:	d101      	bne.n	800306e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <LL_ADC_IsEnabled+0x18>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <LL_ADC_IsEnabled+0x1a>
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d101      	bne.n	80030ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d101      	bne.n	80030e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e136      	b.n	8003378 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff f98b 	bl	8002434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff67 	bl	8003004 <LL_ADC_IsDeepPowerDownEnabled>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff4d 	bl	8002fe0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff82 	bl	8003054 <LL_ADC_IsInternalRegulatorEnabled>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d115      	bne.n	8003182 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff66 	bl	800302c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003160:	4b87      	ldr	r3, [pc, #540]	; (8003380 <HAL_ADC_Init+0x290>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	4a87      	ldr	r2, [pc, #540]	; (8003384 <HAL_ADC_Init+0x294>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003174:	e002      	b.n	800317c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3b01      	subs	r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f9      	bne.n	8003176 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff64 	bl	8003054 <LL_ADC_IsInternalRegulatorEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f043 0210 	orr.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	f043 0201 	orr.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff75 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 80031b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f040 80cf 	bne.w	8003366 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 80cb 	bne.w	8003366 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031d8:	f043 0202 	orr.w	r2, r3, #2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff49 	bl	800307c <LL_ADC_IsEnabled>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d115      	bne.n	800321c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f0:	4865      	ldr	r0, [pc, #404]	; (8003388 <HAL_ADC_Init+0x298>)
 80031f2:	f7ff ff43 	bl	800307c <LL_ADC_IsEnabled>
 80031f6:	4604      	mov	r4, r0
 80031f8:	4864      	ldr	r0, [pc, #400]	; (800338c <HAL_ADC_Init+0x29c>)
 80031fa:	f7ff ff3f 	bl	800307c <LL_ADC_IsEnabled>
 80031fe:	4603      	mov	r3, r0
 8003200:	431c      	orrs	r4, r3
 8003202:	4863      	ldr	r0, [pc, #396]	; (8003390 <HAL_ADC_Init+0x2a0>)
 8003204:	f7ff ff3a 	bl	800307c <LL_ADC_IsEnabled>
 8003208:	4603      	mov	r3, r0
 800320a:	4323      	orrs	r3, r4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4619      	mov	r1, r3
 8003216:	485f      	ldr	r0, [pc, #380]	; (8003394 <HAL_ADC_Init+0x2a4>)
 8003218:	f7ff fd9c 	bl	8002d54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7e5b      	ldrb	r3, [r3, #25]
 8003220:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003226:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800322c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003232:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800323a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d106      	bne.n	8003258 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	3b01      	subs	r3, #1
 8003250:	045b      	lsls	r3, r3, #17
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_ADC_Init+0x2a8>)
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	69b9      	ldr	r1, [r7, #24]
 8003284:	430b      	orrs	r3, r1
 8003286:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff08 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 8003292:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff15 	bl	80030c8 <LL_ADC_INJ_IsConversionOngoing>
 800329e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d13d      	bne.n	8003322 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d13a      	bne.n	8003322 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032b0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032b8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c8:	f023 0302 	bic.w	r3, r3, #2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	69b9      	ldr	r1, [r7, #24]
 80032d2:	430b      	orrs	r3, r1
 80032d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d118      	bne.n	8003312 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80032ea:	f023 0304 	bic.w	r3, r3, #4
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032f6:	4311      	orrs	r1, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003302:	430a      	orrs	r2, r1
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	611a      	str	r2, [r3, #16]
 8003310:	e007      	b.n	8003322 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10c      	bne.n	8003344 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f023 010f 	bic.w	r1, r3, #15
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	1e5a      	subs	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
 8003342:	e007      	b.n	8003354 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 020f 	bic.w	r2, r2, #15
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
 8003364:	e007      	b.n	8003376 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f043 0210 	orr.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003376:	7ffb      	ldrb	r3, [r7, #31]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3724      	adds	r7, #36	; 0x24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	20000094 	.word	0x20000094
 8003384:	053e2d63 	.word	0x053e2d63
 8003388:	50040000 	.word	0x50040000
 800338c:	50040100 	.word	0x50040100
 8003390:	50040200 	.word	0x50040200
 8003394:	50040300 	.word	0x50040300
 8003398:	fff0c007 	.word	0xfff0c007

0800339c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033b8:	4882      	ldr	r0, [pc, #520]	; (80035c4 <HAL_ADC_IRQHandler+0x228>)
 80033ba:	f7ff fdf5 	bl	8002fa8 <LL_ADC_GetMultimode>
 80033be:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d017      	beq.n	80033fa <HAL_ADC_IRQHandler+0x5e>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fe4b 	bl	8004088 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2202      	movs	r2, #2
 80033f8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_ADC_IRQHandler+0x72>
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8083 	beq.w	8003520 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d07d      	beq.n	8003520 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d105      	bne.n	800343c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fd10 	bl	8002e66 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d062      	beq.n	8003512 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5d      	ldr	r2, [pc, #372]	; (80035c8 <HAL_ADC_IRQHandler+0x22c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d002      	beq.n	800345c <HAL_ADC_IRQHandler+0xc0>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	e000      	b.n	800345e <HAL_ADC_IRQHandler+0xc2>
 800345c:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <HAL_ADC_IRQHandler+0x230>)
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	4293      	cmp	r3, r2
 8003464:	d008      	beq.n	8003478 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b05      	cmp	r3, #5
 8003470:	d002      	beq.n	8003478 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b09      	cmp	r3, #9
 8003476:	d104      	bne.n	8003482 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	623b      	str	r3, [r7, #32]
 8003480:	e00c      	b.n	800349c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a50      	ldr	r2, [pc, #320]	; (80035c8 <HAL_ADC_IRQHandler+0x22c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d002      	beq.n	8003492 <HAL_ADC_IRQHandler+0xf6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	e000      	b.n	8003494 <HAL_ADC_IRQHandler+0xf8>
 8003492:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <HAL_ADC_IRQHandler+0x230>)
 8003494:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d135      	bne.n	8003512 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d12e      	bne.n	8003512 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fdf2 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11a      	bne.n	80034fa <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020c 	bic.w	r2, r2, #12
 80034d2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d112      	bne.n	8003512 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
 80034f8:	e00b      	b.n	8003512 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f043 0210 	orr.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f95c 	bl	80037d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	220c      	movs	r2, #12
 800351e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <HAL_ADC_IRQHandler+0x198>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 809f 	beq.w	800367e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8099 	beq.w	800367e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fcbb 	bl	8002ee4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800356e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fc76 	bl	8002e66 <LL_ADC_REG_IsTriggerSourceSWStart>
 800357a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a11      	ldr	r2, [pc, #68]	; (80035c8 <HAL_ADC_IRQHandler+0x22c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d002      	beq.n	800358c <HAL_ADC_IRQHandler+0x1f0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e000      	b.n	800358e <HAL_ADC_IRQHandler+0x1f2>
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <HAL_ADC_IRQHandler+0x230>)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	4293      	cmp	r3, r2
 8003594:	d008      	beq.n	80035a8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d002      	beq.n	80035a8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	d104      	bne.n	80035b2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	e013      	b.n	80035da <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <HAL_ADC_IRQHandler+0x22c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d009      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x234>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	e007      	b.n	80035d2 <HAL_ADC_IRQHandler+0x236>
 80035c2:	bf00      	nop
 80035c4:	50040300 	.word	0x50040300
 80035c8:	50040100 	.word	0x50040100
 80035cc:	50040000 	.word	0x50040000
 80035d0:	4b7d      	ldr	r3, [pc, #500]	; (80037c8 <HAL_ADC_IRQHandler+0x42c>)
 80035d2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d047      	beq.n	8003670 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_ADC_IRQHandler+0x25e>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d03f      	beq.n	8003670 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d13a      	bne.n	8003670 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d133      	bne.n	8003670 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d12e      	bne.n	8003670 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fd56 	bl	80030c8 <LL_ADC_INJ_IsConversionOngoing>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11a      	bne.n	8003658 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003630:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d112      	bne.n	8003670 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
 8003656:	e00b      	b.n	8003670 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	f043 0210 	orr.w	r2, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fce1 	bl	8004038 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2260      	movs	r2, #96	; 0x60
 800367c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d011      	beq.n	80036ac <HAL_ADC_IRQHandler+0x310>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00c      	beq.n	80036ac <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8a0 	bl	80037e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <HAL_ADC_IRQHandler+0x340>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fcc7 	bl	8004060 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d012      	beq.n	800370c <HAL_ADC_IRQHandler+0x370>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fcb9 	bl	8004074 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800370a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_ADC_IRQHandler+0x3e8>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d031      	beq.n	8003784 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003728:	2301      	movs	r3, #1
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
 800372c:	e014      	b.n	8003758 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003734:	4825      	ldr	r0, [pc, #148]	; (80037cc <HAL_ADC_IRQHandler+0x430>)
 8003736:	f7ff fc45 	bl	8002fc4 <LL_ADC_GetMultiDMATransfer>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003740:	2301      	movs	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	e008      	b.n	8003758 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003754:	2301      	movs	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10e      	bne.n	800377c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003762:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	f043 0202 	orr.w	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f83e 	bl	80037f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2210      	movs	r2, #16
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <HAL_ADC_IRQHandler+0x424>
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	f043 0208 	orr.w	r2, r3, #8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037b8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fc46 	bl	800404c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80037c0:	bf00      	nop
 80037c2:	3728      	adds	r7, #40	; 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	50040000 	.word	0x50040000
 80037cc:	50040300 	.word	0x50040300

080037d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b0b6      	sub	sp, #216	; 0xd8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_ADC_ConfigChannel+0x22>
 800382a:	2302      	movs	r3, #2
 800382c:	e3c7      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x7b2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fc31 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 83a8 	bne.w	8003f98 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b05      	cmp	r3, #5
 800384e:	d824      	bhi.n	800389a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	3b02      	subs	r3, #2
 8003856:	2b03      	cmp	r3, #3
 8003858:	d81b      	bhi.n	8003892 <HAL_ADC_ConfigChannel+0x86>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <HAL_ADC_ConfigChannel+0x54>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003871 	.word	0x08003871
 8003864:	08003879 	.word	0x08003879
 8003868:	08003881 	.word	0x08003881
 800386c:	08003889 	.word	0x08003889
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	220c      	movs	r2, #12
 8003874:	605a      	str	r2, [r3, #4]
          break;
 8003876:	e011      	b.n	800389c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2212      	movs	r2, #18
 800387c:	605a      	str	r2, [r3, #4]
          break;
 800387e:	e00d      	b.n	800389c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2218      	movs	r2, #24
 8003884:	605a      	str	r2, [r3, #4]
          break;
 8003886:	e009      	b.n	800389c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800388e:	605a      	str	r2, [r3, #4]
          break;
 8003890:	e004      	b.n	800389c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2206      	movs	r2, #6
 8003896:	605a      	str	r2, [r3, #4]
          break;
 8003898:	e000      	b.n	800389c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800389a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f7ff faef 	bl	8002e8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fbf5 	bl	80030a2 <LL_ADC_REG_IsConversionOngoing>
 80038b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fc01 	bl	80030c8 <LL_ADC_INJ_IsConversionOngoing>
 80038c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 81a6 	bne.w	8003c20 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f040 81a1 	bne.w	8003c20 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f7ff fb0d 	bl	8002f0a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	08db      	lsrs	r3, r3, #3
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d00a      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6919      	ldr	r1, [r3, #16]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003922:	f7ff fa4b 	bl	8002dbc <LL_ADC_SetOffset>
 8003926:	e17b      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fa68 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003934:	4603      	mov	r3, r0
 8003936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x148>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fa5d 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 800394a:	4603      	mov	r3, r0
 800394c:	0e9b      	lsrs	r3, r3, #26
 800394e:	f003 021f 	and.w	r2, r3, #31
 8003952:	e01e      	b.n	8003992 <HAL_ADC_ConfigChannel+0x186>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fa52 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003960:	4603      	mov	r3, r0
 8003962:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800397a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003982:	2320      	movs	r3, #32
 8003984:	e004      	b.n	8003990 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399a:	2b00      	cmp	r3, #0
 800399c:	d105      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x19e>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	0e9b      	lsrs	r3, r3, #26
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	e018      	b.n	80039dc <HAL_ADC_ConfigChannel+0x1d0>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80039be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80039c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e004      	b.n	80039dc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80039d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039dc:	429a      	cmp	r2, r3
 80039de:	d106      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fa21 	bl	8002e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fa05 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x20e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff f9fa 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	0e9b      	lsrs	r3, r3, #26
 8003a14:	f003 021f 	and.w	r2, r3, #31
 8003a18:	e01e      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x24c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff f9ef 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003a38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003a40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003a48:	2320      	movs	r3, #32
 8003a4a:	e004      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003a4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x264>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	0e9b      	lsrs	r3, r3, #26
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	e018      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x296>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003a94:	2320      	movs	r3, #32
 8003a96:	e004      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d106      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff f9be 	bl	8002e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff f9a2 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x2d4>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff f997 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	0e9b      	lsrs	r3, r3, #26
 8003ada:	f003 021f 	and.w	r2, r3, #31
 8003ade:	e01e      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x312>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f98c 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003b06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003b0e:	2320      	movs	r3, #32
 8003b10:	e004      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d105      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x32a>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	0e9b      	lsrs	r3, r3, #26
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	e016      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x358>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003b48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003b56:	2320      	movs	r3, #32
 8003b58:	e004      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d106      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff f95d 	bl	8002e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2103      	movs	r1, #3
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff f941 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x396>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2103      	movs	r1, #3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f936 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	0e9b      	lsrs	r3, r3, #26
 8003b9c:	f003 021f 	and.w	r2, r3, #31
 8003ba0:	e017      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x3c6>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2103      	movs	r1, #3
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff f92b 	bl	8002e04 <LL_ADC_GetOffsetChannel>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bbc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d105      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x3de>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	0e9b      	lsrs	r3, r3, #26
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	e011      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x402>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003c02:	2320      	movs	r3, #32
 8003c04:	e003      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d106      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	2103      	movs	r1, #3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f908 	bl	8002e30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fa29 	bl	800307c <LL_ADC_IsEnabled>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f040 813f 	bne.w	8003eb0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f7ff f98e 	bl	8002f60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a8e      	ldr	r2, [pc, #568]	; (8003e84 <HAL_ADC_ConfigChannel+0x678>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	f040 8130 	bne.w	8003eb0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x46c>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	3301      	adds	r3, #1
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e019      	b.n	8003cac <HAL_ADC_ConfigChannel+0x4a0>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c80:	fa93 f3a3 	rbit	r3, r3
 8003c84:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c88:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003c90:	2320      	movs	r3, #32
 8003c92:	e003      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	2b09      	cmp	r3, #9
 8003ca4:	bf94      	ite	ls
 8003ca6:	2301      	movls	r3, #1
 8003ca8:	2300      	movhi	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d079      	beq.n	8003da4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d107      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x4c0>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	0e9b      	lsrs	r3, r3, #26
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	069b      	lsls	r3, r3, #26
 8003cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cca:	e015      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x4ec>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	e003      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	069b      	lsls	r3, r3, #26
 8003cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x50c>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0e9b      	lsrs	r3, r3, #26
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	e017      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x53c>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003d30:	2320      	movs	r3, #32
 8003d32:	e003      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	ea42 0103 	orr.w	r1, r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x562>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f003 021f 	and.w	r2, r3, #31
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	051b      	lsls	r3, r3, #20
 8003d6c:	e018      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x594>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003d86:	2320      	movs	r3, #32
 8003d88:	e003      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da0:	430b      	orrs	r3, r1
 8003da2:	e080      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d107      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x5b4>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	0e9b      	lsrs	r3, r3, #26
 8003db6:	3301      	adds	r3, #1
 8003db8:	069b      	lsls	r3, r3, #26
 8003dba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dbe:	e015      	b.n	8003dec <HAL_ADC_ConfigChannel+0x5e0>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	e003      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	069b      	lsls	r3, r3, #26
 8003de8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x600>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	0e9b      	lsrs	r3, r3, #26
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2101      	movs	r1, #1
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	e017      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x630>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	61fb      	str	r3, [r7, #28]
  return result;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003e24:	2320      	movs	r3, #32
 8003e26:	e003      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	ea42 0103 	orr.w	r1, r2, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x65c>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0e9b      	lsrs	r3, r3, #26
 8003e52:	3301      	adds	r3, #1
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3b1e      	subs	r3, #30
 8003e60:	051b      	lsls	r3, r3, #20
 8003e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e66:	e01d      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x698>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	613b      	str	r3, [r7, #16]
  return result;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003e80:	2320      	movs	r3, #32
 8003e82:	e005      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x684>
 8003e84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f003 021f 	and.w	r2, r3, #31
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3b1e      	subs	r3, #30
 8003e9e:	051b      	lsls	r3, r3, #20
 8003ea0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	6892      	ldr	r2, [r2, #8]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7ff f82d 	bl	8002f0a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b44      	ldr	r3, [pc, #272]	; (8003fc8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d07a      	beq.n	8003fb2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ebc:	4843      	ldr	r0, [pc, #268]	; (8003fcc <HAL_ADC_ConfigChannel+0x7c0>)
 8003ebe:	f7fe ff6f 	bl	8002da0 <LL_ADC_GetCommonPathInternalCh>
 8003ec2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a41      	ldr	r2, [pc, #260]	; (8003fd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d12c      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d126      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a3c      	ldr	r2, [pc, #240]	; (8003fd4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <HAL_ADC_ConfigChannel+0x6e4>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a3b      	ldr	r2, [pc, #236]	; (8003fd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d15d      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4834      	ldr	r0, [pc, #208]	; (8003fcc <HAL_ADC_ConfigChannel+0x7c0>)
 8003efc:	f7fe ff3d 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f00:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_ADC_ConfigChannel+0x7d0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	099b      	lsrs	r3, r3, #6
 8003f06:	4a36      	ldr	r2, [pc, #216]	; (8003fe0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f1a:	e002      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f9      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f28:	e040      	b.n	8003fac <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d118      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x75a>
 8003f34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d112      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_ADC_ConfigChannel+0x748>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d12d      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	481b      	ldr	r0, [pc, #108]	; (8003fcc <HAL_ADC_ConfigChannel+0x7c0>)
 8003f60:	f7fe ff0b 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f64:	e024      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d120      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d11a      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d115      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f8e:	4619      	mov	r1, r3
 8003f90:	480e      	ldr	r0, [pc, #56]	; (8003fcc <HAL_ADC_ConfigChannel+0x7c0>)
 8003f92:	f7fe fef2 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
 8003f96:	e00c      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003faa:	e002      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	37d8      	adds	r7, #216	; 0xd8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	80080000 	.word	0x80080000
 8003fcc:	50040300 	.word	0x50040300
 8003fd0:	c7520000 	.word	0xc7520000
 8003fd4:	50040000 	.word	0x50040000
 8003fd8:	50040200 	.word	0x50040200
 8003fdc:	20000094 	.word	0x20000094
 8003fe0:	053e2d63 	.word	0x053e2d63
 8003fe4:	cb840000 	.word	0xcb840000
 8003fe8:	80000001 	.word	0x80000001

08003fec <LL_ADC_IsEnabled>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <LL_ADC_IsEnabled+0x18>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <LL_ADC_IsEnabled+0x1a>
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <LL_ADC_REG_IsConversionOngoing>:
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b04      	cmp	r3, #4
 8004024:	d101      	bne.n	800402a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b09f      	sub	sp, #124	; 0x7c
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e093      	b.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040c2:	2300      	movs	r3, #0
 80040c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80040c6:	2300      	movs	r3, #0
 80040c8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a47      	ldr	r2, [pc, #284]	; (80041ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d102      	bne.n	80040da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040d4:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	e001      	b.n	80040de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e072      	b.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ff87 	bl	8004012 <LL_ADC_REG_IsConversionOngoing>
 8004104:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff ff81 	bl	8004012 <LL_ADC_REG_IsConversionOngoing>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d154      	bne.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004118:	2b00      	cmp	r3, #0
 800411a:	d151      	bne.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800411c:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800411e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02c      	beq.n	8004182 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800413a:	035b      	lsls	r3, r3, #13
 800413c:	430b      	orrs	r3, r1
 800413e:	431a      	orrs	r2, r3
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004144:	4829      	ldr	r0, [pc, #164]	; (80041ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004146:	f7ff ff51 	bl	8003fec <LL_ADC_IsEnabled>
 800414a:	4604      	mov	r4, r0
 800414c:	4828      	ldr	r0, [pc, #160]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800414e:	f7ff ff4d 	bl	8003fec <LL_ADC_IsEnabled>
 8004152:	4603      	mov	r3, r0
 8004154:	431c      	orrs	r4, r3
 8004156:	4828      	ldr	r0, [pc, #160]	; (80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004158:	f7ff ff48 	bl	8003fec <LL_ADC_IsEnabled>
 800415c:	4603      	mov	r3, r0
 800415e:	4323      	orrs	r3, r4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d137      	bne.n	80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800416c:	f023 030f 	bic.w	r3, r3, #15
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	6811      	ldr	r1, [r2, #0]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	6892      	ldr	r2, [r2, #8]
 8004178:	430a      	orrs	r2, r1
 800417a:	431a      	orrs	r2, r3
 800417c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004180:	e028      	b.n	80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800418e:	4817      	ldr	r0, [pc, #92]	; (80041ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004190:	f7ff ff2c 	bl	8003fec <LL_ADC_IsEnabled>
 8004194:	4604      	mov	r4, r0
 8004196:	4816      	ldr	r0, [pc, #88]	; (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004198:	f7ff ff28 	bl	8003fec <LL_ADC_IsEnabled>
 800419c:	4603      	mov	r3, r0
 800419e:	431c      	orrs	r4, r3
 80041a0:	4815      	ldr	r0, [pc, #84]	; (80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80041a2:	f7ff ff23 	bl	8003fec <LL_ADC_IsEnabled>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4323      	orrs	r3, r4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d112      	bne.n	80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041b6:	f023 030f 	bic.w	r3, r3, #15
 80041ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041bc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041be:	e009      	b.n	80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80041d2:	e000      	b.n	80041d6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	377c      	adds	r7, #124	; 0x7c
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd90      	pop	{r4, r7, pc}
 80041ea:	bf00      	nop
 80041ec:	50040000 	.word	0x50040000
 80041f0:	50040100 	.word	0x50040100
 80041f4:	50040300 	.word	0x50040300
 80041f8:	50040200 	.word	0x50040200

080041fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <__NVIC_SetPriorityGrouping+0x44>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004218:	4013      	ands	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800422e:	4a04      	ldr	r2, [pc, #16]	; (8004240 <__NVIC_SetPriorityGrouping+0x44>)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	60d3      	str	r3, [r2, #12]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <__NVIC_GetPriorityGrouping+0x18>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	f003 0307 	and.w	r3, r3, #7
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	2b00      	cmp	r3, #0
 8004270:	db0b      	blt.n	800428a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	f003 021f 	and.w	r2, r3, #31
 8004278:	4907      	ldr	r1, [pc, #28]	; (8004298 <__NVIC_EnableIRQ+0x38>)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	2001      	movs	r0, #1
 8004282:	fa00 f202 	lsl.w	r2, r0, r2
 8004286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	e000e100 	.word	0xe000e100

0800429c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	6039      	str	r1, [r7, #0]
 80042a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	db0a      	blt.n	80042c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	490c      	ldr	r1, [pc, #48]	; (80042e8 <__NVIC_SetPriority+0x4c>)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	0112      	lsls	r2, r2, #4
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	440b      	add	r3, r1
 80042c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042c4:	e00a      	b.n	80042dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	4908      	ldr	r1, [pc, #32]	; (80042ec <__NVIC_SetPriority+0x50>)
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	3b04      	subs	r3, #4
 80042d4:	0112      	lsls	r2, r2, #4
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	440b      	add	r3, r1
 80042da:	761a      	strb	r2, [r3, #24]
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	e000e100 	.word	0xe000e100
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	; 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f1c3 0307 	rsb	r3, r3, #7
 800430a:	2b04      	cmp	r3, #4
 800430c:	bf28      	it	cs
 800430e:	2304      	movcs	r3, #4
 8004310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3304      	adds	r3, #4
 8004316:	2b06      	cmp	r3, #6
 8004318:	d902      	bls.n	8004320 <NVIC_EncodePriority+0x30>
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3b03      	subs	r3, #3
 800431e:	e000      	b.n	8004322 <NVIC_EncodePriority+0x32>
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43da      	mvns	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	401a      	ands	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	fa01 f303 	lsl.w	r3, r1, r3
 8004342:	43d9      	mvns	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	4313      	orrs	r3, r2
         );
}
 800434a:	4618      	mov	r0, r3
 800434c:	3724      	adds	r7, #36	; 0x24
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff ff4c 	bl	80041fc <__NVIC_SetPriorityGrouping>
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800437e:	f7ff ff61 	bl	8004244 <__NVIC_GetPriorityGrouping>
 8004382:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	6978      	ldr	r0, [r7, #20]
 800438a:	f7ff ffb1 	bl	80042f0 <NVIC_EncodePriority>
 800438e:	4602      	mov	r2, r0
 8004390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff80 	bl	800429c <__NVIC_SetPriority>
}
 800439c:	bf00      	nop
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff ff54 	bl	8004260 <__NVIC_EnableIRQ>
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ce:	e17f      	b.n	80046d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	2101      	movs	r1, #1
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	4013      	ands	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 8171 	beq.w	80046ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d00b      	beq.n	8004408 <HAL_GPIO_Init+0x48>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d007      	beq.n	8004408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043fc:	2b11      	cmp	r3, #17
 80043fe:	d003      	beq.n	8004408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b12      	cmp	r3, #18
 8004406:	d130      	bne.n	800446a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	2203      	movs	r2, #3
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800443e:	2201      	movs	r2, #1
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4013      	ands	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 0201 	and.w	r2, r3, #1
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b03      	cmp	r3, #3
 8004474:	d118      	bne.n	80044a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800447c:	2201      	movs	r2, #1
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	f003 0201 	and.w	r2, r3, #1
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	2203      	movs	r2, #3
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x128>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b12      	cmp	r3, #18
 80044e6:	d123      	bne.n	8004530 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	08da      	lsrs	r2, r3, #3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3208      	adds	r2, #8
 80044f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	220f      	movs	r2, #15
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	08da      	lsrs	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3208      	adds	r2, #8
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	2203      	movs	r2, #3
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0203 	and.w	r2, r3, #3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80ac 	beq.w	80046ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004572:	4b5f      	ldr	r3, [pc, #380]	; (80046f0 <HAL_GPIO_Init+0x330>)
 8004574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004576:	4a5e      	ldr	r2, [pc, #376]	; (80046f0 <HAL_GPIO_Init+0x330>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6613      	str	r3, [r2, #96]	; 0x60
 800457e:	4b5c      	ldr	r3, [pc, #368]	; (80046f0 <HAL_GPIO_Init+0x330>)
 8004580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800458a:	4a5a      	ldr	r2, [pc, #360]	; (80046f4 <HAL_GPIO_Init+0x334>)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	089b      	lsrs	r3, r3, #2
 8004590:	3302      	adds	r3, #2
 8004592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	220f      	movs	r2, #15
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045b4:	d025      	beq.n	8004602 <HAL_GPIO_Init+0x242>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a4f      	ldr	r2, [pc, #316]	; (80046f8 <HAL_GPIO_Init+0x338>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01f      	beq.n	80045fe <HAL_GPIO_Init+0x23e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a4e      	ldr	r2, [pc, #312]	; (80046fc <HAL_GPIO_Init+0x33c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d019      	beq.n	80045fa <HAL_GPIO_Init+0x23a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a4d      	ldr	r2, [pc, #308]	; (8004700 <HAL_GPIO_Init+0x340>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <HAL_GPIO_Init+0x236>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a4c      	ldr	r2, [pc, #304]	; (8004704 <HAL_GPIO_Init+0x344>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00d      	beq.n	80045f2 <HAL_GPIO_Init+0x232>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4b      	ldr	r2, [pc, #300]	; (8004708 <HAL_GPIO_Init+0x348>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <HAL_GPIO_Init+0x22e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4a      	ldr	r2, [pc, #296]	; (800470c <HAL_GPIO_Init+0x34c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d101      	bne.n	80045ea <HAL_GPIO_Init+0x22a>
 80045e6:	2306      	movs	r3, #6
 80045e8:	e00c      	b.n	8004604 <HAL_GPIO_Init+0x244>
 80045ea:	2307      	movs	r3, #7
 80045ec:	e00a      	b.n	8004604 <HAL_GPIO_Init+0x244>
 80045ee:	2305      	movs	r3, #5
 80045f0:	e008      	b.n	8004604 <HAL_GPIO_Init+0x244>
 80045f2:	2304      	movs	r3, #4
 80045f4:	e006      	b.n	8004604 <HAL_GPIO_Init+0x244>
 80045f6:	2303      	movs	r3, #3
 80045f8:	e004      	b.n	8004604 <HAL_GPIO_Init+0x244>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e002      	b.n	8004604 <HAL_GPIO_Init+0x244>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_GPIO_Init+0x244>
 8004602:	2300      	movs	r3, #0
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	f002 0203 	and.w	r2, r2, #3
 800460a:	0092      	lsls	r2, r2, #2
 800460c:	4093      	lsls	r3, r2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004614:	4937      	ldr	r1, [pc, #220]	; (80046f4 <HAL_GPIO_Init+0x334>)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	3302      	adds	r3, #2
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004622:	4b3b      	ldr	r3, [pc, #236]	; (8004710 <HAL_GPIO_Init+0x350>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004646:	4a32      	ldr	r2, [pc, #200]	; (8004710 <HAL_GPIO_Init+0x350>)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800464c:	4b30      	ldr	r3, [pc, #192]	; (8004710 <HAL_GPIO_Init+0x350>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	43db      	mvns	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004670:	4a27      	ldr	r2, [pc, #156]	; (8004710 <HAL_GPIO_Init+0x350>)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004676:	4b26      	ldr	r3, [pc, #152]	; (8004710 <HAL_GPIO_Init+0x350>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	43db      	mvns	r3, r3
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4013      	ands	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800469a:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <HAL_GPIO_Init+0x350>)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046a0:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_GPIO_Init+0x350>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046c4:	4a12      	ldr	r2, [pc, #72]	; (8004710 <HAL_GPIO_Init+0x350>)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	3301      	adds	r3, #1
 80046ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	fa22 f303 	lsr.w	r3, r2, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f47f ae78 	bne.w	80043d0 <HAL_GPIO_Init+0x10>
  }
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40010000 	.word	0x40010000
 80046f8:	48000400 	.word	0x48000400
 80046fc:	48000800 	.word	0x48000800
 8004700:	48000c00 	.word	0x48000c00
 8004704:	48001000 	.word	0x48001000
 8004708:	48001400 	.word	0x48001400
 800470c:	48001800 	.word	0x48001800
 8004710:	40010400 	.word	0x40010400

08004714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	807b      	strh	r3, [r7, #2]
 8004720:	4613      	mov	r3, r2
 8004722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004724:	787b      	ldrb	r3, [r7, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800472a:	887a      	ldrh	r2, [r7, #2]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004730:	e002      	b.n	8004738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e081      	b.n	800485a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd feaa 	bl	80024c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	; 0x24
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004794:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	e006      	b.n	80047cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d104      	bne.n	80047de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004800:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	ea42 0103 	orr.w	r1, r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	021a      	lsls	r2, r3, #8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b20      	cmp	r3, #32
 8004876:	d138      	bne.n	80048ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004882:	2302      	movs	r3, #2
 8004884:	e032      	b.n	80048ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2224      	movs	r2, #36	; 0x24
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6819      	ldr	r1, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b20      	cmp	r3, #32
 800490c:	d139      	bne.n	8004982 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004918:	2302      	movs	r3, #2
 800491a:	e033      	b.n	8004984 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	; 0x24
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800494a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0201 	orr.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40007000 	.word	0x40007000

080049ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ba:	d130      	bne.n	8004a1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049bc:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c8:	d038      	beq.n	8004a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049d2:	4a1e      	ldr	r2, [pc, #120]	; (8004a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049da:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2232      	movs	r2, #50	; 0x32
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	4a1b      	ldr	r2, [pc, #108]	; (8004a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	0c9b      	lsrs	r3, r3, #18
 80049ec:	3301      	adds	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049f0:	e002      	b.n	80049f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049f8:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a04:	d102      	bne.n	8004a0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f2      	bne.n	80049f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a18:	d110      	bne.n	8004a3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e00f      	b.n	8004a3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2a:	d007      	beq.n	8004a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a2c:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a34:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40007000 	.word	0x40007000
 8004a50:	20000094 	.word	0x20000094
 8004a54:	431bde83 	.word	0x431bde83

08004a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e3d4      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a6a:	4ba1      	ldr	r3, [pc, #644]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a74:	4b9e      	ldr	r3, [pc, #632]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80e4 	beq.w	8004c54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x4a>
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b0c      	cmp	r3, #12
 8004a96:	f040 808b 	bne.w	8004bb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	f040 8087 	bne.w	8004bb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aa2:	4b93      	ldr	r3, [pc, #588]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_RCC_OscConfig+0x62>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e3ac      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1a      	ldr	r2, [r3, #32]
 8004abe:	4b8c      	ldr	r3, [pc, #560]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d004      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x7c>
 8004aca:	4b89      	ldr	r3, [pc, #548]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCC_OscConfig+0x88>
 8004ad4:	4b86      	ldr	r3, [pc, #536]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ada:	091b      	lsrs	r3, r3, #4
 8004adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d223      	bcs.n	8004b2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fd73 	bl	80055d4 <RCC_SetFlashLatencyFromMSIRange>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e38d      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004af8:	4b7d      	ldr	r3, [pc, #500]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a7c      	ldr	r2, [pc, #496]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004afe:	f043 0308 	orr.w	r3, r3, #8
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	4b7a      	ldr	r3, [pc, #488]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	4977      	ldr	r1, [pc, #476]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b16:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	4972      	ldr	r1, [pc, #456]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
 8004b2a:	e025      	b.n	8004b78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b2c:	4b70      	ldr	r3, [pc, #448]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a6f      	ldr	r2, [pc, #444]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b32:	f043 0308 	orr.w	r3, r3, #8
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	4b6d      	ldr	r3, [pc, #436]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	496a      	ldr	r1, [pc, #424]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b4a:	4b69      	ldr	r3, [pc, #420]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	4965      	ldr	r1, [pc, #404]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d109      	bne.n	8004b78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fd33 	bl	80055d4 <RCC_SetFlashLatencyFromMSIRange>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e34d      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b78:	f000 fc36 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b5c      	ldr	r3, [pc, #368]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	091b      	lsrs	r3, r3, #4
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	495a      	ldr	r1, [pc, #360]	; (8004cf4 <HAL_RCC_OscConfig+0x29c>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
 8004b94:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <HAL_RCC_OscConfig+0x2a0>)
 8004b96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b98:	4b58      	ldr	r3, [pc, #352]	; (8004cfc <HAL_RCC_OscConfig+0x2a4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fd fedd 	bl	800295c <HAL_InitTick>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d052      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	e331      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d032      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bb8:	4b4d      	ldr	r3, [pc, #308]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a4c      	ldr	r2, [pc, #304]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bc4:	f7fe f896 	bl	8002cf4 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bcc:	f7fe f892 	bl	8002cf4 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e31a      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bde:	4b44      	ldr	r3, [pc, #272]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a40      	ldr	r2, [pc, #256]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004bf0:	f043 0308 	orr.w	r3, r3, #8
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	493b      	ldr	r1, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c08:	4b39      	ldr	r3, [pc, #228]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	4936      	ldr	r1, [pc, #216]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	604b      	str	r3, [r1, #4]
 8004c1c:	e01a      	b.n	8004c54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c1e:	4b34      	ldr	r3, [pc, #208]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a33      	ldr	r2, [pc, #204]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c2a:	f7fe f863 	bl	8002cf4 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c32:	f7fe f85f 	bl	8002cf4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e2e7      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c44:	4b2a      	ldr	r3, [pc, #168]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCC_OscConfig+0x1da>
 8004c50:	e000      	b.n	8004c54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d074      	beq.n	8004d4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d005      	beq.n	8004c72 <HAL_RCC_OscConfig+0x21a>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	d10e      	bne.n	8004c8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d10b      	bne.n	8004c8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c72:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d064      	beq.n	8004d48 <HAL_RCC_OscConfig+0x2f0>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d160      	bne.n	8004d48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e2c4      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x24a>
 8004c94:	4b16      	ldr	r3, [pc, #88]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	e01d      	b.n	8004cde <HAL_RCC_OscConfig+0x286>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004caa:	d10c      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x26e>
 8004cac:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0f      	ldr	r2, [pc, #60]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	e00b      	b.n	8004cde <HAL_RCC_OscConfig+0x286>
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a06      	ldr	r2, [pc, #24]	; (8004cf0 <HAL_RCC_OscConfig+0x298>)
 8004cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01c      	beq.n	8004d20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fe f805 	bl	8002cf4 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cec:	e011      	b.n	8004d12 <HAL_RCC_OscConfig+0x2ba>
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	0800ceb0 	.word	0x0800ceb0
 8004cf8:	20000094 	.word	0x20000094
 8004cfc:	20000098 	.word	0x20000098
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d00:	f7fd fff8 	bl	8002cf4 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	; 0x64
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e280      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d12:	4baf      	ldr	r3, [pc, #700]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x2a8>
 8004d1e:	e014      	b.n	8004d4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fd ffe8 	bl	8002cf4 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d28:	f7fd ffe4 	bl	8002cf4 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	; 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e26c      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d3a:	4ba5      	ldr	r3, [pc, #660]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x2d0>
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d060      	beq.n	8004e18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_OscConfig+0x310>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d119      	bne.n	8004d96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d116      	bne.n	8004d96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d68:	4b99      	ldr	r3, [pc, #612]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_OscConfig+0x328>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e249      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d80:	4b93      	ldr	r3, [pc, #588]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	061b      	lsls	r3, r3, #24
 8004d8e:	4990      	ldr	r1, [pc, #576]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d94:	e040      	b.n	8004e18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d023      	beq.n	8004de6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d9e:	4b8c      	ldr	r3, [pc, #560]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a8b      	ldr	r2, [pc, #556]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fd ffa3 	bl	8002cf4 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db2:	f7fd ff9f 	bl	8002cf4 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e227      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dc4:	4b82      	ldr	r3, [pc, #520]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd0:	4b7f      	ldr	r3, [pc, #508]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	061b      	lsls	r3, r3, #24
 8004dde:	497c      	ldr	r1, [pc, #496]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
 8004de4:	e018      	b.n	8004e18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004de6:	4b7a      	ldr	r3, [pc, #488]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a79      	ldr	r2, [pc, #484]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df2:	f7fd ff7f 	bl	8002cf4 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fd ff7b 	bl	8002cf4 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e203      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e0c:	4b70      	ldr	r3, [pc, #448]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d03c      	beq.n	8004e9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01c      	beq.n	8004e66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e2c:	4b68      	ldr	r3, [pc, #416]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e32:	4a67      	ldr	r2, [pc, #412]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fd ff5a 	bl	8002cf4 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e44:	f7fd ff56 	bl	8002cf4 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e1de      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e56:	4b5e      	ldr	r3, [pc, #376]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0ef      	beq.n	8004e44 <HAL_RCC_OscConfig+0x3ec>
 8004e64:	e01b      	b.n	8004e9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e66:	4b5a      	ldr	r3, [pc, #360]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6c:	4a58      	ldr	r2, [pc, #352]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fd ff3d 	bl	8002cf4 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7e:	f7fd ff39 	bl	8002cf4 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e1c1      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e90:	4b4f      	ldr	r3, [pc, #316]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1ef      	bne.n	8004e7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80a6 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eac:	2300      	movs	r3, #0
 8004eae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004eb0:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10d      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ebc:	4b44      	ldr	r3, [pc, #272]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec0:	4a43      	ldr	r2, [pc, #268]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec8:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ed8:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <HAL_RCC_OscConfig+0x57c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d118      	bne.n	8004f16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ee4:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <HAL_RCC_OscConfig+0x57c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a3a      	ldr	r2, [pc, #232]	; (8004fd4 <HAL_RCC_OscConfig+0x57c>)
 8004eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef0:	f7fd ff00 	bl	8002cf4 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef8:	f7fd fefc 	bl	8002cf4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e184      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f0a:	4b32      	ldr	r3, [pc, #200]	; (8004fd4 <HAL_RCC_OscConfig+0x57c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d108      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4d8>
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f2e:	e024      	b.n	8004f7a <HAL_RCC_OscConfig+0x522>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d110      	bne.n	8004f5a <HAL_RCC_OscConfig+0x502>
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	4a24      	ldr	r2, [pc, #144]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f40:	f043 0304 	orr.w	r3, r3, #4
 8004f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f48:	4b21      	ldr	r3, [pc, #132]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	4a20      	ldr	r2, [pc, #128]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f58:	e00f      	b.n	8004f7a <HAL_RCC_OscConfig+0x522>
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	4a1b      	ldr	r2, [pc, #108]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f6a:	4b19      	ldr	r3, [pc, #100]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f70:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004f72:	f023 0304 	bic.w	r3, r3, #4
 8004f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f82:	f7fd feb7 	bl	8002cf4 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f88:	e00a      	b.n	8004fa0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8a:	f7fd feb3 	bl	8002cf4 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e139      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_OscConfig+0x578>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0ed      	beq.n	8004f8a <HAL_RCC_OscConfig+0x532>
 8004fae:	e01a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7fd fea0 	bl	8002cf4 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fb6:	e00f      	b.n	8004fd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb8:	f7fd fe9c 	bl	8002cf4 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d906      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e122      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fd8:	4b90      	ldr	r3, [pc, #576]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e8      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fe6:	7ffb      	ldrb	r3, [r7, #31]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fec:	4b8b      	ldr	r3, [pc, #556]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	4a8a      	ldr	r2, [pc, #552]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8004ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8108 	beq.w	8005212 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	2b02      	cmp	r3, #2
 8005008:	f040 80d0 	bne.w	80051ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800500c:	4b83      	ldr	r3, [pc, #524]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f003 0203 	and.w	r2, r3, #3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	429a      	cmp	r2, r3
 800501e:	d130      	bne.n	8005082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	3b01      	subs	r3, #1
 800502c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d127      	bne.n	8005082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800503e:	429a      	cmp	r2, r3
 8005040:	d11f      	bne.n	8005082 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800504c:	2a07      	cmp	r2, #7
 800504e:	bf14      	ite	ne
 8005050:	2201      	movne	r2, #1
 8005052:	2200      	moveq	r2, #0
 8005054:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005056:	4293      	cmp	r3, r2
 8005058:	d113      	bne.n	8005082 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	3b01      	subs	r3, #1
 8005068:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800506a:	429a      	cmp	r2, r3
 800506c:	d109      	bne.n	8005082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	085b      	lsrs	r3, r3, #1
 800507a:	3b01      	subs	r3, #1
 800507c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d06e      	beq.n	8005160 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b0c      	cmp	r3, #12
 8005086:	d069      	beq.n	800515c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005088:	4b64      	ldr	r3, [pc, #400]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005094:	4b61      	ldr	r3, [pc, #388]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0b7      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050a4:	4b5d      	ldr	r3, [pc, #372]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5c      	ldr	r2, [pc, #368]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80050aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050b0:	f7fd fe20 	bl	8002cf4 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fd fe1c 	bl	8002cf4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e0a4      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ca:	4b54      	ldr	r3, [pc, #336]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050d6:	4b51      	ldr	r3, [pc, #324]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	4b51      	ldr	r3, [pc, #324]	; (8005220 <HAL_RCC_OscConfig+0x7c8>)
 80050dc:	4013      	ands	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050e6:	3a01      	subs	r2, #1
 80050e8:	0112      	lsls	r2, r2, #4
 80050ea:	4311      	orrs	r1, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050f0:	0212      	lsls	r2, r2, #8
 80050f2:	4311      	orrs	r1, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050f8:	0852      	lsrs	r2, r2, #1
 80050fa:	3a01      	subs	r2, #1
 80050fc:	0552      	lsls	r2, r2, #21
 80050fe:	4311      	orrs	r1, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005104:	0852      	lsrs	r2, r2, #1
 8005106:	3a01      	subs	r2, #1
 8005108:	0652      	lsls	r2, r2, #25
 800510a:	4311      	orrs	r1, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005110:	0912      	lsrs	r2, r2, #4
 8005112:	0452      	lsls	r2, r2, #17
 8005114:	430a      	orrs	r2, r1
 8005116:	4941      	ldr	r1, [pc, #260]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8005118:	4313      	orrs	r3, r2
 800511a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800511c:	4b3f      	ldr	r3, [pc, #252]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a3e      	ldr	r2, [pc, #248]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8005122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005128:	4b3c      	ldr	r3, [pc, #240]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4a3b      	ldr	r2, [pc, #236]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 800512e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005134:	f7fd fdde 	bl	8002cf4 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513c:	f7fd fdda 	bl	8002cf4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e062      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514e:	4b33      	ldr	r3, [pc, #204]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f0      	beq.n	800513c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800515a:	e05a      	b.n	8005212 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e059      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005160:	4b2e      	ldr	r3, [pc, #184]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d152      	bne.n	8005212 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800516c:	4b2b      	ldr	r3, [pc, #172]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a2a      	ldr	r2, [pc, #168]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8005172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005176:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005178:	4b28      	ldr	r3, [pc, #160]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4a27      	ldr	r2, [pc, #156]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 800517e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005182:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005184:	f7fd fdb6 	bl	8002cf4 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518c:	f7fd fdb2 	bl	8002cf4 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e03a      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800519e:	4b1f      	ldr	r3, [pc, #124]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x734>
 80051aa:	e032      	b.n	8005212 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b0c      	cmp	r3, #12
 80051b0:	d02d      	beq.n	800520e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a19      	ldr	r2, [pc, #100]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80051b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80051be:	4b17      	ldr	r3, [pc, #92]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d105      	bne.n	80051d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80051ca:	4b14      	ldr	r3, [pc, #80]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80051d0:	f023 0303 	bic.w	r3, r3, #3
 80051d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	4a10      	ldr	r2, [pc, #64]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 80051dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e6:	f7fd fd85 	bl	8002cf4 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fd fd81 	bl	8002cf4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e009      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_RCC_OscConfig+0x7c4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <HAL_RCC_OscConfig+0x796>
 800520c:	e001      	b.n	8005212 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3720      	adds	r7, #32
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40021000 	.word	0x40021000
 8005220:	f99d808c 	.word	0xf99d808c

08005224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0c8      	b.n	80053ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005238:	4b66      	ldr	r3, [pc, #408]	; (80053d4 <HAL_RCC_ClockConfig+0x1b0>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d910      	bls.n	8005268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b63      	ldr	r3, [pc, #396]	; (80053d4 <HAL_RCC_ClockConfig+0x1b0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 0207 	bic.w	r2, r3, #7
 800524e:	4961      	ldr	r1, [pc, #388]	; (80053d4 <HAL_RCC_ClockConfig+0x1b0>)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	4313      	orrs	r3, r2
 8005254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b5f      	ldr	r3, [pc, #380]	; (80053d4 <HAL_RCC_ClockConfig+0x1b0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0b0      	b.n	80053ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d04c      	beq.n	800530e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d107      	bne.n	800528c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527c:	4b56      	ldr	r3, [pc, #344]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d121      	bne.n	80052cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e09e      	b.n	80053ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d107      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005294:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d115      	bne.n	80052cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e092      	b.n	80053ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052ac:	4b4a      	ldr	r3, [pc, #296]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e086      	b.n	80053ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052bc:	4b46      	ldr	r3, [pc, #280]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e07e      	b.n	80053ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052cc:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f023 0203 	bic.w	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	493f      	ldr	r1, [pc, #252]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052de:	f7fd fd09 	bl	8002cf4 <HAL_GetTick>
 80052e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e6:	f7fd fd05 	bl	8002cf4 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e066      	b.n	80053ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fc:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 020c 	and.w	r2, r3, #12
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	429a      	cmp	r2, r3
 800530c:	d1eb      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531a:	4b2f      	ldr	r3, [pc, #188]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	492c      	ldr	r1, [pc, #176]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 8005328:	4313      	orrs	r3, r2
 800532a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800532c:	4b29      	ldr	r3, [pc, #164]	; (80053d4 <HAL_RCC_ClockConfig+0x1b0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d210      	bcs.n	800535c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <HAL_RCC_ClockConfig+0x1b0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 0207 	bic.w	r2, r3, #7
 8005342:	4924      	ldr	r1, [pc, #144]	; (80053d4 <HAL_RCC_ClockConfig+0x1b0>)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b22      	ldr	r3, [pc, #136]	; (80053d4 <HAL_RCC_ClockConfig+0x1b0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e036      	b.n	80053ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4918      	ldr	r1, [pc, #96]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4910      	ldr	r1, [pc, #64]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800539a:	f000 f825 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 800539e:	4602      	mov	r2, r0
 80053a0:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <HAL_RCC_ClockConfig+0x1b4>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	490c      	ldr	r1, [pc, #48]	; (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	5ccb      	ldrb	r3, [r1, r3]
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	fa22 f303 	lsr.w	r3, r2, r3
 80053b6:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053ba:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fd facc 	bl	800295c <HAL_InitTick>
 80053c4:	4603      	mov	r3, r0
 80053c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80053c8:	7afb      	ldrb	r3, [r7, #11]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40022000 	.word	0x40022000
 80053d8:	40021000 	.word	0x40021000
 80053dc:	0800ceb0 	.word	0x0800ceb0
 80053e0:	20000094 	.word	0x20000094
 80053e4:	20000098 	.word	0x20000098

080053e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b089      	sub	sp, #36	; 0x24
 80053ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f6:	4b3e      	ldr	r3, [pc, #248]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005400:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0x34>
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2b0c      	cmp	r3, #12
 8005414:	d121      	bne.n	800545a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d11e      	bne.n	800545a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800541c:	4b34      	ldr	r3, [pc, #208]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d107      	bne.n	8005438 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005428:	4b31      	ldr	r3, [pc, #196]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	e005      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005438:	4b2d      	ldr	r3, [pc, #180]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005444:	4a2b      	ldr	r2, [pc, #172]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10d      	bne.n	8005470 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005458:	e00a      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d102      	bne.n	8005466 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005460:	4b25      	ldr	r3, [pc, #148]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	e004      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d101      	bne.n	8005470 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800546c:	4b23      	ldr	r3, [pc, #140]	; (80054fc <HAL_RCC_GetSysClockFreq+0x114>)
 800546e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d134      	bne.n	80054e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005476:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d003      	beq.n	800548e <HAL_RCC_GetSysClockFreq+0xa6>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d003      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0xac>
 800548c:	e005      	b.n	800549a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800548e:	4b1a      	ldr	r3, [pc, #104]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005490:	617b      	str	r3, [r7, #20]
      break;
 8005492:	e005      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005494:	4b19      	ldr	r3, [pc, #100]	; (80054fc <HAL_RCC_GetSysClockFreq+0x114>)
 8005496:	617b      	str	r3, [r7, #20]
      break;
 8005498:	e002      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	617b      	str	r3, [r7, #20]
      break;
 800549e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	091b      	lsrs	r3, r3, #4
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	3301      	adds	r3, #1
 80054ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054ae:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	fb02 f203 	mul.w	r2, r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	0e5b      	lsrs	r3, r3, #25
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	3301      	adds	r3, #1
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054e0:	69bb      	ldr	r3, [r7, #24]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3724      	adds	r7, #36	; 0x24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40021000 	.word	0x40021000
 80054f4:	0800cec8 	.word	0x0800cec8
 80054f8:	00f42400 	.word	0x00f42400
 80054fc:	007a1200 	.word	0x007a1200

08005500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <HAL_RCC_GetHCLKFreq+0x14>)
 8005506:	681b      	ldr	r3, [r3, #0]
}
 8005508:	4618      	mov	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000094 	.word	0x20000094

08005518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800551c:	f7ff fff0 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8005520:	4602      	mov	r2, r0
 8005522:	4b06      	ldr	r3, [pc, #24]	; (800553c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	4904      	ldr	r1, [pc, #16]	; (8005540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800552e:	5ccb      	ldrb	r3, [r1, r3]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000
 8005540:	0800cec0 	.word	0x0800cec0

08005544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005548:	f7ff ffda 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	0adb      	lsrs	r3, r3, #11
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4904      	ldr	r1, [pc, #16]	; (800556c <HAL_RCC_GetPCLK2Freq+0x28>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021000 	.word	0x40021000
 800556c:	0800cec0 	.word	0x0800cec0

08005570 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	220f      	movs	r2, #15
 800557e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005580:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCC_GetClockConfig+0x5c>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 0203 	and.w	r2, r3, #3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800558c:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <HAL_RCC_GetClockConfig+0x5c>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <HAL_RCC_GetClockConfig+0x5c>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80055a4:	4b09      	ldr	r3, [pc, #36]	; (80055cc <HAL_RCC_GetClockConfig+0x5c>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80055b2:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <HAL_RCC_GetClockConfig+0x60>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0207 	and.w	r2, r3, #7
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	601a      	str	r2, [r3, #0]
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40022000 	.word	0x40022000

080055d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055e0:	4b2a      	ldr	r3, [pc, #168]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055ec:	f7ff f9d0 	bl	8004990 <HAL_PWREx_GetVoltageRange>
 80055f0:	6178      	str	r0, [r7, #20]
 80055f2:	e014      	b.n	800561e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055f4:	4b25      	ldr	r3, [pc, #148]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f8:	4a24      	ldr	r2, [pc, #144]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005600:	4b22      	ldr	r3, [pc, #136]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800560c:	f7ff f9c0 	bl	8004990 <HAL_PWREx_GetVoltageRange>
 8005610:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005612:	4b1e      	ldr	r3, [pc, #120]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005616:	4a1d      	ldr	r2, [pc, #116]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005624:	d10b      	bne.n	800563e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d919      	bls.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2ba0      	cmp	r3, #160	; 0xa0
 8005630:	d902      	bls.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005632:	2302      	movs	r3, #2
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	e013      	b.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005638:	2301      	movs	r3, #1
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	e010      	b.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b80      	cmp	r3, #128	; 0x80
 8005642:	d902      	bls.n	800564a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005644:	2303      	movs	r3, #3
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	e00a      	b.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b80      	cmp	r3, #128	; 0x80
 800564e:	d102      	bne.n	8005656 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005650:	2302      	movs	r3, #2
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	e004      	b.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b70      	cmp	r3, #112	; 0x70
 800565a:	d101      	bne.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800565c:	2301      	movs	r3, #1
 800565e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f023 0207 	bic.w	r2, r3, #7
 8005668:	4909      	ldr	r1, [pc, #36]	; (8005690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	d001      	beq.n	8005682 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40021000 	.word	0x40021000
 8005690:	40022000 	.word	0x40022000

08005694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800569c:	2300      	movs	r3, #0
 800569e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056a0:	2300      	movs	r3, #0
 80056a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d041      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056b8:	d02a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056be:	d824      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056c4:	d008      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ca:	d81e      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056d4:	d010      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056d6:	e018      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056d8:	4b86      	ldr	r3, [pc, #536]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a85      	ldr	r2, [pc, #532]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056e4:	e015      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3304      	adds	r3, #4
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fabb 	bl	8005c68 <RCCEx_PLLSAI1_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056f6:	e00c      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3320      	adds	r3, #32
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fba6 	bl	8005e50 <RCCEx_PLLSAI2_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	74fb      	strb	r3, [r7, #19]
      break;
 800570e:	e000      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005718:	4b76      	ldr	r3, [pc, #472]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005726:	4973      	ldr	r1, [pc, #460]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800572e:	e001      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005730:	7cfb      	ldrb	r3, [r7, #19]
 8005732:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d041      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005744:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005748:	d02a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800574a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800574e:	d824      	bhi.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005754:	d008      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800575a:	d81e      	bhi.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005764:	d010      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005766:	e018      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005768:	4b62      	ldr	r3, [pc, #392]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a61      	ldr	r2, [pc, #388]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800576e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005772:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005774:	e015      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3304      	adds	r3, #4
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fa73 	bl	8005c68 <RCCEx_PLLSAI1_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005786:	e00c      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3320      	adds	r3, #32
 800578c:	2100      	movs	r1, #0
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fb5e 	bl	8005e50 <RCCEx_PLLSAI2_Config>
 8005794:	4603      	mov	r3, r0
 8005796:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005798:	e003      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	74fb      	strb	r3, [r7, #19]
      break;
 800579e:	e000      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80057a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a2:	7cfb      	ldrb	r3, [r7, #19]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057a8:	4b52      	ldr	r3, [pc, #328]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b6:	494f      	ldr	r1, [pc, #316]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057be:	e001      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	7cfb      	ldrb	r3, [r7, #19]
 80057c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80a0 	beq.w	8005912 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d2:	2300      	movs	r3, #0
 80057d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057d6:	4b47      	ldr	r3, [pc, #284]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ec:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	4a40      	ldr	r2, [pc, #256]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f6:	6593      	str	r3, [r2, #88]	; 0x58
 80057f8:	4b3e      	ldr	r3, [pc, #248]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005804:	2301      	movs	r3, #1
 8005806:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005808:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a3a      	ldr	r2, [pc, #232]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800580e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005812:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005814:	f7fd fa6e 	bl	8002cf4 <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800581a:	e009      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581c:	f7fd fa6a 	bl	8002cf4 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d902      	bls.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	74fb      	strb	r3, [r7, #19]
        break;
 800582e:	e005      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005830:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0ef      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800583c:	7cfb      	ldrb	r3, [r7, #19]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d15c      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005842:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01f      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	429a      	cmp	r2, r3
 800585e:	d019      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005860:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800586c:	4b21      	ldr	r3, [pc, #132]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800587c:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d016      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fd fa29 	bl	8002cf4 <HAL_GetTick>
 80058a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a4:	e00b      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fd fa25 	bl	8002cf4 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d902      	bls.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	74fb      	strb	r3, [r7, #19]
            break;
 80058bc:	e006      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0ec      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10c      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058d2:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e2:	4904      	ldr	r1, [pc, #16]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058ea:	e009      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ec:	7cfb      	ldrb	r3, [r7, #19]
 80058ee:	74bb      	strb	r3, [r7, #18]
 80058f0:	e006      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80058f2:	bf00      	nop
 80058f4:	40021000 	.word	0x40021000
 80058f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fc:	7cfb      	ldrb	r3, [r7, #19]
 80058fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005900:	7c7b      	ldrb	r3, [r7, #17]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d105      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005906:	4b9e      	ldr	r3, [pc, #632]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590a:	4a9d      	ldr	r2, [pc, #628]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005910:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800591e:	4b98      	ldr	r3, [pc, #608]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	f023 0203 	bic.w	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	4994      	ldr	r1, [pc, #592]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005940:	4b8f      	ldr	r3, [pc, #572]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f023 020c 	bic.w	r2, r3, #12
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	498c      	ldr	r1, [pc, #560]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005962:	4b87      	ldr	r3, [pc, #540]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005968:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	4983      	ldr	r1, [pc, #524]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005984:	4b7e      	ldr	r3, [pc, #504]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	497b      	ldr	r1, [pc, #492]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0310 	and.w	r3, r3, #16
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059a6:	4b76      	ldr	r3, [pc, #472]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b4:	4972      	ldr	r1, [pc, #456]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059c8:	4b6d      	ldr	r3, [pc, #436]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d6:	496a      	ldr	r1, [pc, #424]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ea:	4b65      	ldr	r3, [pc, #404]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f8:	4961      	ldr	r1, [pc, #388]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a0c:	4b5c      	ldr	r3, [pc, #368]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1a:	4959      	ldr	r1, [pc, #356]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a2e:	4b54      	ldr	r3, [pc, #336]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	4950      	ldr	r1, [pc, #320]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a50:	4b4b      	ldr	r3, [pc, #300]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	4948      	ldr	r1, [pc, #288]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a72:	4b43      	ldr	r3, [pc, #268]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a80:	493f      	ldr	r1, [pc, #252]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d028      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a94:	4b3a      	ldr	r3, [pc, #232]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aa2:	4937      	ldr	r1, [pc, #220]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab2:	d106      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab4:	4b32      	ldr	r3, [pc, #200]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4a31      	ldr	r2, [pc, #196]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005abe:	60d3      	str	r3, [r2, #12]
 8005ac0:	e011      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aca:	d10c      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f8c8 	bl	8005c68 <RCCEx_PLLSAI1_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d028      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005af2:	4b23      	ldr	r3, [pc, #140]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b00:	491f      	ldr	r1, [pc, #124]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b10:	d106      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b12:	4b1b      	ldr	r3, [pc, #108]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	4a1a      	ldr	r2, [pc, #104]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b1c:	60d3      	str	r3, [r2, #12]
 8005b1e:	e011      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	2101      	movs	r1, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f899 	bl	8005c68 <RCCEx_PLLSAI1_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b3a:	7cfb      	ldrb	r3, [r7, #19]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b40:	7cfb      	ldrb	r3, [r7, #19]
 8005b42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d02b      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5e:	4908      	ldr	r1, [pc, #32]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b6e:	d109      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b70:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4a02      	ldr	r2, [pc, #8]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b7a:	60d3      	str	r3, [r2, #12]
 8005b7c:	e014      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3304      	adds	r3, #4
 8005b92:	2101      	movs	r1, #1
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 f867 	bl	8005c68 <RCCEx_PLLSAI1_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d02f      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bb4:	4b2b      	ldr	r3, [pc, #172]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bc2:	4928      	ldr	r1, [pc, #160]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bd2:	d10d      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	2102      	movs	r1, #2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f844 	bl	8005c68 <RCCEx_PLLSAI1_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005be4:	7cfb      	ldrb	r3, [r7, #19]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d014      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005bea:	7cfb      	ldrb	r3, [r7, #19]
 8005bec:	74bb      	strb	r3, [r7, #18]
 8005bee:	e011      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3320      	adds	r3, #32
 8005bfe:	2102      	movs	r1, #2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 f925 	bl	8005e50 <RCCEx_PLLSAI2_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c0a:	7cfb      	ldrb	r3, [r7, #19]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c2e:	490d      	ldr	r1, [pc, #52]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c42:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c52:	4904      	ldr	r1, [pc, #16]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40021000 	.word	0x40021000

08005c68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c76:	4b75      	ldr	r3, [pc, #468]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c82:	4b72      	ldr	r3, [pc, #456]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0203 	and.w	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d10d      	bne.n	8005cae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
       ||
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c9a:	4b6c      	ldr	r3, [pc, #432]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	091b      	lsrs	r3, r3, #4
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
       ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d047      	beq.n	8005d3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	e044      	b.n	8005d3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d018      	beq.n	8005cee <RCCEx_PLLSAI1_Config+0x86>
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d825      	bhi.n	8005d0c <RCCEx_PLLSAI1_Config+0xa4>
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d002      	beq.n	8005cca <RCCEx_PLLSAI1_Config+0x62>
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d009      	beq.n	8005cdc <RCCEx_PLLSAI1_Config+0x74>
 8005cc8:	e020      	b.n	8005d0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cca:	4b60      	ldr	r3, [pc, #384]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d11d      	bne.n	8005d12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cda:	e01a      	b.n	8005d12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cdc:	4b5b      	ldr	r3, [pc, #364]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d116      	bne.n	8005d16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cec:	e013      	b.n	8005d16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cee:	4b57      	ldr	r3, [pc, #348]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10f      	bne.n	8005d1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cfa:	4b54      	ldr	r3, [pc, #336]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d0a:	e006      	b.n	8005d1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d10:	e004      	b.n	8005d1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10d      	bne.n	8005d3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d22:	4b4a      	ldr	r3, [pc, #296]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	430b      	orrs	r3, r1
 8005d38:	4944      	ldr	r1, [pc, #272]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d17d      	bne.n	8005e40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d44:	4b41      	ldr	r3, [pc, #260]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a40      	ldr	r2, [pc, #256]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d50:	f7fc ffd0 	bl	8002cf4 <HAL_GetTick>
 8005d54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d56:	e009      	b.n	8005d6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d58:	f7fc ffcc 	bl	8002cf4 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d902      	bls.n	8005d6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	73fb      	strb	r3, [r7, #15]
        break;
 8005d6a:	e005      	b.n	8005d78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d6c:	4b37      	ldr	r3, [pc, #220]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1ef      	bne.n	8005d58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d160      	bne.n	8005e40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d111      	bne.n	8005da8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d84:	4b31      	ldr	r3, [pc, #196]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6892      	ldr	r2, [r2, #8]
 8005d94:	0211      	lsls	r1, r2, #8
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68d2      	ldr	r2, [r2, #12]
 8005d9a:	0912      	lsrs	r2, r2, #4
 8005d9c:	0452      	lsls	r2, r2, #17
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	492a      	ldr	r1, [pc, #168]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	610b      	str	r3, [r1, #16]
 8005da6:	e027      	b.n	8005df8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d112      	bne.n	8005dd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dae:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005db6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6892      	ldr	r2, [r2, #8]
 8005dbe:	0211      	lsls	r1, r2, #8
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6912      	ldr	r2, [r2, #16]
 8005dc4:	0852      	lsrs	r2, r2, #1
 8005dc6:	3a01      	subs	r2, #1
 8005dc8:	0552      	lsls	r2, r2, #21
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	491f      	ldr	r1, [pc, #124]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]
 8005dd2:	e011      	b.n	8005df8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dd4:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ddc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6892      	ldr	r2, [r2, #8]
 8005de4:	0211      	lsls	r1, r2, #8
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6952      	ldr	r2, [r2, #20]
 8005dea:	0852      	lsrs	r2, r2, #1
 8005dec:	3a01      	subs	r2, #1
 8005dee:	0652      	lsls	r2, r2, #25
 8005df0:	430a      	orrs	r2, r1
 8005df2:	4916      	ldr	r1, [pc, #88]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005df8:	4b14      	ldr	r3, [pc, #80]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e04:	f7fc ff76 	bl	8002cf4 <HAL_GetTick>
 8005e08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e0a:	e009      	b.n	8005e20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e0c:	f7fc ff72 	bl	8002cf4 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d902      	bls.n	8005e20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	73fb      	strb	r3, [r7, #15]
          break;
 8005e1e:	e005      	b.n	8005e2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0ef      	beq.n	8005e0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e32:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	4904      	ldr	r1, [pc, #16]	; (8005e4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40021000 	.word	0x40021000

08005e50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e5e:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d018      	beq.n	8005e9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e6a:	4b67      	ldr	r3, [pc, #412]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0203 	and.w	r2, r3, #3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d10d      	bne.n	8005e96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e82:	4b61      	ldr	r3, [pc, #388]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	091b      	lsrs	r3, r3, #4
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
       ||
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d047      	beq.n	8005f26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	e044      	b.n	8005f26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d018      	beq.n	8005ed6 <RCCEx_PLLSAI2_Config+0x86>
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d825      	bhi.n	8005ef4 <RCCEx_PLLSAI2_Config+0xa4>
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d002      	beq.n	8005eb2 <RCCEx_PLLSAI2_Config+0x62>
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d009      	beq.n	8005ec4 <RCCEx_PLLSAI2_Config+0x74>
 8005eb0:	e020      	b.n	8005ef4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eb2:	4b55      	ldr	r3, [pc, #340]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d11d      	bne.n	8005efa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ec2:	e01a      	b.n	8005efa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ec4:	4b50      	ldr	r3, [pc, #320]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d116      	bne.n	8005efe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed4:	e013      	b.n	8005efe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ed6:	4b4c      	ldr	r3, [pc, #304]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10f      	bne.n	8005f02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ee2:	4b49      	ldr	r3, [pc, #292]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ef2:	e006      	b.n	8005f02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef8:	e004      	b.n	8005f04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005efa:	bf00      	nop
 8005efc:	e002      	b.n	8005f04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f02:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10d      	bne.n	8005f26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f0a:	4b3f      	ldr	r3, [pc, #252]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	4939      	ldr	r1, [pc, #228]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d167      	bne.n	8005ffc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f2c:	4b36      	ldr	r3, [pc, #216]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a35      	ldr	r2, [pc, #212]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f38:	f7fc fedc 	bl	8002cf4 <HAL_GetTick>
 8005f3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f3e:	e009      	b.n	8005f54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f40:	f7fc fed8 	bl	8002cf4 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d902      	bls.n	8005f54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	73fb      	strb	r3, [r7, #15]
        break;
 8005f52:	e005      	b.n	8005f60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f54:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ef      	bne.n	8005f40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d14a      	bne.n	8005ffc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d111      	bne.n	8005f90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f6c:	4b26      	ldr	r3, [pc, #152]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6892      	ldr	r2, [r2, #8]
 8005f7c:	0211      	lsls	r1, r2, #8
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68d2      	ldr	r2, [r2, #12]
 8005f82:	0912      	lsrs	r2, r2, #4
 8005f84:	0452      	lsls	r2, r2, #17
 8005f86:	430a      	orrs	r2, r1
 8005f88:	491f      	ldr	r1, [pc, #124]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	614b      	str	r3, [r1, #20]
 8005f8e:	e011      	b.n	8005fb4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f90:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6892      	ldr	r2, [r2, #8]
 8005fa0:	0211      	lsls	r1, r2, #8
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6912      	ldr	r2, [r2, #16]
 8005fa6:	0852      	lsrs	r2, r2, #1
 8005fa8:	3a01      	subs	r2, #1
 8005faa:	0652      	lsls	r2, r2, #25
 8005fac:	430a      	orrs	r2, r1
 8005fae:	4916      	ldr	r1, [pc, #88]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fb4:	4b14      	ldr	r3, [pc, #80]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a13      	ldr	r2, [pc, #76]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc0:	f7fc fe98 	bl	8002cf4 <HAL_GetTick>
 8005fc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fc6:	e009      	b.n	8005fdc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fc8:	f7fc fe94 	bl	8002cf4 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d902      	bls.n	8005fdc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	73fb      	strb	r3, [r7, #15]
          break;
 8005fda:	e005      	b.n	8005fe8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0ef      	beq.n	8005fc8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fee:	4b06      	ldr	r3, [pc, #24]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	4904      	ldr	r1, [pc, #16]	; (8006008 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40021000 	.word	0x40021000

0800600c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e095      	b.n	800614a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d108      	bne.n	8006038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800602e:	d009      	beq.n	8006044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	61da      	str	r2, [r3, #28]
 8006036:	e005      	b.n	8006044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fc fa74 	bl	800254c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006084:	d902      	bls.n	800608c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e002      	b.n	8006092 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800608c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006090:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800609a:	d007      	beq.n	80060ac <HAL_SPI_Init+0xa0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060a4:	d002      	beq.n	80060ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ee:	ea42 0103 	orr.w	r1, r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	0c1b      	lsrs	r3, r3, #16
 8006108:	f003 0204 	and.w	r2, r3, #4
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	f003 0310 	and.w	r3, r3, #16
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006128:	ea42 0103 	orr.w	r1, r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b088      	sub	sp, #32
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	4613      	mov	r3, r2
 8006160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_SPI_Transmit+0x22>
 8006170:	2302      	movs	r3, #2
 8006172:	e158      	b.n	8006426 <HAL_SPI_Transmit+0x2d4>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800617c:	f7fc fdba 	bl	8002cf4 <HAL_GetTick>
 8006180:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	d002      	beq.n	8006198 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006192:	2302      	movs	r3, #2
 8006194:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006196:	e13d      	b.n	8006414 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_SPI_Transmit+0x52>
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061a8:	e134      	b.n	8006414 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2203      	movs	r2, #3
 80061ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f4:	d10f      	bne.n	8006216 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006204:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006214:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b40      	cmp	r3, #64	; 0x40
 8006222:	d007      	beq.n	8006234 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006232:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800623c:	d94b      	bls.n	80062d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_SPI_Transmit+0xfa>
 8006246:	8afb      	ldrh	r3, [r7, #22]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d13e      	bne.n	80062ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	881a      	ldrh	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	1c9a      	adds	r2, r3, #2
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006270:	e02b      	b.n	80062ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	d112      	bne.n	80062a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	881a      	ldrh	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	1c9a      	adds	r2, r3, #2
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062a4:	e011      	b.n	80062ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062a6:	f7fc fd25 	bl	8002cf4 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d803      	bhi.n	80062be <HAL_SPI_Transmit+0x16c>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062bc:	d102      	bne.n	80062c4 <HAL_SPI_Transmit+0x172>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d102      	bne.n	80062ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062c8:	e0a4      	b.n	8006414 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1ce      	bne.n	8006272 <HAL_SPI_Transmit+0x120>
 80062d4:	e07c      	b.n	80063d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_SPI_Transmit+0x192>
 80062de:	8afb      	ldrh	r3, [r7, #22]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d170      	bne.n	80063c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d912      	bls.n	8006314 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	881a      	ldrh	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	1c9a      	adds	r2, r3, #2
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b02      	subs	r3, #2
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006312:	e058      	b.n	80063c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800633a:	e044      	b.n	80063c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b02      	cmp	r3, #2
 8006348:	d12b      	bne.n	80063a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	d912      	bls.n	800637a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	881a      	ldrh	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b02      	subs	r3, #2
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006378:	e025      	b.n	80063c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	7812      	ldrb	r2, [r2, #0]
 8006386:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063a0:	e011      	b.n	80063c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a2:	f7fc fca7 	bl	8002cf4 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d803      	bhi.n	80063ba <HAL_SPI_Transmit+0x268>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b8:	d102      	bne.n	80063c0 <HAL_SPI_Transmit+0x26e>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063c4:	e026      	b.n	8006414 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1b5      	bne.n	800633c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fb57 	bl	8006a88 <SPI_EndRxTxTransaction>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063ee:	2300      	movs	r3, #0
 80063f0:	613b      	str	r3, [r7, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	613b      	str	r3, [r7, #16]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e000      	b.n	8006414 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006412:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006424:	7ffb      	ldrb	r3, [r7, #31]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3720      	adds	r7, #32
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b08a      	sub	sp, #40	; 0x28
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800643c:	2301      	movs	r3, #1
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x26>
 8006450:	2302      	movs	r3, #2
 8006452:	e1fb      	b.n	800684c <HAL_SPI_TransmitReceive+0x41e>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800645c:	f7fc fc4a 	bl	8002cf4 <HAL_GetTick>
 8006460:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006468:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006470:	887b      	ldrh	r3, [r7, #2]
 8006472:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006474:	887b      	ldrh	r3, [r7, #2]
 8006476:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006478:	7efb      	ldrb	r3, [r7, #27]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d00e      	beq.n	800649c <HAL_SPI_TransmitReceive+0x6e>
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006484:	d106      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x66>
 800648e:	7efb      	ldrb	r3, [r7, #27]
 8006490:	2b04      	cmp	r3, #4
 8006492:	d003      	beq.n	800649c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006494:	2302      	movs	r3, #2
 8006496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800649a:	e1cd      	b.n	8006838 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x80>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x80>
 80064a8:	887b      	ldrh	r3, [r7, #2]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d103      	bne.n	80064b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80064b4:	e1c0      	b.n	8006838 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d003      	beq.n	80064ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2205      	movs	r2, #5
 80064c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	887a      	ldrh	r2, [r7, #2]
 80064da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	887a      	ldrh	r2, [r7, #2]
 80064e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	887a      	ldrh	r2, [r7, #2]
 80064f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	887a      	ldrh	r2, [r7, #2]
 80064f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800650c:	d802      	bhi.n	8006514 <HAL_SPI_TransmitReceive+0xe6>
 800650e:	8a3b      	ldrh	r3, [r7, #16]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d908      	bls.n	8006526 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006522:	605a      	str	r2, [r3, #4]
 8006524:	e007      	b.n	8006536 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006534:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d007      	beq.n	8006554 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006552:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800655c:	d97c      	bls.n	8006658 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_SPI_TransmitReceive+0x13e>
 8006566:	8a7b      	ldrh	r3, [r7, #18]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d169      	bne.n	8006640 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	881a      	ldrh	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	1c9a      	adds	r2, r3, #2
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006590:	e056      	b.n	8006640 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b02      	cmp	r3, #2
 800659e:	d11b      	bne.n	80065d8 <HAL_SPI_TransmitReceive+0x1aa>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d016      	beq.n	80065d8 <HAL_SPI_TransmitReceive+0x1aa>
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d113      	bne.n	80065d8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	881a      	ldrh	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	1c9a      	adds	r2, r3, #2
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d11c      	bne.n	8006620 <HAL_SPI_TransmitReceive+0x1f2>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	b292      	uxth	r2, r2
 80065fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	1c9a      	adds	r2, r3, #2
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800661c:	2301      	movs	r3, #1
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006620:	f7fc fb68 	bl	8002cf4 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800662c:	429a      	cmp	r2, r3
 800662e:	d807      	bhi.n	8006640 <HAL_SPI_TransmitReceive+0x212>
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006636:	d003      	beq.n	8006640 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800663e:	e0fb      	b.n	8006838 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1a3      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x164>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d19d      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x164>
 8006656:	e0df      	b.n	8006818 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_SPI_TransmitReceive+0x23a>
 8006660:	8a7b      	ldrh	r3, [r7, #18]
 8006662:	2b01      	cmp	r3, #1
 8006664:	f040 80cb 	bne.w	80067fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b01      	cmp	r3, #1
 8006670:	d912      	bls.n	8006698 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	881a      	ldrh	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	1c9a      	adds	r2, r3, #2
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b02      	subs	r3, #2
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006696:	e0b2      	b.n	80067fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	7812      	ldrb	r2, [r2, #0]
 80066a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066be:	e09e      	b.n	80067fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d134      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x30a>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d02f      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x30a>
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d12c      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d912      	bls.n	800670e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	881a      	ldrh	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	1c9a      	adds	r2, r3, #2
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b02      	subs	r3, #2
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800670c:	e012      	b.n	8006734 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	330c      	adds	r3, #12
 8006718:	7812      	ldrb	r2, [r2, #0]
 800671a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b01      	cmp	r3, #1
 8006744:	d148      	bne.n	80067d8 <HAL_SPI_TransmitReceive+0x3aa>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d042      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b01      	cmp	r3, #1
 800675c:	d923      	bls.n	80067a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	b292      	uxth	r2, r2
 800676a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	1c9a      	adds	r2, r3, #2
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b02      	subs	r3, #2
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	d81f      	bhi.n	80067d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	e016      	b.n	80067d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f103 020c 	add.w	r2, r3, #12
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067d4:	2301      	movs	r3, #1
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067d8:	f7fc fa8c 	bl	8002cf4 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d803      	bhi.n	80067f0 <HAL_SPI_TransmitReceive+0x3c2>
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ee:	d102      	bne.n	80067f6 <HAL_SPI_TransmitReceive+0x3c8>
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d103      	bne.n	80067fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80067fc:	e01c      	b.n	8006838 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	f47f af5b 	bne.w	80066c0 <HAL_SPI_TransmitReceive+0x292>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	f47f af54 	bne.w	80066c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f933 	bl	8006a88 <SPI_EndRxTxTransaction>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d006      	beq.n	8006836 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	661a      	str	r2, [r3, #96]	; 0x60
 8006834:	e000      	b.n	8006838 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800684c:	4618      	mov	r0, r3
 800684e:	3728      	adds	r7, #40	; 0x28
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006864:	f7fc fa46 	bl	8002cf4 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	4413      	add	r3, r2
 8006872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006874:	f7fc fa3e 	bl	8002cf4 <HAL_GetTick>
 8006878:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800687a:	4b39      	ldr	r3, [pc, #228]	; (8006960 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	015b      	lsls	r3, r3, #5
 8006880:	0d1b      	lsrs	r3, r3, #20
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688a:	e054      	b.n	8006936 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006892:	d050      	beq.n	8006936 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006894:	f7fc fa2e 	bl	8002cf4 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d902      	bls.n	80068aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d13d      	bne.n	8006926 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c2:	d111      	bne.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068cc:	d004      	beq.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d6:	d107      	bne.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f0:	d10f      	bne.n	8006912 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e017      	b.n	8006956 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	3b01      	subs	r3, #1
 8006934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4013      	ands	r3, r2
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	bf0c      	ite	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	2300      	movne	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	429a      	cmp	r2, r3
 8006952:	d19b      	bne.n	800688c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000094 	.word	0x20000094

08006964 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006972:	f7fc f9bf 	bl	8002cf4 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	4413      	add	r3, r2
 8006980:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006982:	f7fc f9b7 	bl	8002cf4 <HAL_GetTick>
 8006986:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006988:	4b3e      	ldr	r3, [pc, #248]	; (8006a84 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	00da      	lsls	r2, r3, #3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	0d1b      	lsrs	r3, r3, #20
 8006998:	69fa      	ldr	r2, [r7, #28]
 800699a:	fb02 f303 	mul.w	r3, r2, r3
 800699e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80069a0:	e062      	b.n	8006a68 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069a8:	d109      	bne.n	80069be <SPI_WaitFifoStateUntilTimeout+0x5a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80069bc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069c4:	d050      	beq.n	8006a68 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069c6:	f7fc f995 	bl	8002cf4 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d902      	bls.n	80069dc <SPI_WaitFifoStateUntilTimeout+0x78>
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d13d      	bne.n	8006a58 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f4:	d111      	bne.n	8006a1a <SPI_WaitFifoStateUntilTimeout+0xb6>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fe:	d004      	beq.n	8006a0a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a08:	d107      	bne.n	8006a1a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a22:	d10f      	bne.n	8006a44 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e010      	b.n	8006a7a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d194      	bne.n	80069a2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3720      	adds	r7, #32
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000094 	.word	0x20000094

08006a88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff ff5f 	bl	8006964 <SPI_WaitFifoStateUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab0:	f043 0220 	orr.w	r2, r3, #32
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e027      	b.n	8006b0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2180      	movs	r1, #128	; 0x80
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff fec4 	bl	8006854 <SPI_WaitFlagStateUntilTimeout>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e014      	b.n	8006b0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff ff38 	bl	8006964 <SPI_WaitFifoStateUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e000      	b.n	8006b0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e049      	b.n	8006bba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fb fdae 	bl	800269c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	4619      	mov	r1, r3
 8006b52:	4610      	mov	r0, r2
 8006b54:	f000 fd7e 	bl	8007654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d001      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e04f      	b.n	8006c7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a23      	ldr	r2, [pc, #140]	; (8006c88 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01d      	beq.n	8006c3a <HAL_TIM_Base_Start_IT+0x76>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c06:	d018      	beq.n	8006c3a <HAL_TIM_Base_Start_IT+0x76>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1f      	ldr	r2, [pc, #124]	; (8006c8c <HAL_TIM_Base_Start_IT+0xc8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <HAL_TIM_Base_Start_IT+0x76>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00e      	beq.n	8006c3a <HAL_TIM_Base_Start_IT+0x76>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1c      	ldr	r2, [pc, #112]	; (8006c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <HAL_TIM_Base_Start_IT+0x76>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <HAL_TIM_Base_Start_IT+0x76>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d115      	bne.n	8006c66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c42:	4013      	ands	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b06      	cmp	r3, #6
 8006c4a:	d015      	beq.n	8006c78 <HAL_TIM_Base_Start_IT+0xb4>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c52:	d011      	beq.n	8006c78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c64:	e008      	b.n	8006c78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e000      	b.n	8006c7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40013400 	.word	0x40013400
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	00010007 	.word	0x00010007

08006ca4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e049      	b.n	8006d4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fb fc9e 	bl	800260c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f000 fcb6 	bl	8007654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d109      	bne.n	8006d78 <HAL_TIM_PWM_Start_IT+0x24>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	bf14      	ite	ne
 8006d70:	2301      	movne	r3, #1
 8006d72:	2300      	moveq	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	e03c      	b.n	8006df2 <HAL_TIM_PWM_Start_IT+0x9e>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d109      	bne.n	8006d92 <HAL_TIM_PWM_Start_IT+0x3e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	bf14      	ite	ne
 8006d8a:	2301      	movne	r3, #1
 8006d8c:	2300      	moveq	r3, #0
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	e02f      	b.n	8006df2 <HAL_TIM_PWM_Start_IT+0x9e>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d109      	bne.n	8006dac <HAL_TIM_PWM_Start_IT+0x58>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	bf14      	ite	ne
 8006da4:	2301      	movne	r3, #1
 8006da6:	2300      	moveq	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	e022      	b.n	8006df2 <HAL_TIM_PWM_Start_IT+0x9e>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b0c      	cmp	r3, #12
 8006db0:	d109      	bne.n	8006dc6 <HAL_TIM_PWM_Start_IT+0x72>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	bf14      	ite	ne
 8006dbe:	2301      	movne	r3, #1
 8006dc0:	2300      	moveq	r3, #0
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	e015      	b.n	8006df2 <HAL_TIM_PWM_Start_IT+0x9e>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d109      	bne.n	8006de0 <HAL_TIM_PWM_Start_IT+0x8c>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	bf14      	ite	ne
 8006dd8:	2301      	movne	r3, #1
 8006dda:	2300      	moveq	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	e008      	b.n	8006df2 <HAL_TIM_PWM_Start_IT+0x9e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	bf14      	ite	ne
 8006dec:	2301      	movne	r3, #1
 8006dee:	2300      	moveq	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e0e2      	b.n	8006fc0 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d104      	bne.n	8006e0a <HAL_TIM_PWM_Start_IT+0xb6>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e08:	e023      	b.n	8006e52 <HAL_TIM_PWM_Start_IT+0xfe>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d104      	bne.n	8006e1a <HAL_TIM_PWM_Start_IT+0xc6>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e18:	e01b      	b.n	8006e52 <HAL_TIM_PWM_Start_IT+0xfe>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d104      	bne.n	8006e2a <HAL_TIM_PWM_Start_IT+0xd6>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e28:	e013      	b.n	8006e52 <HAL_TIM_PWM_Start_IT+0xfe>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b0c      	cmp	r3, #12
 8006e2e:	d104      	bne.n	8006e3a <HAL_TIM_PWM_Start_IT+0xe6>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e38:	e00b      	b.n	8006e52 <HAL_TIM_PWM_Start_IT+0xfe>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b10      	cmp	r3, #16
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_PWM_Start_IT+0xf6>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e48:	e003      	b.n	8006e52 <HAL_TIM_PWM_Start_IT+0xfe>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	d841      	bhi.n	8006edc <HAL_TIM_PWM_Start_IT+0x188>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <HAL_TIM_PWM_Start_IT+0x10c>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e95 	.word	0x08006e95
 8006e64:	08006edd 	.word	0x08006edd
 8006e68:	08006edd 	.word	0x08006edd
 8006e6c:	08006edd 	.word	0x08006edd
 8006e70:	08006ea7 	.word	0x08006ea7
 8006e74:	08006edd 	.word	0x08006edd
 8006e78:	08006edd 	.word	0x08006edd
 8006e7c:	08006edd 	.word	0x08006edd
 8006e80:	08006eb9 	.word	0x08006eb9
 8006e84:	08006edd 	.word	0x08006edd
 8006e88:	08006edd 	.word	0x08006edd
 8006e8c:	08006edd 	.word	0x08006edd
 8006e90:	08006ecb 	.word	0x08006ecb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0202 	orr.w	r2, r2, #2
 8006ea2:	60da      	str	r2, [r3, #12]
      break;
 8006ea4:	e01b      	b.n	8006ede <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0204 	orr.w	r2, r2, #4
 8006eb4:	60da      	str	r2, [r3, #12]
      break;
 8006eb6:	e012      	b.n	8006ede <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0208 	orr.w	r2, r2, #8
 8006ec6:	60da      	str	r2, [r3, #12]
      break;
 8006ec8:	e009      	b.n	8006ede <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0210 	orr.w	r2, r2, #16
 8006ed8:	60da      	str	r2, [r3, #12]
      break;
 8006eda:	e000      	b.n	8006ede <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8006edc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 ff24 	bl	8007d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a35      	ldr	r2, [pc, #212]	; (8006fc8 <HAL_TIM_PWM_Start_IT+0x274>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <HAL_TIM_PWM_Start_IT+0x1ca>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a34      	ldr	r2, [pc, #208]	; (8006fcc <HAL_TIM_PWM_Start_IT+0x278>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_TIM_PWM_Start_IT+0x1ca>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a32      	ldr	r2, [pc, #200]	; (8006fd0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_TIM_PWM_Start_IT+0x1ca>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a31      	ldr	r2, [pc, #196]	; (8006fd4 <HAL_TIM_PWM_Start_IT+0x280>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_TIM_PWM_Start_IT+0x1ca>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a2f      	ldr	r2, [pc, #188]	; (8006fd8 <HAL_TIM_PWM_Start_IT+0x284>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d101      	bne.n	8006f22 <HAL_TIM_PWM_Start_IT+0x1ce>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d007      	beq.n	8006f38 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a22      	ldr	r2, [pc, #136]	; (8006fc8 <HAL_TIM_PWM_Start_IT+0x274>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d01d      	beq.n	8006f7e <HAL_TIM_PWM_Start_IT+0x22a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4a:	d018      	beq.n	8006f7e <HAL_TIM_PWM_Start_IT+0x22a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a22      	ldr	r2, [pc, #136]	; (8006fdc <HAL_TIM_PWM_Start_IT+0x288>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d013      	beq.n	8006f7e <HAL_TIM_PWM_Start_IT+0x22a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a21      	ldr	r2, [pc, #132]	; (8006fe0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00e      	beq.n	8006f7e <HAL_TIM_PWM_Start_IT+0x22a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1f      	ldr	r2, [pc, #124]	; (8006fe4 <HAL_TIM_PWM_Start_IT+0x290>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <HAL_TIM_PWM_Start_IT+0x22a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <HAL_TIM_PWM_Start_IT+0x278>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_TIM_PWM_Start_IT+0x22a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d115      	bne.n	8006faa <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <HAL_TIM_PWM_Start_IT+0x294>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b06      	cmp	r3, #6
 8006f8e:	d015      	beq.n	8006fbc <HAL_TIM_PWM_Start_IT+0x268>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f96:	d011      	beq.n	8006fbc <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa8:	e008      	b.n	8006fbc <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	e000      	b.n	8006fbe <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40013400 	.word	0x40013400
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	40000800 	.word	0x40000800
 8006fe4:	40000c00 	.word	0x40000c00
 8006fe8:	00010007 	.word	0x00010007

08006fec <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b0c      	cmp	r3, #12
 8006ffa:	d841      	bhi.n	8007080 <HAL_TIM_PWM_Stop_IT+0x94>
 8006ffc:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <HAL_TIM_PWM_Stop_IT+0x18>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007039 	.word	0x08007039
 8007008:	08007081 	.word	0x08007081
 800700c:	08007081 	.word	0x08007081
 8007010:	08007081 	.word	0x08007081
 8007014:	0800704b 	.word	0x0800704b
 8007018:	08007081 	.word	0x08007081
 800701c:	08007081 	.word	0x08007081
 8007020:	08007081 	.word	0x08007081
 8007024:	0800705d 	.word	0x0800705d
 8007028:	08007081 	.word	0x08007081
 800702c:	08007081 	.word	0x08007081
 8007030:	08007081 	.word	0x08007081
 8007034:	0800706f 	.word	0x0800706f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0202 	bic.w	r2, r2, #2
 8007046:	60da      	str	r2, [r3, #12]
      break;
 8007048:	e01b      	b.n	8007082 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0204 	bic.w	r2, r2, #4
 8007058:	60da      	str	r2, [r3, #12]
      break;
 800705a:	e012      	b.n	8007082 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0208 	bic.w	r2, r2, #8
 800706a:	60da      	str	r2, [r3, #12]
      break;
 800706c:	e009      	b.n	8007082 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0210 	bic.w	r2, r2, #16
 800707c:	60da      	str	r2, [r3, #12]
      break;
 800707e:	e000      	b.n	8007082 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8007080:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fe52 	bl	8007d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a3e      	ldr	r2, [pc, #248]	; (8007190 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <HAL_TIM_PWM_Stop_IT+0xd6>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a3d      	ldr	r2, [pc, #244]	; (8007194 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00e      	beq.n	80070c2 <HAL_TIM_PWM_Stop_IT+0xd6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a3b      	ldr	r2, [pc, #236]	; (8007198 <HAL_TIM_PWM_Stop_IT+0x1ac>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d009      	beq.n	80070c2 <HAL_TIM_PWM_Stop_IT+0xd6>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a3a      	ldr	r2, [pc, #232]	; (800719c <HAL_TIM_PWM_Stop_IT+0x1b0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <HAL_TIM_PWM_Stop_IT+0xd6>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a38      	ldr	r2, [pc, #224]	; (80071a0 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_PWM_Stop_IT+0xda>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <HAL_TIM_PWM_Stop_IT+0xdc>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d017      	beq.n	80070fc <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10f      	bne.n	80070fc <HAL_TIM_PWM_Stop_IT+0x110>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	f240 4344 	movw	r3, #1092	; 0x444
 80070e6:	4013      	ands	r3, r2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d107      	bne.n	80070fc <HAL_TIM_PWM_Stop_IT+0x110>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a1a      	ldr	r2, [r3, #32]
 8007102:	f241 1311 	movw	r3, #4369	; 0x1111
 8007106:	4013      	ands	r3, r2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10f      	bne.n	800712c <HAL_TIM_PWM_Stop_IT+0x140>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6a1a      	ldr	r2, [r3, #32]
 8007112:	f240 4344 	movw	r3, #1092	; 0x444
 8007116:	4013      	ands	r3, r2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <HAL_TIM_PWM_Stop_IT+0x140>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <HAL_TIM_PWM_Stop_IT+0x150>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800713a:	e023      	b.n	8007184 <HAL_TIM_PWM_Stop_IT+0x198>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d104      	bne.n	800714c <HAL_TIM_PWM_Stop_IT+0x160>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800714a:	e01b      	b.n	8007184 <HAL_TIM_PWM_Stop_IT+0x198>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b08      	cmp	r3, #8
 8007150:	d104      	bne.n	800715c <HAL_TIM_PWM_Stop_IT+0x170>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800715a:	e013      	b.n	8007184 <HAL_TIM_PWM_Stop_IT+0x198>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b0c      	cmp	r3, #12
 8007160:	d104      	bne.n	800716c <HAL_TIM_PWM_Stop_IT+0x180>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800716a:	e00b      	b.n	8007184 <HAL_TIM_PWM_Stop_IT+0x198>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b10      	cmp	r3, #16
 8007170:	d104      	bne.n	800717c <HAL_TIM_PWM_Stop_IT+0x190>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800717a:	e003      	b.n	8007184 <HAL_TIM_PWM_Stop_IT+0x198>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40013400 	.word	0x40013400
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800

080071a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d122      	bne.n	8007200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d11b      	bne.n	8007200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0202 	mvn.w	r2, #2
 80071d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa16 	bl	8007618 <HAL_TIM_IC_CaptureCallback>
 80071ec:	e005      	b.n	80071fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa08 	bl	8007604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fa19 	bl	800762c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b04      	cmp	r3, #4
 800720c:	d122      	bne.n	8007254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b04      	cmp	r3, #4
 800721a:	d11b      	bne.n	8007254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0204 	mvn.w	r2, #4
 8007224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9ec 	bl	8007618 <HAL_TIM_IC_CaptureCallback>
 8007240:	e005      	b.n	800724e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f9de 	bl	8007604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f9ef 	bl	800762c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b08      	cmp	r3, #8
 8007260:	d122      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b08      	cmp	r3, #8
 800726e:	d11b      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0208 	mvn.w	r2, #8
 8007278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2204      	movs	r2, #4
 800727e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9c2 	bl	8007618 <HAL_TIM_IC_CaptureCallback>
 8007294:	e005      	b.n	80072a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9b4 	bl	8007604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f9c5 	bl	800762c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b10      	cmp	r3, #16
 80072b4:	d122      	bne.n	80072fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	d11b      	bne.n	80072fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0210 	mvn.w	r2, #16
 80072cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2208      	movs	r2, #8
 80072d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f998 	bl	8007618 <HAL_TIM_IC_CaptureCallback>
 80072e8:	e005      	b.n	80072f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f98a 	bl	8007604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f99b 	bl	800762c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b01      	cmp	r3, #1
 8007308:	d10e      	bne.n	8007328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b01      	cmp	r3, #1
 8007316:	d107      	bne.n	8007328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0201 	mvn.w	r2, #1
 8007320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fa fb5c 	bl	80019e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d10e      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007340:	2b80      	cmp	r3, #128	; 0x80
 8007342:	d107      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800734c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fe26 	bl	8007fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007362:	d10e      	bne.n	8007382 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736e:	2b80      	cmp	r3, #128	; 0x80
 8007370:	d107      	bne.n	8007382 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800737a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fe19 	bl	8007fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d10e      	bne.n	80073ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d107      	bne.n	80073ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f949 	bl	8007640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d10e      	bne.n	80073da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d107      	bne.n	80073da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0220 	mvn.w	r2, #32
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fdd9 	bl	8007f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d101      	bne.n	80073fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e0fd      	b.n	80075fa <HAL_TIM_PWM_ConfigChannel+0x216>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b14      	cmp	r3, #20
 800740a:	f200 80f0 	bhi.w	80075ee <HAL_TIM_PWM_ConfigChannel+0x20a>
 800740e:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	08007469 	.word	0x08007469
 8007418:	080075ef 	.word	0x080075ef
 800741c:	080075ef 	.word	0x080075ef
 8007420:	080075ef 	.word	0x080075ef
 8007424:	080074a9 	.word	0x080074a9
 8007428:	080075ef 	.word	0x080075ef
 800742c:	080075ef 	.word	0x080075ef
 8007430:	080075ef 	.word	0x080075ef
 8007434:	080074eb 	.word	0x080074eb
 8007438:	080075ef 	.word	0x080075ef
 800743c:	080075ef 	.word	0x080075ef
 8007440:	080075ef 	.word	0x080075ef
 8007444:	0800752b 	.word	0x0800752b
 8007448:	080075ef 	.word	0x080075ef
 800744c:	080075ef 	.word	0x080075ef
 8007450:	080075ef 	.word	0x080075ef
 8007454:	0800756d 	.word	0x0800756d
 8007458:	080075ef 	.word	0x080075ef
 800745c:	080075ef 	.word	0x080075ef
 8007460:	080075ef 	.word	0x080075ef
 8007464:	080075ad 	.word	0x080075ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	4618      	mov	r0, r3
 8007470:	f000 f98a 	bl	8007788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699a      	ldr	r2, [r3, #24]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0208 	orr.w	r2, r2, #8
 8007482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0204 	bic.w	r2, r2, #4
 8007492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6999      	ldr	r1, [r3, #24]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	691a      	ldr	r2, [r3, #16]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	619a      	str	r2, [r3, #24]
      break;
 80074a6:	e0a3      	b.n	80075f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 f9fa 	bl	80078a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6999      	ldr	r1, [r3, #24]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	021a      	lsls	r2, r3, #8
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	619a      	str	r2, [r3, #24]
      break;
 80074e8:	e082      	b.n	80075f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68b9      	ldr	r1, [r7, #8]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fa63 	bl	80079bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69da      	ldr	r2, [r3, #28]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0208 	orr.w	r2, r2, #8
 8007504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69da      	ldr	r2, [r3, #28]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0204 	bic.w	r2, r2, #4
 8007514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69d9      	ldr	r1, [r3, #28]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	61da      	str	r2, [r3, #28]
      break;
 8007528:	e062      	b.n	80075f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 facb 	bl	8007acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69da      	ldr	r2, [r3, #28]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69d9      	ldr	r1, [r3, #28]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	021a      	lsls	r2, r3, #8
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	61da      	str	r2, [r3, #28]
      break;
 800756a:	e041      	b.n	80075f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fb14 	bl	8007ba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0208 	orr.w	r2, r2, #8
 8007586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0204 	bic.w	r2, r2, #4
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075aa:	e021      	b.n	80075f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fb58 	bl	8007c68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	021a      	lsls	r2, r3, #8
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075ec:	e000      	b.n	80075f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80075ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop

08007604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a40      	ldr	r2, [pc, #256]	; (8007768 <TIM_Base_SetConfig+0x114>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007672:	d00f      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a3d      	ldr	r2, [pc, #244]	; (800776c <TIM_Base_SetConfig+0x118>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00b      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a3c      	ldr	r2, [pc, #240]	; (8007770 <TIM_Base_SetConfig+0x11c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a3b      	ldr	r2, [pc, #236]	; (8007774 <TIM_Base_SetConfig+0x120>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a3a      	ldr	r2, [pc, #232]	; (8007778 <TIM_Base_SetConfig+0x124>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d108      	bne.n	80076a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a2f      	ldr	r2, [pc, #188]	; (8007768 <TIM_Base_SetConfig+0x114>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d01f      	beq.n	80076ee <TIM_Base_SetConfig+0x9a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b4:	d01b      	beq.n	80076ee <TIM_Base_SetConfig+0x9a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2c      	ldr	r2, [pc, #176]	; (800776c <TIM_Base_SetConfig+0x118>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d017      	beq.n	80076ee <TIM_Base_SetConfig+0x9a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2b      	ldr	r2, [pc, #172]	; (8007770 <TIM_Base_SetConfig+0x11c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d013      	beq.n	80076ee <TIM_Base_SetConfig+0x9a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a2a      	ldr	r2, [pc, #168]	; (8007774 <TIM_Base_SetConfig+0x120>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00f      	beq.n	80076ee <TIM_Base_SetConfig+0x9a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a29      	ldr	r2, [pc, #164]	; (8007778 <TIM_Base_SetConfig+0x124>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00b      	beq.n	80076ee <TIM_Base_SetConfig+0x9a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a28      	ldr	r2, [pc, #160]	; (800777c <TIM_Base_SetConfig+0x128>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d007      	beq.n	80076ee <TIM_Base_SetConfig+0x9a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a27      	ldr	r2, [pc, #156]	; (8007780 <TIM_Base_SetConfig+0x12c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <TIM_Base_SetConfig+0x9a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a26      	ldr	r2, [pc, #152]	; (8007784 <TIM_Base_SetConfig+0x130>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d108      	bne.n	8007700 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a10      	ldr	r2, [pc, #64]	; (8007768 <TIM_Base_SetConfig+0x114>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00f      	beq.n	800774c <TIM_Base_SetConfig+0xf8>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a12      	ldr	r2, [pc, #72]	; (8007778 <TIM_Base_SetConfig+0x124>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00b      	beq.n	800774c <TIM_Base_SetConfig+0xf8>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a11      	ldr	r2, [pc, #68]	; (800777c <TIM_Base_SetConfig+0x128>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d007      	beq.n	800774c <TIM_Base_SetConfig+0xf8>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a10      	ldr	r2, [pc, #64]	; (8007780 <TIM_Base_SetConfig+0x12c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0xf8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a0f      	ldr	r2, [pc, #60]	; (8007784 <TIM_Base_SetConfig+0x130>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d103      	bne.n	8007754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	615a      	str	r2, [r3, #20]
}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40012c00 	.word	0x40012c00
 800776c:	40000400 	.word	0x40000400
 8007770:	40000800 	.word	0x40000800
 8007774:	40000c00 	.word	0x40000c00
 8007778:	40013400 	.word	0x40013400
 800777c:	40014000 	.word	0x40014000
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800

08007788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	f023 0201 	bic.w	r2, r3, #1
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0303 	bic.w	r3, r3, #3
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f023 0302 	bic.w	r3, r3, #2
 80077d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a2c      	ldr	r2, [pc, #176]	; (8007894 <TIM_OC1_SetConfig+0x10c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d00f      	beq.n	8007808 <TIM_OC1_SetConfig+0x80>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a2b      	ldr	r2, [pc, #172]	; (8007898 <TIM_OC1_SetConfig+0x110>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00b      	beq.n	8007808 <TIM_OC1_SetConfig+0x80>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a2a      	ldr	r2, [pc, #168]	; (800789c <TIM_OC1_SetConfig+0x114>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d007      	beq.n	8007808 <TIM_OC1_SetConfig+0x80>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a29      	ldr	r2, [pc, #164]	; (80078a0 <TIM_OC1_SetConfig+0x118>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d003      	beq.n	8007808 <TIM_OC1_SetConfig+0x80>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a28      	ldr	r2, [pc, #160]	; (80078a4 <TIM_OC1_SetConfig+0x11c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d10c      	bne.n	8007822 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 0308 	bic.w	r3, r3, #8
 800780e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f023 0304 	bic.w	r3, r3, #4
 8007820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a1b      	ldr	r2, [pc, #108]	; (8007894 <TIM_OC1_SetConfig+0x10c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00f      	beq.n	800784a <TIM_OC1_SetConfig+0xc2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a1a      	ldr	r2, [pc, #104]	; (8007898 <TIM_OC1_SetConfig+0x110>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00b      	beq.n	800784a <TIM_OC1_SetConfig+0xc2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a19      	ldr	r2, [pc, #100]	; (800789c <TIM_OC1_SetConfig+0x114>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d007      	beq.n	800784a <TIM_OC1_SetConfig+0xc2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a18      	ldr	r2, [pc, #96]	; (80078a0 <TIM_OC1_SetConfig+0x118>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d003      	beq.n	800784a <TIM_OC1_SetConfig+0xc2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a17      	ldr	r2, [pc, #92]	; (80078a4 <TIM_OC1_SetConfig+0x11c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d111      	bne.n	800786e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	621a      	str	r2, [r3, #32]
}
 8007888:	bf00      	nop
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	40012c00 	.word	0x40012c00
 8007898:	40013400 	.word	0x40013400
 800789c:	40014000 	.word	0x40014000
 80078a0:	40014400 	.word	0x40014400
 80078a4:	40014800 	.word	0x40014800

080078a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f023 0210 	bic.w	r2, r3, #16
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f023 0320 	bic.w	r3, r3, #32
 80078f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a28      	ldr	r2, [pc, #160]	; (80079a8 <TIM_OC2_SetConfig+0x100>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d003      	beq.n	8007914 <TIM_OC2_SetConfig+0x6c>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a27      	ldr	r2, [pc, #156]	; (80079ac <TIM_OC2_SetConfig+0x104>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d10d      	bne.n	8007930 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800791a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800792e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a1d      	ldr	r2, [pc, #116]	; (80079a8 <TIM_OC2_SetConfig+0x100>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00f      	beq.n	8007958 <TIM_OC2_SetConfig+0xb0>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a1c      	ldr	r2, [pc, #112]	; (80079ac <TIM_OC2_SetConfig+0x104>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00b      	beq.n	8007958 <TIM_OC2_SetConfig+0xb0>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a1b      	ldr	r2, [pc, #108]	; (80079b0 <TIM_OC2_SetConfig+0x108>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d007      	beq.n	8007958 <TIM_OC2_SetConfig+0xb0>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a1a      	ldr	r2, [pc, #104]	; (80079b4 <TIM_OC2_SetConfig+0x10c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d003      	beq.n	8007958 <TIM_OC2_SetConfig+0xb0>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a19      	ldr	r2, [pc, #100]	; (80079b8 <TIM_OC2_SetConfig+0x110>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d113      	bne.n	8007980 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800795e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	4313      	orrs	r3, r2
 800797e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	621a      	str	r2, [r3, #32]
}
 800799a:	bf00      	nop
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40013400 	.word	0x40013400
 80079b0:	40014000 	.word	0x40014000
 80079b4:	40014400 	.word	0x40014400
 80079b8:	40014800 	.word	0x40014800

080079bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0303 	bic.w	r3, r3, #3
 80079f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a27      	ldr	r2, [pc, #156]	; (8007ab8 <TIM_OC3_SetConfig+0xfc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d003      	beq.n	8007a26 <TIM_OC3_SetConfig+0x6a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a26      	ldr	r2, [pc, #152]	; (8007abc <TIM_OC3_SetConfig+0x100>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d10d      	bne.n	8007a42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a1c      	ldr	r2, [pc, #112]	; (8007ab8 <TIM_OC3_SetConfig+0xfc>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00f      	beq.n	8007a6a <TIM_OC3_SetConfig+0xae>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a1b      	ldr	r2, [pc, #108]	; (8007abc <TIM_OC3_SetConfig+0x100>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00b      	beq.n	8007a6a <TIM_OC3_SetConfig+0xae>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a1a      	ldr	r2, [pc, #104]	; (8007ac0 <TIM_OC3_SetConfig+0x104>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d007      	beq.n	8007a6a <TIM_OC3_SetConfig+0xae>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a19      	ldr	r2, [pc, #100]	; (8007ac4 <TIM_OC3_SetConfig+0x108>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d003      	beq.n	8007a6a <TIM_OC3_SetConfig+0xae>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <TIM_OC3_SetConfig+0x10c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d113      	bne.n	8007a92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	621a      	str	r2, [r3, #32]
}
 8007aac:	bf00      	nop
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40013400 	.word	0x40013400
 8007ac0:	40014000 	.word	0x40014000
 8007ac4:	40014400 	.word	0x40014400
 8007ac8:	40014800 	.word	0x40014800

08007acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	031b      	lsls	r3, r3, #12
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <TIM_OC4_SetConfig+0xc0>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00f      	beq.n	8007b50 <TIM_OC4_SetConfig+0x84>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <TIM_OC4_SetConfig+0xc4>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00b      	beq.n	8007b50 <TIM_OC4_SetConfig+0x84>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <TIM_OC4_SetConfig+0xc8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d007      	beq.n	8007b50 <TIM_OC4_SetConfig+0x84>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <TIM_OC4_SetConfig+0xcc>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC4_SetConfig+0x84>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a14      	ldr	r2, [pc, #80]	; (8007b9c <TIM_OC4_SetConfig+0xd0>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d109      	bne.n	8007b64 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	019b      	lsls	r3, r3, #6
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	40012c00 	.word	0x40012c00
 8007b90:	40013400 	.word	0x40013400
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40014400 	.word	0x40014400
 8007b9c:	40014800 	.word	0x40014800

08007ba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007be4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	041b      	lsls	r3, r3, #16
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a17      	ldr	r2, [pc, #92]	; (8007c54 <TIM_OC5_SetConfig+0xb4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00f      	beq.n	8007c1a <TIM_OC5_SetConfig+0x7a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a16      	ldr	r2, [pc, #88]	; (8007c58 <TIM_OC5_SetConfig+0xb8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <TIM_OC5_SetConfig+0x7a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a15      	ldr	r2, [pc, #84]	; (8007c5c <TIM_OC5_SetConfig+0xbc>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d007      	beq.n	8007c1a <TIM_OC5_SetConfig+0x7a>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a14      	ldr	r2, [pc, #80]	; (8007c60 <TIM_OC5_SetConfig+0xc0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_OC5_SetConfig+0x7a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <TIM_OC5_SetConfig+0xc4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d109      	bne.n	8007c2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	621a      	str	r2, [r3, #32]
}
 8007c48:	bf00      	nop
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40013400 	.word	0x40013400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40014400 	.word	0x40014400
 8007c64:	40014800 	.word	0x40014800

08007c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	051b      	lsls	r3, r3, #20
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a18      	ldr	r2, [pc, #96]	; (8007d20 <TIM_OC6_SetConfig+0xb8>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d00f      	beq.n	8007ce4 <TIM_OC6_SetConfig+0x7c>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a17      	ldr	r2, [pc, #92]	; (8007d24 <TIM_OC6_SetConfig+0xbc>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00b      	beq.n	8007ce4 <TIM_OC6_SetConfig+0x7c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a16      	ldr	r2, [pc, #88]	; (8007d28 <TIM_OC6_SetConfig+0xc0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d007      	beq.n	8007ce4 <TIM_OC6_SetConfig+0x7c>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <TIM_OC6_SetConfig+0xc4>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_OC6_SetConfig+0x7c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a14      	ldr	r2, [pc, #80]	; (8007d30 <TIM_OC6_SetConfig+0xc8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d109      	bne.n	8007cf8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	029b      	lsls	r3, r3, #10
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	621a      	str	r2, [r3, #32]
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	40012c00 	.word	0x40012c00
 8007d24:	40013400 	.word	0x40013400
 8007d28:	40014000 	.word	0x40014000
 8007d2c:	40014400 	.word	0x40014400
 8007d30:	40014800 	.word	0x40014800

08007d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	2201      	movs	r2, #1
 8007d48:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6a1a      	ldr	r2, [r3, #32]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	43db      	mvns	r3, r3
 8007d56:	401a      	ands	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a1a      	ldr	r2, [r3, #32]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e068      	b.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a2e      	ldr	r2, [pc, #184]	; (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d004      	beq.n	8007dcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a2d      	ldr	r2, [pc, #180]	; (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d108      	bne.n	8007dde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007dd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a1e      	ldr	r2, [pc, #120]	; (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d01d      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e0a:	d018      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1b      	ldr	r2, [pc, #108]	; (8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d013      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a1a      	ldr	r2, [pc, #104]	; (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00e      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d009      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a13      	ldr	r2, [pc, #76]	; (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d004      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a14      	ldr	r2, [pc, #80]	; (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d10c      	bne.n	8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40012c00 	.word	0x40012c00
 8007e7c:	40013400 	.word	0x40013400
 8007e80:	40000400 	.word	0x40000400
 8007e84:	40000800 	.word	0x40000800
 8007e88:	40000c00 	.word	0x40000c00
 8007e8c:	40014000 	.word	0x40014000

08007e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e065      	b.n	8007f78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	041b      	lsls	r3, r3, #16
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a16      	ldr	r2, [pc, #88]	; (8007f84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d004      	beq.n	8007f3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a14      	ldr	r2, [pc, #80]	; (8007f88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d115      	bne.n	8007f66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	051b      	lsls	r3, r3, #20
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	40013400 	.word	0x40013400

08007f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e040      	b.n	800805c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d106      	bne.n	8007ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7fa fc74 	bl	80028d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2224      	movs	r2, #36	; 0x24
 8007ff4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0201 	bic.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f8c0 	bl	800818c <UART_SetConfig>
 800800c:	4603      	mov	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e022      	b.n	800805c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fb3e 	bl	80086a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0201 	orr.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fbc5 	bl	80087e4 <UART_CheckIdleState>
 800805a:	4603      	mov	r3, r0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08a      	sub	sp, #40	; 0x28
 8008068:	af02      	add	r7, sp, #8
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	4613      	mov	r3, r2
 8008072:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008078:	2b20      	cmp	r3, #32
 800807a:	f040 8082 	bne.w	8008182 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <HAL_UART_Transmit+0x26>
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e07a      	b.n	8008184 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_UART_Transmit+0x38>
 8008098:	2302      	movs	r3, #2
 800809a:	e073      	b.n	8008184 <HAL_UART_Transmit+0x120>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2221      	movs	r2, #33	; 0x21
 80080b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080b2:	f7fa fe1f 	bl	8002cf4 <HAL_GetTick>
 80080b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	88fa      	ldrh	r2, [r7, #6]
 80080bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	88fa      	ldrh	r2, [r7, #6]
 80080c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d0:	d108      	bne.n	80080e4 <HAL_UART_Transmit+0x80>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d104      	bne.n	80080e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	e003      	b.n	80080ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80080f4:	e02d      	b.n	8008152 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2200      	movs	r2, #0
 80080fe:	2180      	movs	r1, #128	; 0x80
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fbb8 	bl	8008876 <UART_WaitOnFlagUntilTimeout>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e039      	b.n	8008184 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	881a      	ldrh	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008122:	b292      	uxth	r2, r2
 8008124:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	3302      	adds	r3, #2
 800812a:	61bb      	str	r3, [r7, #24]
 800812c:	e008      	b.n	8008140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	b292      	uxth	r2, r2
 8008138:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	3301      	adds	r3, #1
 800813e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008158:	b29b      	uxth	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1cb      	bne.n	80080f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2200      	movs	r2, #0
 8008166:	2140      	movs	r1, #64	; 0x40
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fb84 	bl	8008876 <UART_WaitOnFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e005      	b.n	8008184 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2220      	movs	r2, #32
 800817c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	e000      	b.n	8008184 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008182:	2302      	movs	r3, #2
  }
}
 8008184:	4618      	mov	r0, r3
 8008186:	3720      	adds	r7, #32
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800818c:	b5b0      	push	{r4, r5, r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	431a      	orrs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	4bad      	ldr	r3, [pc, #692]	; (800846c <UART_SetConfig+0x2e0>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	69f9      	ldr	r1, [r7, #28]
 80081c0:	430b      	orrs	r3, r1
 80081c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4aa2      	ldr	r2, [pc, #648]	; (8008470 <UART_SetConfig+0x2e4>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d004      	beq.n	80081f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69fa      	ldr	r2, [r7, #28]
 8008204:	430a      	orrs	r2, r1
 8008206:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a99      	ldr	r2, [pc, #612]	; (8008474 <UART_SetConfig+0x2e8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d121      	bne.n	8008256 <UART_SetConfig+0xca>
 8008212:	4b99      	ldr	r3, [pc, #612]	; (8008478 <UART_SetConfig+0x2ec>)
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008218:	f003 0303 	and.w	r3, r3, #3
 800821c:	2b03      	cmp	r3, #3
 800821e:	d817      	bhi.n	8008250 <UART_SetConfig+0xc4>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0x9c>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	08008239 	.word	0x08008239
 800822c:	08008245 	.word	0x08008245
 8008230:	0800823f 	.word	0x0800823f
 8008234:	0800824b 	.word	0x0800824b
 8008238:	2301      	movs	r3, #1
 800823a:	76fb      	strb	r3, [r7, #27]
 800823c:	e0e7      	b.n	800840e <UART_SetConfig+0x282>
 800823e:	2302      	movs	r3, #2
 8008240:	76fb      	strb	r3, [r7, #27]
 8008242:	e0e4      	b.n	800840e <UART_SetConfig+0x282>
 8008244:	2304      	movs	r3, #4
 8008246:	76fb      	strb	r3, [r7, #27]
 8008248:	e0e1      	b.n	800840e <UART_SetConfig+0x282>
 800824a:	2308      	movs	r3, #8
 800824c:	76fb      	strb	r3, [r7, #27]
 800824e:	e0de      	b.n	800840e <UART_SetConfig+0x282>
 8008250:	2310      	movs	r3, #16
 8008252:	76fb      	strb	r3, [r7, #27]
 8008254:	e0db      	b.n	800840e <UART_SetConfig+0x282>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a88      	ldr	r2, [pc, #544]	; (800847c <UART_SetConfig+0x2f0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d132      	bne.n	80082c6 <UART_SetConfig+0x13a>
 8008260:	4b85      	ldr	r3, [pc, #532]	; (8008478 <UART_SetConfig+0x2ec>)
 8008262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008266:	f003 030c 	and.w	r3, r3, #12
 800826a:	2b0c      	cmp	r3, #12
 800826c:	d828      	bhi.n	80082c0 <UART_SetConfig+0x134>
 800826e:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <UART_SetConfig+0xe8>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	080082a9 	.word	0x080082a9
 8008278:	080082c1 	.word	0x080082c1
 800827c:	080082c1 	.word	0x080082c1
 8008280:	080082c1 	.word	0x080082c1
 8008284:	080082b5 	.word	0x080082b5
 8008288:	080082c1 	.word	0x080082c1
 800828c:	080082c1 	.word	0x080082c1
 8008290:	080082c1 	.word	0x080082c1
 8008294:	080082af 	.word	0x080082af
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c1 	.word	0x080082c1
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	080082bb 	.word	0x080082bb
 80082a8:	2300      	movs	r3, #0
 80082aa:	76fb      	strb	r3, [r7, #27]
 80082ac:	e0af      	b.n	800840e <UART_SetConfig+0x282>
 80082ae:	2302      	movs	r3, #2
 80082b0:	76fb      	strb	r3, [r7, #27]
 80082b2:	e0ac      	b.n	800840e <UART_SetConfig+0x282>
 80082b4:	2304      	movs	r3, #4
 80082b6:	76fb      	strb	r3, [r7, #27]
 80082b8:	e0a9      	b.n	800840e <UART_SetConfig+0x282>
 80082ba:	2308      	movs	r3, #8
 80082bc:	76fb      	strb	r3, [r7, #27]
 80082be:	e0a6      	b.n	800840e <UART_SetConfig+0x282>
 80082c0:	2310      	movs	r3, #16
 80082c2:	76fb      	strb	r3, [r7, #27]
 80082c4:	e0a3      	b.n	800840e <UART_SetConfig+0x282>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a6d      	ldr	r2, [pc, #436]	; (8008480 <UART_SetConfig+0x2f4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d120      	bne.n	8008312 <UART_SetConfig+0x186>
 80082d0:	4b69      	ldr	r3, [pc, #420]	; (8008478 <UART_SetConfig+0x2ec>)
 80082d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082da:	2b30      	cmp	r3, #48	; 0x30
 80082dc:	d013      	beq.n	8008306 <UART_SetConfig+0x17a>
 80082de:	2b30      	cmp	r3, #48	; 0x30
 80082e0:	d814      	bhi.n	800830c <UART_SetConfig+0x180>
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d009      	beq.n	80082fa <UART_SetConfig+0x16e>
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d810      	bhi.n	800830c <UART_SetConfig+0x180>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <UART_SetConfig+0x168>
 80082ee:	2b10      	cmp	r3, #16
 80082f0:	d006      	beq.n	8008300 <UART_SetConfig+0x174>
 80082f2:	e00b      	b.n	800830c <UART_SetConfig+0x180>
 80082f4:	2300      	movs	r3, #0
 80082f6:	76fb      	strb	r3, [r7, #27]
 80082f8:	e089      	b.n	800840e <UART_SetConfig+0x282>
 80082fa:	2302      	movs	r3, #2
 80082fc:	76fb      	strb	r3, [r7, #27]
 80082fe:	e086      	b.n	800840e <UART_SetConfig+0x282>
 8008300:	2304      	movs	r3, #4
 8008302:	76fb      	strb	r3, [r7, #27]
 8008304:	e083      	b.n	800840e <UART_SetConfig+0x282>
 8008306:	2308      	movs	r3, #8
 8008308:	76fb      	strb	r3, [r7, #27]
 800830a:	e080      	b.n	800840e <UART_SetConfig+0x282>
 800830c:	2310      	movs	r3, #16
 800830e:	76fb      	strb	r3, [r7, #27]
 8008310:	e07d      	b.n	800840e <UART_SetConfig+0x282>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a5b      	ldr	r2, [pc, #364]	; (8008484 <UART_SetConfig+0x2f8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d120      	bne.n	800835e <UART_SetConfig+0x1d2>
 800831c:	4b56      	ldr	r3, [pc, #344]	; (8008478 <UART_SetConfig+0x2ec>)
 800831e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008322:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008326:	2bc0      	cmp	r3, #192	; 0xc0
 8008328:	d013      	beq.n	8008352 <UART_SetConfig+0x1c6>
 800832a:	2bc0      	cmp	r3, #192	; 0xc0
 800832c:	d814      	bhi.n	8008358 <UART_SetConfig+0x1cc>
 800832e:	2b80      	cmp	r3, #128	; 0x80
 8008330:	d009      	beq.n	8008346 <UART_SetConfig+0x1ba>
 8008332:	2b80      	cmp	r3, #128	; 0x80
 8008334:	d810      	bhi.n	8008358 <UART_SetConfig+0x1cc>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <UART_SetConfig+0x1b4>
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d006      	beq.n	800834c <UART_SetConfig+0x1c0>
 800833e:	e00b      	b.n	8008358 <UART_SetConfig+0x1cc>
 8008340:	2300      	movs	r3, #0
 8008342:	76fb      	strb	r3, [r7, #27]
 8008344:	e063      	b.n	800840e <UART_SetConfig+0x282>
 8008346:	2302      	movs	r3, #2
 8008348:	76fb      	strb	r3, [r7, #27]
 800834a:	e060      	b.n	800840e <UART_SetConfig+0x282>
 800834c:	2304      	movs	r3, #4
 800834e:	76fb      	strb	r3, [r7, #27]
 8008350:	e05d      	b.n	800840e <UART_SetConfig+0x282>
 8008352:	2308      	movs	r3, #8
 8008354:	76fb      	strb	r3, [r7, #27]
 8008356:	e05a      	b.n	800840e <UART_SetConfig+0x282>
 8008358:	2310      	movs	r3, #16
 800835a:	76fb      	strb	r3, [r7, #27]
 800835c:	e057      	b.n	800840e <UART_SetConfig+0x282>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a49      	ldr	r2, [pc, #292]	; (8008488 <UART_SetConfig+0x2fc>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d125      	bne.n	80083b4 <UART_SetConfig+0x228>
 8008368:	4b43      	ldr	r3, [pc, #268]	; (8008478 <UART_SetConfig+0x2ec>)
 800836a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008376:	d017      	beq.n	80083a8 <UART_SetConfig+0x21c>
 8008378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800837c:	d817      	bhi.n	80083ae <UART_SetConfig+0x222>
 800837e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008382:	d00b      	beq.n	800839c <UART_SetConfig+0x210>
 8008384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008388:	d811      	bhi.n	80083ae <UART_SetConfig+0x222>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <UART_SetConfig+0x20a>
 800838e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008392:	d006      	beq.n	80083a2 <UART_SetConfig+0x216>
 8008394:	e00b      	b.n	80083ae <UART_SetConfig+0x222>
 8008396:	2300      	movs	r3, #0
 8008398:	76fb      	strb	r3, [r7, #27]
 800839a:	e038      	b.n	800840e <UART_SetConfig+0x282>
 800839c:	2302      	movs	r3, #2
 800839e:	76fb      	strb	r3, [r7, #27]
 80083a0:	e035      	b.n	800840e <UART_SetConfig+0x282>
 80083a2:	2304      	movs	r3, #4
 80083a4:	76fb      	strb	r3, [r7, #27]
 80083a6:	e032      	b.n	800840e <UART_SetConfig+0x282>
 80083a8:	2308      	movs	r3, #8
 80083aa:	76fb      	strb	r3, [r7, #27]
 80083ac:	e02f      	b.n	800840e <UART_SetConfig+0x282>
 80083ae:	2310      	movs	r3, #16
 80083b0:	76fb      	strb	r3, [r7, #27]
 80083b2:	e02c      	b.n	800840e <UART_SetConfig+0x282>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a2d      	ldr	r2, [pc, #180]	; (8008470 <UART_SetConfig+0x2e4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d125      	bne.n	800840a <UART_SetConfig+0x27e>
 80083be:	4b2e      	ldr	r3, [pc, #184]	; (8008478 <UART_SetConfig+0x2ec>)
 80083c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083cc:	d017      	beq.n	80083fe <UART_SetConfig+0x272>
 80083ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083d2:	d817      	bhi.n	8008404 <UART_SetConfig+0x278>
 80083d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d8:	d00b      	beq.n	80083f2 <UART_SetConfig+0x266>
 80083da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083de:	d811      	bhi.n	8008404 <UART_SetConfig+0x278>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <UART_SetConfig+0x260>
 80083e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e8:	d006      	beq.n	80083f8 <UART_SetConfig+0x26c>
 80083ea:	e00b      	b.n	8008404 <UART_SetConfig+0x278>
 80083ec:	2300      	movs	r3, #0
 80083ee:	76fb      	strb	r3, [r7, #27]
 80083f0:	e00d      	b.n	800840e <UART_SetConfig+0x282>
 80083f2:	2302      	movs	r3, #2
 80083f4:	76fb      	strb	r3, [r7, #27]
 80083f6:	e00a      	b.n	800840e <UART_SetConfig+0x282>
 80083f8:	2304      	movs	r3, #4
 80083fa:	76fb      	strb	r3, [r7, #27]
 80083fc:	e007      	b.n	800840e <UART_SetConfig+0x282>
 80083fe:	2308      	movs	r3, #8
 8008400:	76fb      	strb	r3, [r7, #27]
 8008402:	e004      	b.n	800840e <UART_SetConfig+0x282>
 8008404:	2310      	movs	r3, #16
 8008406:	76fb      	strb	r3, [r7, #27]
 8008408:	e001      	b.n	800840e <UART_SetConfig+0x282>
 800840a:	2310      	movs	r3, #16
 800840c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a17      	ldr	r2, [pc, #92]	; (8008470 <UART_SetConfig+0x2e4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	f040 8087 	bne.w	8008528 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800841a:	7efb      	ldrb	r3, [r7, #27]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d837      	bhi.n	8008490 <UART_SetConfig+0x304>
 8008420:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <UART_SetConfig+0x29c>)
 8008422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008426:	bf00      	nop
 8008428:	0800844d 	.word	0x0800844d
 800842c:	08008491 	.word	0x08008491
 8008430:	08008455 	.word	0x08008455
 8008434:	08008491 	.word	0x08008491
 8008438:	0800845b 	.word	0x0800845b
 800843c:	08008491 	.word	0x08008491
 8008440:	08008491 	.word	0x08008491
 8008444:	08008491 	.word	0x08008491
 8008448:	08008463 	.word	0x08008463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800844c:	f7fd f864 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8008450:	6178      	str	r0, [r7, #20]
        break;
 8008452:	e022      	b.n	800849a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008454:	4b0d      	ldr	r3, [pc, #52]	; (800848c <UART_SetConfig+0x300>)
 8008456:	617b      	str	r3, [r7, #20]
        break;
 8008458:	e01f      	b.n	800849a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800845a:	f7fc ffc5 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 800845e:	6178      	str	r0, [r7, #20]
        break;
 8008460:	e01b      	b.n	800849a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008466:	617b      	str	r3, [r7, #20]
        break;
 8008468:	e017      	b.n	800849a <UART_SetConfig+0x30e>
 800846a:	bf00      	nop
 800846c:	efff69f3 	.word	0xefff69f3
 8008470:	40008000 	.word	0x40008000
 8008474:	40013800 	.word	0x40013800
 8008478:	40021000 	.word	0x40021000
 800847c:	40004400 	.word	0x40004400
 8008480:	40004800 	.word	0x40004800
 8008484:	40004c00 	.word	0x40004c00
 8008488:	40005000 	.word	0x40005000
 800848c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	76bb      	strb	r3, [r7, #26]
        break;
 8008498:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80f1 	beq.w	8008684 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	4613      	mov	r3, r2
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	4413      	add	r3, r2
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d305      	bcc.n	80084be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d902      	bls.n	80084c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	76bb      	strb	r3, [r7, #26]
 80084c2:	e0df      	b.n	8008684 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f04f 0100 	mov.w	r1, #0
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	020b      	lsls	r3, r1, #8
 80084d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084da:	0202      	lsls	r2, r0, #8
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	6849      	ldr	r1, [r1, #4]
 80084e0:	0849      	lsrs	r1, r1, #1
 80084e2:	4608      	mov	r0, r1
 80084e4:	f04f 0100 	mov.w	r1, #0
 80084e8:	1814      	adds	r4, r2, r0
 80084ea:	eb43 0501 	adc.w	r5, r3, r1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f04f 0300 	mov.w	r3, #0
 80084f8:	4620      	mov	r0, r4
 80084fa:	4629      	mov	r1, r5
 80084fc:	f7f7 feb8 	bl	8000270 <__aeabi_uldivmod>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4613      	mov	r3, r2
 8008506:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800850e:	d308      	bcc.n	8008522 <UART_SetConfig+0x396>
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008516:	d204      	bcs.n	8008522 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	60da      	str	r2, [r3, #12]
 8008520:	e0b0      	b.n	8008684 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	76bb      	strb	r3, [r7, #26]
 8008526:	e0ad      	b.n	8008684 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008530:	d15c      	bne.n	80085ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8008532:	7efb      	ldrb	r3, [r7, #27]
 8008534:	2b08      	cmp	r3, #8
 8008536:	d828      	bhi.n	800858a <UART_SetConfig+0x3fe>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0x3b4>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008565 	.word	0x08008565
 8008544:	0800856d 	.word	0x0800856d
 8008548:	08008575 	.word	0x08008575
 800854c:	0800858b 	.word	0x0800858b
 8008550:	0800857b 	.word	0x0800857b
 8008554:	0800858b 	.word	0x0800858b
 8008558:	0800858b 	.word	0x0800858b
 800855c:	0800858b 	.word	0x0800858b
 8008560:	08008583 	.word	0x08008583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008564:	f7fc ffd8 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8008568:	6178      	str	r0, [r7, #20]
        break;
 800856a:	e013      	b.n	8008594 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800856c:	f7fc ffea 	bl	8005544 <HAL_RCC_GetPCLK2Freq>
 8008570:	6178      	str	r0, [r7, #20]
        break;
 8008572:	e00f      	b.n	8008594 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008574:	4b49      	ldr	r3, [pc, #292]	; (800869c <UART_SetConfig+0x510>)
 8008576:	617b      	str	r3, [r7, #20]
        break;
 8008578:	e00c      	b.n	8008594 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800857a:	f7fc ff35 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 800857e:	6178      	str	r0, [r7, #20]
        break;
 8008580:	e008      	b.n	8008594 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008586:	617b      	str	r3, [r7, #20]
        break;
 8008588:	e004      	b.n	8008594 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	76bb      	strb	r3, [r7, #26]
        break;
 8008592:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d074      	beq.n	8008684 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	005a      	lsls	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	085b      	lsrs	r3, r3, #1
 80085a4:	441a      	add	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2b0f      	cmp	r3, #15
 80085b6:	d916      	bls.n	80085e6 <UART_SetConfig+0x45a>
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085be:	d212      	bcs.n	80085e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f023 030f 	bic.w	r3, r3, #15
 80085c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	89fb      	ldrh	r3, [r7, #14]
 80085d8:	4313      	orrs	r3, r2
 80085da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	89fa      	ldrh	r2, [r7, #14]
 80085e2:	60da      	str	r2, [r3, #12]
 80085e4:	e04e      	b.n	8008684 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	76bb      	strb	r3, [r7, #26]
 80085ea:	e04b      	b.n	8008684 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085ec:	7efb      	ldrb	r3, [r7, #27]
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d827      	bhi.n	8008642 <UART_SetConfig+0x4b6>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <UART_SetConfig+0x46c>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	08008625 	.word	0x08008625
 8008600:	0800862d 	.word	0x0800862d
 8008604:	08008643 	.word	0x08008643
 8008608:	08008633 	.word	0x08008633
 800860c:	08008643 	.word	0x08008643
 8008610:	08008643 	.word	0x08008643
 8008614:	08008643 	.word	0x08008643
 8008618:	0800863b 	.word	0x0800863b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800861c:	f7fc ff7c 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8008620:	6178      	str	r0, [r7, #20]
        break;
 8008622:	e013      	b.n	800864c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008624:	f7fc ff8e 	bl	8005544 <HAL_RCC_GetPCLK2Freq>
 8008628:	6178      	str	r0, [r7, #20]
        break;
 800862a:	e00f      	b.n	800864c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <UART_SetConfig+0x510>)
 800862e:	617b      	str	r3, [r7, #20]
        break;
 8008630:	e00c      	b.n	800864c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008632:	f7fc fed9 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8008636:	6178      	str	r0, [r7, #20]
        break;
 8008638:	e008      	b.n	800864c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800863e:	617b      	str	r3, [r7, #20]
        break;
 8008640:	e004      	b.n	800864c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	76bb      	strb	r3, [r7, #26]
        break;
 800864a:	bf00      	nop
    }

    if (pclk != 0U)
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d018      	beq.n	8008684 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	085a      	lsrs	r2, r3, #1
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	441a      	add	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	b29b      	uxth	r3, r3
 8008666:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b0f      	cmp	r3, #15
 800866c:	d908      	bls.n	8008680 <UART_SetConfig+0x4f4>
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008674:	d204      	bcs.n	8008680 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	60da      	str	r2, [r3, #12]
 800867e:	e001      	b.n	8008684 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008690:	7ebb      	ldrb	r3, [r7, #26]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3720      	adds	r7, #32
 8008696:	46bd      	mov	sp, r7
 8008698:	bdb0      	pop	{r4, r5, r7, pc}
 800869a:	bf00      	nop
 800869c:	00f42400 	.word	0x00f42400

080086a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00a      	beq.n	800870e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01a      	beq.n	80087b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800879e:	d10a      	bne.n	80087b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	605a      	str	r2, [r3, #4]
  }
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087f4:	f7fa fa7e 	bl	8002cf4 <HAL_GetTick>
 80087f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b08      	cmp	r3, #8
 8008806:	d10e      	bne.n	8008826 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f82d 	bl	8008876 <UART_WaitOnFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e023      	b.n	800886e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b04      	cmp	r3, #4
 8008832:	d10e      	bne.n	8008852 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f817 	bl	8008876 <UART_WaitOnFlagUntilTimeout>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e00d      	b.n	800886e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2220      	movs	r2, #32
 8008856:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2220      	movs	r2, #32
 800885c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	4613      	mov	r3, r2
 8008884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008886:	e05e      	b.n	8008946 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888e:	d05a      	beq.n	8008946 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008890:	f7fa fa30 	bl	8002cf4 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	429a      	cmp	r2, r3
 800889e:	d302      	bcc.n	80088a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d11b      	bne.n	80088de <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0201 	bic.w	r2, r2, #1
 80088c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2220      	movs	r2, #32
 80088ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2220      	movs	r2, #32
 80088d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e043      	b.n	8008966 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d02c      	beq.n	8008946 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088fa:	d124      	bne.n	8008946 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008904:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008914:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0201 	bic.w	r2, r2, #1
 8008924:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2220      	movs	r2, #32
 800892a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2220      	movs	r2, #32
 8008930:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e00f      	b.n	8008966 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69da      	ldr	r2, [r3, #28]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	4013      	ands	r3, r2
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	429a      	cmp	r2, r3
 8008954:	bf0c      	ite	eq
 8008956:	2301      	moveq	r3, #1
 8008958:	2300      	movne	r3, #0
 800895a:	b2db      	uxtb	r3, r3
 800895c:	461a      	mov	r2, r3
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	429a      	cmp	r2, r3
 8008962:	d091      	beq.n	8008888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008974:	4904      	ldr	r1, [pc, #16]	; (8008988 <MX_FATFS_Init+0x18>)
 8008976:	4805      	ldr	r0, [pc, #20]	; (800898c <MX_FATFS_Init+0x1c>)
 8008978:	f000 f8ae 	bl	8008ad8 <FATFS_LinkDriver>
 800897c:	4603      	mov	r3, r0
 800897e:	461a      	mov	r2, r3
 8008980:	4b03      	ldr	r3, [pc, #12]	; (8008990 <MX_FATFS_Init+0x20>)
 8008982:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008984:	bf00      	nop
 8008986:	bd80      	pop	{r7, pc}
 8008988:	2000da7c 	.word	0x2000da7c
 800898c:	200000a0 	.word	0x200000a0
 8008990:	2000da80 	.word	0x2000da80

08008994 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7f7 ff95 	bl	80008d0 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80089a6:	bf00      	nop
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7f8 f86d 	bl	8000a9c <SD_disk_status>
  /* USER CODE END STATUS */
}
 80089c2:	bf00      	nop
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	607a      	str	r2, [r7, #4]
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 80089dc:	7bf8      	ldrb	r0, [r7, #15]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	68b9      	ldr	r1, [r7, #8]
 80089e4:	f7f8 f870 	bl	8000ac8 <SD_disk_read>
  /* USER CODE END READ */
}
 80089e8:	bf00      	nop
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	603b      	str	r3, [r7, #0]
 80089fe:	4603      	mov	r3, r0
 8008a00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 8008a02:	7bf8      	ldrb	r0, [r7, #15]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	f7f8 f8c7 	bl	8000b9c <SD_disk_write>
  /* USER CODE END WRITE */
}
 8008a0e:	bf00      	nop
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	603a      	str	r2, [r7, #0]
 8008a22:	71fb      	strb	r3, [r7, #7]
 8008a24:	460b      	mov	r3, r1
 8008a26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 8008a28:	79fb      	ldrb	r3, [r7, #7]
 8008a2a:	79b9      	ldrb	r1, [r7, #6]
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f8 f938 	bl	8000ca4 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8008a34:	bf00      	nop
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a56:	4b1f      	ldr	r3, [pc, #124]	; (8008ad4 <FATFS_LinkDriverEx+0x94>)
 8008a58:	7a5b      	ldrb	r3, [r3, #9]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d131      	bne.n	8008ac4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a60:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <FATFS_LinkDriverEx+0x94>)
 8008a62:	7a5b      	ldrb	r3, [r3, #9]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	461a      	mov	r2, r3
 8008a68:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <FATFS_LinkDriverEx+0x94>)
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a6e:	4b19      	ldr	r3, [pc, #100]	; (8008ad4 <FATFS_LinkDriverEx+0x94>)
 8008a70:	7a5b      	ldrb	r3, [r3, #9]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	4a17      	ldr	r2, [pc, #92]	; (8008ad4 <FATFS_LinkDriverEx+0x94>)
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a7e:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <FATFS_LinkDriverEx+0x94>)
 8008a80:	7a5b      	ldrb	r3, [r3, #9]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <FATFS_LinkDriverEx+0x94>)
 8008a88:	4413      	add	r3, r2
 8008a8a:	79fa      	ldrb	r2, [r7, #7]
 8008a8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <FATFS_LinkDriverEx+0x94>)
 8008a90:	7a5b      	ldrb	r3, [r3, #9]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	b2d1      	uxtb	r1, r2
 8008a98:	4a0e      	ldr	r2, [pc, #56]	; (8008ad4 <FATFS_LinkDriverEx+0x94>)
 8008a9a:	7251      	strb	r1, [r2, #9]
 8008a9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a9e:	7dbb      	ldrb	r3, [r7, #22]
 8008aa0:	3330      	adds	r3, #48	; 0x30
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	223a      	movs	r2, #58	; 0x3a
 8008aae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	3302      	adds	r3, #2
 8008ab4:	222f      	movs	r2, #47	; 0x2f
 8008ab6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	3303      	adds	r3, #3
 8008abc:	2200      	movs	r2, #0
 8008abe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000144 	.word	0x20000144

08008ad8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff ffaa 	bl	8008a40 <FATFS_LinkDriverEx>
 8008aec:	4603      	mov	r3, r0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <__NVIC_SetPriority>:
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	6039      	str	r1, [r7, #0]
 8008b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	db0a      	blt.n	8008b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	490c      	ldr	r1, [pc, #48]	; (8008b44 <__NVIC_SetPriority+0x4c>)
 8008b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b16:	0112      	lsls	r2, r2, #4
 8008b18:	b2d2      	uxtb	r2, r2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b20:	e00a      	b.n	8008b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	4908      	ldr	r1, [pc, #32]	; (8008b48 <__NVIC_SetPriority+0x50>)
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	3b04      	subs	r3, #4
 8008b30:	0112      	lsls	r2, r2, #4
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	440b      	add	r3, r1
 8008b36:	761a      	strb	r2, [r3, #24]
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	e000e100 	.word	0xe000e100
 8008b48:	e000ed00 	.word	0xe000ed00

08008b4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b50:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <SysTick_Handler+0x1c>)
 8008b52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b54:	f001 ffcc 	bl	800aaf0 <xTaskGetSchedulerState>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d001      	beq.n	8008b62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008b5e:	f002 fdcb 	bl	800b6f8 <xPortSysTickHandler>
  }
}
 8008b62:	bf00      	nop
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	e000e010 	.word	0xe000e010

08008b6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008b70:	2100      	movs	r1, #0
 8008b72:	f06f 0004 	mvn.w	r0, #4
 8008b76:	f7ff ffbf 	bl	8008af8 <__NVIC_SetPriority>
#endif
}
 8008b7a:	bf00      	nop
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b86:	f3ef 8305 	mrs	r3, IPSR
 8008b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8008b8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008b92:	f06f 0305 	mvn.w	r3, #5
 8008b96:	607b      	str	r3, [r7, #4]
 8008b98:	e00c      	b.n	8008bb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008b9a:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <osKernelInitialize+0x44>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d105      	bne.n	8008bae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ba2:	4b08      	ldr	r3, [pc, #32]	; (8008bc4 <osKernelInitialize+0x44>)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	607b      	str	r3, [r7, #4]
 8008bac:	e002      	b.n	8008bb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008bb4:	687b      	ldr	r3, [r7, #4]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	20000150 	.word	0x20000150

08008bc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bce:	f3ef 8305 	mrs	r3, IPSR
 8008bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8008bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008bda:	f06f 0305 	mvn.w	r3, #5
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	e010      	b.n	8008c04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008be2:	4b0b      	ldr	r3, [pc, #44]	; (8008c10 <osKernelStart+0x48>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d109      	bne.n	8008bfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008bea:	f7ff ffbf 	bl	8008b6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008bee:	4b08      	ldr	r3, [pc, #32]	; (8008c10 <osKernelStart+0x48>)
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008bf4:	f001 faf8 	bl	800a1e8 <vTaskStartScheduler>
      stat = osOK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	607b      	str	r3, [r7, #4]
 8008bfc:	e002      	b.n	8008c04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c04:	687b      	ldr	r3, [r7, #4]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000150 	.word	0x20000150

08008c14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08e      	sub	sp, #56	; 0x38
 8008c18:	af04      	add	r7, sp, #16
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c24:	f3ef 8305 	mrs	r3, IPSR
 8008c28:	617b      	str	r3, [r7, #20]
  return(result);
 8008c2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d17e      	bne.n	8008d2e <osThreadNew+0x11a>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d07b      	beq.n	8008d2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008c36:	2380      	movs	r3, #128	; 0x80
 8008c38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c3a:	2318      	movs	r3, #24
 8008c3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d045      	beq.n	8008cda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <osThreadNew+0x48>
        name = attr->name;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d008      	beq.n	8008c82 <osThreadNew+0x6e>
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	2b38      	cmp	r3, #56	; 0x38
 8008c74:	d805      	bhi.n	8008c82 <osThreadNew+0x6e>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <osThreadNew+0x72>
        return (NULL);
 8008c82:	2300      	movs	r3, #0
 8008c84:	e054      	b.n	8008d30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	089b      	lsrs	r3, r3, #2
 8008c94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <osThreadNew+0xa8>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	2b5b      	cmp	r3, #91	; 0x5b
 8008ca4:	d90a      	bls.n	8008cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d006      	beq.n	8008cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <osThreadNew+0xa8>
        mem = 1;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	e010      	b.n	8008cde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10c      	bne.n	8008cde <osThreadNew+0xca>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d108      	bne.n	8008cde <osThreadNew+0xca>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <osThreadNew+0xca>
          mem = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61bb      	str	r3, [r7, #24]
 8008cd8:	e001      	b.n	8008cde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d110      	bne.n	8008d06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008cec:	9202      	str	r2, [sp, #8]
 8008cee:	9301      	str	r3, [sp, #4]
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	6a3a      	ldr	r2, [r7, #32]
 8008cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f001 f820 	bl	8009d40 <xTaskCreateStatic>
 8008d00:	4603      	mov	r3, r0
 8008d02:	613b      	str	r3, [r7, #16]
 8008d04:	e013      	b.n	8008d2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d110      	bne.n	8008d2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	f107 0310 	add.w	r3, r7, #16
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f001 f86b 	bl	8009dfa <xTaskCreate>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d001      	beq.n	8008d2e <osThreadNew+0x11a>
            hTask = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d2e:	693b      	ldr	r3, [r7, #16]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3728      	adds	r7, #40	; 0x28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d40:	f3ef 8305 	mrs	r3, IPSR
 8008d44:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <osDelay+0x1c>
    stat = osErrorISR;
 8008d4c:	f06f 0305 	mvn.w	r3, #5
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e007      	b.n	8008d64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 fa0e 	bl	800a180 <vTaskDelay>
    }
  }

  return (stat);
 8008d64:	68fb      	ldr	r3, [r7, #12]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d76:	f3ef 8305 	mrs	r3, IPSR
 8008d7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8008d82:	f06f 0305 	mvn.w	r3, #5
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	e019      	b.n	8008dbe <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8008d8e:	f001 fb3d 	bl	800a40c <xTaskGetTickCount>
 8008d92:	4603      	mov	r3, r0
 8008d94:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d009      	beq.n	8008db8 <osDelayUntil+0x4a>
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	db06      	blt.n	8008db8 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8008daa:	f107 0308 	add.w	r3, r7, #8
 8008dae:	6939      	ldr	r1, [r7, #16]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 f967 	bl	800a084 <vTaskDelayUntil>
 8008db6:	e002      	b.n	8008dbe <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008db8:	f06f 0303 	mvn.w	r3, #3
 8008dbc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008dbe:	697b      	ldr	r3, [r7, #20]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd4:	f3ef 8305 	mrs	r3, IPSR
 8008dd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dda:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d12d      	bne.n	8008e3c <osEventFlagsNew+0x74>
    mem = -1;
 8008de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008de4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d015      	beq.n	8008e18 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d006      	beq.n	8008e02 <osEventFlagsNew+0x3a>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	2b1f      	cmp	r3, #31
 8008dfa:	d902      	bls.n	8008e02 <osEventFlagsNew+0x3a>
        mem = 1;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	e00c      	b.n	8008e1c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d108      	bne.n	8008e1c <osEventFlagsNew+0x54>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d104      	bne.n	8008e1c <osEventFlagsNew+0x54>
          mem = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	613b      	str	r3, [r7, #16]
 8008e16:	e001      	b.n	8008e1c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d106      	bne.n	8008e30 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 f8a8 	bl	8008f7c <xEventGroupCreateStatic>
 8008e2c:	6178      	str	r0, [r7, #20]
 8008e2e:	e005      	b.n	8008e3c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d102      	bne.n	8008e3c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8008e36:	f000 f8d8 	bl	8008fea <xEventGroupCreate>
 8008e3a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008e3c:	697b      	ldr	r3, [r7, #20]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b08c      	sub	sp, #48	; 0x30
 8008e4a:	af02      	add	r7, sp, #8
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	607a      	str	r2, [r7, #4]
 8008e52:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <osEventFlagsWait+0x22>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8008e68:	f06f 0303 	mvn.w	r3, #3
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	e04b      	b.n	8008f08 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e70:	f3ef 8305 	mrs	r3, IPSR
 8008e74:	617b      	str	r3, [r7, #20]
  return(result);
 8008e76:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8008e7c:	f06f 0305 	mvn.w	r3, #5
 8008e80:	61fb      	str	r3, [r7, #28]
 8008e82:	e041      	b.n	8008f08 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
 8008e92:	e001      	b.n	8008e98 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	623b      	str	r3, [r7, #32]
 8008ea6:	e001      	b.n	8008eac <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	6a3a      	ldr	r2, [r7, #32]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	69b8      	ldr	r0, [r7, #24]
 8008eb8:	f000 f8b2 	bl	8009020 <xEventGroupWaitBits>
 8008ebc:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d010      	beq.n	8008eea <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d019      	beq.n	8008f08 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8008eda:	f06f 0301 	mvn.w	r3, #1
 8008ede:	61fb      	str	r3, [r7, #28]
 8008ee0:	e012      	b.n	8008f08 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008ee2:	f06f 0302 	mvn.w	r3, #2
 8008ee6:	61fb      	str	r3, [r7, #28]
 8008ee8:	e00e      	b.n	8008f08 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d109      	bne.n	8008f08 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8008efa:	f06f 0301 	mvn.w	r3, #1
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	e002      	b.n	8008f08 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008f02:	f06f 0302 	mvn.w	r3, #2
 8008f06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8008f08:	69fb      	ldr	r3, [r7, #28]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3728      	adds	r7, #40	; 0x28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4a07      	ldr	r2, [pc, #28]	; (8008f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8008f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	4a06      	ldr	r2, [pc, #24]	; (8008f44 <vApplicationGetIdleTaskMemory+0x30>)
 8008f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2280      	movs	r2, #128	; 0x80
 8008f30:	601a      	str	r2, [r3, #0]
}
 8008f32:	bf00      	nop
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000154 	.word	0x20000154
 8008f44:	200001b0 	.word	0x200001b0

08008f48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4a07      	ldr	r2, [pc, #28]	; (8008f74 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	4a06      	ldr	r2, [pc, #24]	; (8008f78 <vApplicationGetTimerTaskMemory+0x30>)
 8008f5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f66:	601a      	str	r2, [r3, #0]
}
 8008f68:	bf00      	nop
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	200003b0 	.word	0x200003b0
 8008f78:	2000040c 	.word	0x2000040c

08008f7c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10a      	bne.n	8008fa0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f9c:	bf00      	nop
 8008f9e:	e7fe      	b.n	8008f9e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b20      	cmp	r3, #32
 8008fa8:	d00a      	beq.n	8008fc0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	60fb      	str	r3, [r7, #12]
}
 8008fbc:	bf00      	nop
 8008fbe:	e7fe      	b.n	8008fbe <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 f913 	bl	8009200 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008fe0:	697b      	ldr	r3, [r7, #20]
	}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008ff0:	2020      	movs	r0, #32
 8008ff2:	f002 fc11 	bl	800b818 <pvPortMalloc>
 8008ff6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f8f9 	bl	8009200 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009014:	687b      	ldr	r3, [r7, #4]
	}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b090      	sub	sp, #64	; 0x40
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10a      	bne.n	8009056 <xEventGroupWaitBits+0x36>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	623b      	str	r3, [r7, #32]
}
 8009052:	bf00      	nop
 8009054:	e7fe      	b.n	8009054 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00a      	beq.n	8009076 <xEventGroupWaitBits+0x56>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	61fb      	str	r3, [r7, #28]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <xEventGroupWaitBits+0x72>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	61bb      	str	r3, [r7, #24]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009092:	f001 fd2d 	bl	800aaf0 <xTaskGetSchedulerState>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <xEventGroupWaitBits+0x82>
 800909c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <xEventGroupWaitBits+0x86>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e000      	b.n	80090a8 <xEventGroupWaitBits+0x88>
 80090a6:	2300      	movs	r3, #0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	617b      	str	r3, [r7, #20]
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80090c2:	f001 f8f7 	bl	800a2b4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090d2:	f000 f873 	bl	80091bc <prvTestWaitCondition>
 80090d6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00e      	beq.n	80090fc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d028      	beq.n	800913e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80090ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	43db      	mvns	r3, r3
 80090f4:	401a      	ands	r2, r3
 80090f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	e020      	b.n	800913e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80090fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d104      	bne.n	800910c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009106:	2301      	movs	r3, #1
 8009108:	633b      	str	r3, [r7, #48]	; 0x30
 800910a:	e018      	b.n	800913e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009118:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009126:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912a:	1d18      	adds	r0, r3, #4
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	4313      	orrs	r3, r2
 8009132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009134:	4619      	mov	r1, r3
 8009136:	f001 fab5 	bl	800a6a4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800913e:	f001 f8c7 	bl	800a2d0 <xTaskResumeAll>
 8009142:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009146:	2b00      	cmp	r3, #0
 8009148:	d031      	beq.n	80091ae <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	2b00      	cmp	r3, #0
 800914e:	d107      	bne.n	8009160 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009150:	4b19      	ldr	r3, [pc, #100]	; (80091b8 <xEventGroupWaitBits+0x198>)
 8009152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009160:	f001 fd52 	bl	800ac08 <uxTaskResetEventItemValue>
 8009164:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d11a      	bne.n	80091a6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009170:	f002 fa30 	bl	800b5d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	68b9      	ldr	r1, [r7, #8]
 800917e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009180:	f000 f81c 	bl	80091bc <prvTestWaitCondition>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d006      	beq.n	800919e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	43db      	mvns	r3, r3
 8009198:	401a      	ands	r2, r3
 800919a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800919e:	2301      	movs	r3, #1
 80091a0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80091a2:	f002 fa47 	bl	800b634 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80091a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80091ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3740      	adds	r7, #64	; 0x40
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d107      	bne.n	80091e2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	4013      	ands	r3, r2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00a      	beq.n	80091f2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80091dc:	2301      	movs	r3, #1
 80091de:	617b      	str	r3, [r7, #20]
 80091e0:	e007      	b.n	80091f2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	4013      	ands	r3, r2
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d101      	bne.n	80091f2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80091ee:	2301      	movs	r3, #1
 80091f0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80091f2:	697b      	ldr	r3, [r7, #20]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	371c      	adds	r7, #28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f103 0208 	add.w	r2, r3, #8
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009218:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f103 0208 	add.w	r2, r3, #8
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f103 0208 	add.w	r2, r3, #8
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800925a:	b480      	push	{r7}
 800925c:	b085      	sub	sp, #20
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	689a      	ldr	r2, [r3, #8]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	601a      	str	r2, [r3, #0]
}
 8009296:	bf00      	nop
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092a2:	b480      	push	{r7}
 80092a4:	b085      	sub	sp, #20
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092b8:	d103      	bne.n	80092c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	e00c      	b.n	80092dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3308      	adds	r3, #8
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	e002      	b.n	80092d0 <vListInsert+0x2e>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d2f6      	bcs.n	80092ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	601a      	str	r2, [r3, #0]
}
 8009308:	bf00      	nop
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6892      	ldr	r2, [r2, #8]
 800932a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6852      	ldr	r2, [r2, #4]
 8009334:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	429a      	cmp	r2, r3
 800933e:	d103      	bne.n	8009348 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689a      	ldr	r2, [r3, #8]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	1e5a      	subs	r2, r3, #1
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10a      	bne.n	8009392 <xQueueGenericReset+0x2a>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	60bb      	str	r3, [r7, #8]
}
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009392:	f002 f91f 	bl	800b5d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	68f9      	ldr	r1, [r7, #12]
 80093a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093a2:	fb01 f303 	mul.w	r3, r1, r3
 80093a6:	441a      	add	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c2:	3b01      	subs	r3, #1
 80093c4:	68f9      	ldr	r1, [r7, #12]
 80093c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093c8:	fb01 f303 	mul.w	r3, r1, r3
 80093cc:	441a      	add	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	22ff      	movs	r2, #255	; 0xff
 80093d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	22ff      	movs	r2, #255	; 0xff
 80093de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d114      	bne.n	8009412 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01a      	beq.n	8009426 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3310      	adds	r3, #16
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 f9bd 	bl	800a774 <xTaskRemoveFromEventList>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d012      	beq.n	8009426 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009400:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <xQueueGenericReset+0xcc>)
 8009402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	e009      	b.n	8009426 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3310      	adds	r3, #16
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff fef2 	bl	8009200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3324      	adds	r3, #36	; 0x24
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff feed 	bl	8009200 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009426:	f002 f905 	bl	800b634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800942a:	2301      	movs	r3, #1
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	e000ed04 	.word	0xe000ed04

08009438 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08e      	sub	sp, #56	; 0x38
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
 8009444:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10a      	bne.n	800947e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	627b      	str	r3, [r7, #36]	; 0x24
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <xQueueGenericCreateStatic+0x52>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <xQueueGenericCreateStatic+0x56>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <xQueueGenericCreateStatic+0x58>
 800948e:	2300      	movs	r3, #0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10a      	bne.n	80094aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	623b      	str	r3, [r7, #32]
}
 80094a6:	bf00      	nop
 80094a8:	e7fe      	b.n	80094a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d102      	bne.n	80094b6 <xQueueGenericCreateStatic+0x7e>
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <xQueueGenericCreateStatic+0x82>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e000      	b.n	80094bc <xQueueGenericCreateStatic+0x84>
 80094ba:	2300      	movs	r3, #0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10a      	bne.n	80094d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	61fb      	str	r3, [r7, #28]
}
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094d6:	2350      	movs	r3, #80	; 0x50
 80094d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2b50      	cmp	r3, #80	; 0x50
 80094de:	d00a      	beq.n	80094f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	61bb      	str	r3, [r7, #24]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00d      	beq.n	800951e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800950a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	4613      	mov	r3, r2
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	68b9      	ldr	r1, [r7, #8]
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 f805 	bl	8009528 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009520:	4618      	mov	r0, r3
 8009522:	3730      	adds	r7, #48	; 0x30
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d103      	bne.n	8009544 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	e002      	b.n	800954a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009556:	2101      	movs	r1, #1
 8009558:	69b8      	ldr	r0, [r7, #24]
 800955a:	f7ff ff05 	bl	8009368 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	78fa      	ldrb	r2, [r7, #3]
 8009562:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08e      	sub	sp, #56	; 0x38
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800957e:	2300      	movs	r3, #0
 8009580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <xQueueGenericSend+0x32>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d103      	bne.n	80095b0 <xQueueGenericSend+0x40>
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <xQueueGenericSend+0x44>
 80095b0:	2301      	movs	r3, #1
 80095b2:	e000      	b.n	80095b6 <xQueueGenericSend+0x46>
 80095b4:	2300      	movs	r3, #0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <xQueueGenericSend+0x60>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095cc:	bf00      	nop
 80095ce:	e7fe      	b.n	80095ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d103      	bne.n	80095de <xQueueGenericSend+0x6e>
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <xQueueGenericSend+0x72>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <xQueueGenericSend+0x74>
 80095e2:	2300      	movs	r3, #0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <xQueueGenericSend+0x8e>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	623b      	str	r3, [r7, #32]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095fe:	f001 fa77 	bl	800aaf0 <xTaskGetSchedulerState>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d102      	bne.n	800960e <xQueueGenericSend+0x9e>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <xQueueGenericSend+0xa2>
 800960e:	2301      	movs	r3, #1
 8009610:	e000      	b.n	8009614 <xQueueGenericSend+0xa4>
 8009612:	2300      	movs	r3, #0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <xQueueGenericSend+0xbe>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	61fb      	str	r3, [r7, #28]
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800962e:	f001 ffd1 	bl	800b5d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963a:	429a      	cmp	r2, r3
 800963c:	d302      	bcc.n	8009644 <xQueueGenericSend+0xd4>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b02      	cmp	r3, #2
 8009642:	d129      	bne.n	8009698 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	68b9      	ldr	r1, [r7, #8]
 8009648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800964a:	f000 fa0b 	bl	8009a64 <prvCopyDataToQueue>
 800964e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	d010      	beq.n	800967a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	3324      	adds	r3, #36	; 0x24
 800965c:	4618      	mov	r0, r3
 800965e:	f001 f889 	bl	800a774 <xTaskRemoveFromEventList>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d013      	beq.n	8009690 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009668:	4b3f      	ldr	r3, [pc, #252]	; (8009768 <xQueueGenericSend+0x1f8>)
 800966a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	e00a      	b.n	8009690 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d007      	beq.n	8009690 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009680:	4b39      	ldr	r3, [pc, #228]	; (8009768 <xQueueGenericSend+0x1f8>)
 8009682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009690:	f001 ffd0 	bl	800b634 <vPortExitCritical>
				return pdPASS;
 8009694:	2301      	movs	r3, #1
 8009696:	e063      	b.n	8009760 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d103      	bne.n	80096a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800969e:	f001 ffc9 	bl	800b634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	e05c      	b.n	8009760 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d106      	bne.n	80096ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096ac:	f107 0314 	add.w	r3, r7, #20
 80096b0:	4618      	mov	r0, r3
 80096b2:	f001 f8c3 	bl	800a83c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096b6:	2301      	movs	r3, #1
 80096b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096ba:	f001 ffbb 	bl	800b634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096be:	f000 fdf9 	bl	800a2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096c2:	f001 ff87 	bl	800b5d4 <vPortEnterCritical>
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096cc:	b25b      	sxtb	r3, r3
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096d2:	d103      	bne.n	80096dc <xQueueGenericSend+0x16c>
 80096d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096e2:	b25b      	sxtb	r3, r3
 80096e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096e8:	d103      	bne.n	80096f2 <xQueueGenericSend+0x182>
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096f2:	f001 ff9f 	bl	800b634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096f6:	1d3a      	adds	r2, r7, #4
 80096f8:	f107 0314 	add.w	r3, r7, #20
 80096fc:	4611      	mov	r1, r2
 80096fe:	4618      	mov	r0, r3
 8009700:	f001 f8b2 	bl	800a868 <xTaskCheckForTimeOut>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d124      	bne.n	8009754 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800970a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800970c:	f000 faa2 	bl	8009c54 <prvIsQueueFull>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d018      	beq.n	8009748 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	3310      	adds	r3, #16
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	4611      	mov	r1, r2
 800971e:	4618      	mov	r0, r3
 8009720:	f000 ff9c 	bl	800a65c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009726:	f000 fa2d 	bl	8009b84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800972a:	f000 fdd1 	bl	800a2d0 <xTaskResumeAll>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	f47f af7c 	bne.w	800962e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009736:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <xQueueGenericSend+0x1f8>)
 8009738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	e772      	b.n	800962e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800974a:	f000 fa1b 	bl	8009b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800974e:	f000 fdbf 	bl	800a2d0 <xTaskResumeAll>
 8009752:	e76c      	b.n	800962e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009756:	f000 fa15 	bl	8009b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800975a:	f000 fdb9 	bl	800a2d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800975e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009760:	4618      	mov	r0, r3
 8009762:	3738      	adds	r7, #56	; 0x38
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b090      	sub	sp, #64	; 0x40
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d103      	bne.n	80097a8 <xQueueGenericSendFromISR+0x3c>
 80097a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <xQueueGenericSendFromISR+0x40>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e000      	b.n	80097ae <xQueueGenericSendFromISR+0x42>
 80097ac:	2300      	movs	r3, #0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10a      	bne.n	80097c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097c4:	bf00      	nop
 80097c6:	e7fe      	b.n	80097c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d103      	bne.n	80097d6 <xQueueGenericSendFromISR+0x6a>
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <xQueueGenericSendFromISR+0x6e>
 80097d6:	2301      	movs	r3, #1
 80097d8:	e000      	b.n	80097dc <xQueueGenericSendFromISR+0x70>
 80097da:	2300      	movs	r3, #0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	623b      	str	r3, [r7, #32]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097f6:	f001 ffcf 	bl	800b798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097fa:	f3ef 8211 	mrs	r2, BASEPRI
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	61fa      	str	r2, [r7, #28]
 8009810:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009812:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009814:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981e:	429a      	cmp	r2, r3
 8009820:	d302      	bcc.n	8009828 <xQueueGenericSendFromISR+0xbc>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b02      	cmp	r3, #2
 8009826:	d12f      	bne.n	8009888 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800982e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800983e:	f000 f911 	bl	8009a64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009842:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800984a:	d112      	bne.n	8009872 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	2b00      	cmp	r3, #0
 8009852:	d016      	beq.n	8009882 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009856:	3324      	adds	r3, #36	; 0x24
 8009858:	4618      	mov	r0, r3
 800985a:	f000 ff8b 	bl	800a774 <xTaskRemoveFromEventList>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00e      	beq.n	8009882 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00b      	beq.n	8009882 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	e007      	b.n	8009882 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009872:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009876:	3301      	adds	r3, #1
 8009878:	b2db      	uxtb	r3, r3
 800987a:	b25a      	sxtb	r2, r3
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009882:	2301      	movs	r3, #1
 8009884:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009886:	e001      	b.n	800988c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009888:	2300      	movs	r3, #0
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800988c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009896:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800989a:	4618      	mov	r0, r3
 800989c:	3740      	adds	r7, #64	; 0x40
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08c      	sub	sp, #48	; 0x30
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098b0:	2300      	movs	r3, #0
 80098b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <xQueueReceive+0x30>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	623b      	str	r3, [r7, #32]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d103      	bne.n	80098e2 <xQueueReceive+0x3e>
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <xQueueReceive+0x42>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e000      	b.n	80098e8 <xQueueReceive+0x44>
 80098e6:	2300      	movs	r3, #0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10a      	bne.n	8009902 <xQueueReceive+0x5e>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	61fb      	str	r3, [r7, #28]
}
 80098fe:	bf00      	nop
 8009900:	e7fe      	b.n	8009900 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009902:	f001 f8f5 	bl	800aaf0 <xTaskGetSchedulerState>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <xQueueReceive+0x6e>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <xQueueReceive+0x72>
 8009912:	2301      	movs	r3, #1
 8009914:	e000      	b.n	8009918 <xQueueReceive+0x74>
 8009916:	2300      	movs	r3, #0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <xQueueReceive+0x8e>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	61bb      	str	r3, [r7, #24]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009932:	f001 fe4f 	bl	800b5d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	2b00      	cmp	r3, #0
 8009940:	d01f      	beq.n	8009982 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009942:	68b9      	ldr	r1, [r7, #8]
 8009944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009946:	f000 f8f7 	bl	8009b38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	1e5a      	subs	r2, r3, #1
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00f      	beq.n	800997a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	3310      	adds	r3, #16
 800995e:	4618      	mov	r0, r3
 8009960:	f000 ff08 	bl	800a774 <xTaskRemoveFromEventList>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d007      	beq.n	800997a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800996a:	4b3d      	ldr	r3, [pc, #244]	; (8009a60 <xQueueReceive+0x1bc>)
 800996c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800997a:	f001 fe5b 	bl	800b634 <vPortExitCritical>
				return pdPASS;
 800997e:	2301      	movs	r3, #1
 8009980:	e069      	b.n	8009a56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d103      	bne.n	8009990 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009988:	f001 fe54 	bl	800b634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800998c:	2300      	movs	r3, #0
 800998e:	e062      	b.n	8009a56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	2b00      	cmp	r3, #0
 8009994:	d106      	bne.n	80099a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009996:	f107 0310 	add.w	r3, r7, #16
 800999a:	4618      	mov	r0, r3
 800999c:	f000 ff4e 	bl	800a83c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099a0:	2301      	movs	r3, #1
 80099a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099a4:	f001 fe46 	bl	800b634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099a8:	f000 fc84 	bl	800a2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099ac:	f001 fe12 	bl	800b5d4 <vPortEnterCritical>
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b6:	b25b      	sxtb	r3, r3
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099bc:	d103      	bne.n	80099c6 <xQueueReceive+0x122>
 80099be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099cc:	b25b      	sxtb	r3, r3
 80099ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099d2:	d103      	bne.n	80099dc <xQueueReceive+0x138>
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099dc:	f001 fe2a 	bl	800b634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099e0:	1d3a      	adds	r2, r7, #4
 80099e2:	f107 0310 	add.w	r3, r7, #16
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 ff3d 	bl	800a868 <xTaskCheckForTimeOut>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d123      	bne.n	8009a3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f6:	f000 f917 	bl	8009c28 <prvIsQueueEmpty>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d017      	beq.n	8009a30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	3324      	adds	r3, #36	; 0x24
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	4611      	mov	r1, r2
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fe27 	bl	800a65c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a10:	f000 f8b8 	bl	8009b84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a14:	f000 fc5c 	bl	800a2d0 <xTaskResumeAll>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d189      	bne.n	8009932 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a1e:	4b10      	ldr	r3, [pc, #64]	; (8009a60 <xQueueReceive+0x1bc>)
 8009a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	e780      	b.n	8009932 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a32:	f000 f8a7 	bl	8009b84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a36:	f000 fc4b 	bl	800a2d0 <xTaskResumeAll>
 8009a3a:	e77a      	b.n	8009932 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a3e:	f000 f8a1 	bl	8009b84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a42:	f000 fc45 	bl	800a2d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a48:	f000 f8ee 	bl	8009c28 <prvIsQueueEmpty>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f43f af6f 	beq.w	8009932 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3730      	adds	r7, #48	; 0x30
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a70:	2300      	movs	r3, #0
 8009a72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10d      	bne.n	8009a9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d14d      	bne.n	8009b26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 f84c 	bl	800ab2c <xTaskPriorityDisinherit>
 8009a94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	609a      	str	r2, [r3, #8]
 8009a9c:	e043      	b.n	8009b26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d119      	bne.n	8009ad8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6858      	ldr	r0, [r3, #4]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	461a      	mov	r2, r3
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	f002 f8c6 	bl	800bc40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abc:	441a      	add	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d32b      	bcc.n	8009b26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	605a      	str	r2, [r3, #4]
 8009ad6:	e026      	b.n	8009b26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	68d8      	ldr	r0, [r3, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	f002 f8ac 	bl	800bc40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af0:	425b      	negs	r3, r3
 8009af2:	441a      	add	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d207      	bcs.n	8009b14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	425b      	negs	r3, r3
 8009b0e:	441a      	add	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d105      	bne.n	8009b26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b2e:	697b      	ldr	r3, [r7, #20]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d018      	beq.n	8009b7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b52:	441a      	add	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68da      	ldr	r2, [r3, #12]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d303      	bcc.n	8009b6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68d9      	ldr	r1, [r3, #12]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b74:	461a      	mov	r2, r3
 8009b76:	6838      	ldr	r0, [r7, #0]
 8009b78:	f002 f862 	bl	800bc40 <memcpy>
	}
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b8c:	f001 fd22 	bl	800b5d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b98:	e011      	b.n	8009bbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d012      	beq.n	8009bc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	3324      	adds	r3, #36	; 0x24
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fde4 	bl	800a774 <xTaskRemoveFromEventList>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009bb2:	f000 febb 	bl	800a92c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	dce9      	bgt.n	8009b9a <prvUnlockQueue+0x16>
 8009bc6:	e000      	b.n	8009bca <prvUnlockQueue+0x46>
					break;
 8009bc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	22ff      	movs	r2, #255	; 0xff
 8009bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bd2:	f001 fd2f 	bl	800b634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bd6:	f001 fcfd 	bl	800b5d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009be0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009be2:	e011      	b.n	8009c08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d012      	beq.n	8009c12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3310      	adds	r3, #16
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fdbf 	bl	800a774 <xTaskRemoveFromEventList>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bfc:	f000 fe96 	bl	800a92c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	dce9      	bgt.n	8009be4 <prvUnlockQueue+0x60>
 8009c10:	e000      	b.n	8009c14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	22ff      	movs	r2, #255	; 0xff
 8009c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c1c:	f001 fd0a 	bl	800b634 <vPortExitCritical>
}
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c30:	f001 fcd0 	bl	800b5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d102      	bne.n	8009c42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e001      	b.n	8009c46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c46:	f001 fcf5 	bl	800b634 <vPortExitCritical>

	return xReturn;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c5c:	f001 fcba 	bl	800b5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d102      	bne.n	8009c72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e001      	b.n	8009c76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c76:	f001 fcdd 	bl	800b634 <vPortExitCritical>

	return xReturn;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
 8009c92:	e014      	b.n	8009cbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c94:	4a0f      	ldr	r2, [pc, #60]	; (8009cd4 <vQueueAddToRegistry+0x50>)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10b      	bne.n	8009cb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ca0:	490c      	ldr	r1, [pc, #48]	; (8009cd4 <vQueueAddToRegistry+0x50>)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	683a      	ldr	r2, [r7, #0]
 8009ca6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009caa:	4a0a      	ldr	r2, [pc, #40]	; (8009cd4 <vQueueAddToRegistry+0x50>)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	4413      	add	r3, r2
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009cb6:	e006      	b.n	8009cc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b07      	cmp	r3, #7
 8009cc2:	d9e7      	bls.n	8009c94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	2000faf0 	.word	0x2000faf0

08009cd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ce8:	f001 fc74 	bl	800b5d4 <vPortEnterCritical>
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cf2:	b25b      	sxtb	r3, r3
 8009cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cf8:	d103      	bne.n	8009d02 <vQueueWaitForMessageRestricted+0x2a>
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d08:	b25b      	sxtb	r3, r3
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d0e:	d103      	bne.n	8009d18 <vQueueWaitForMessageRestricted+0x40>
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d18:	f001 fc8c 	bl	800b634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d106      	bne.n	8009d32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	3324      	adds	r3, #36	; 0x24
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	68b9      	ldr	r1, [r7, #8]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 fcf5 	bl	800a71c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d32:	6978      	ldr	r0, [r7, #20]
 8009d34:	f7ff ff26 	bl	8009b84 <prvUnlockQueue>
	}
 8009d38:	bf00      	nop
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08e      	sub	sp, #56	; 0x38
 8009d44:	af04      	add	r7, sp, #16
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	623b      	str	r3, [r7, #32]
}
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10a      	bne.n	8009d86 <xTaskCreateStatic+0x46>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	61fb      	str	r3, [r7, #28]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d86:	235c      	movs	r3, #92	; 0x5c
 8009d88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b5c      	cmp	r3, #92	; 0x5c
 8009d8e:	d00a      	beq.n	8009da6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	61bb      	str	r3, [r7, #24]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009da6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d01e      	beq.n	8009dec <xTaskCreateStatic+0xac>
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01b      	beq.n	8009dec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9303      	str	r3, [sp, #12]
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	9302      	str	r3, [sp, #8]
 8009dce:	f107 0314 	add.w	r3, r7, #20
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 f850 	bl	8009e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009de6:	f000 f8dd 	bl	8009fa4 <prvAddNewTaskToReadyList>
 8009dea:	e001      	b.n	8009df0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009dec:	2300      	movs	r3, #0
 8009dee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009df0:	697b      	ldr	r3, [r7, #20]
	}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3728      	adds	r7, #40	; 0x28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b08c      	sub	sp, #48	; 0x30
 8009dfe:	af04      	add	r7, sp, #16
 8009e00:	60f8      	str	r0, [r7, #12]
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	603b      	str	r3, [r7, #0]
 8009e06:	4613      	mov	r3, r2
 8009e08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e0a:	88fb      	ldrh	r3, [r7, #6]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f001 fd02 	bl	800b818 <pvPortMalloc>
 8009e14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00e      	beq.n	8009e3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e1c:	205c      	movs	r0, #92	; 0x5c
 8009e1e:	f001 fcfb 	bl	800b818 <pvPortMalloc>
 8009e22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8009e30:	e005      	b.n	8009e3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e32:	6978      	ldr	r0, [r7, #20]
 8009e34:	f001 fdbc 	bl	800b9b0 <vPortFree>
 8009e38:	e001      	b.n	8009e3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d017      	beq.n	8009e74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e4c:	88fa      	ldrh	r2, [r7, #6]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	9302      	str	r3, [sp, #8]
 8009e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 f80e 	bl	8009e84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e68:	69f8      	ldr	r0, [r7, #28]
 8009e6a:	f000 f89b 	bl	8009fa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	e002      	b.n	8009e7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e7a:	69bb      	ldr	r3, [r7, #24]
	}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3720      	adds	r7, #32
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	21a5      	movs	r1, #165	; 0xa5
 8009e9e:	f001 fedd 	bl	800bc5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009eac:	3b01      	subs	r3, #1
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	f023 0307 	bic.w	r3, r3, #7
 8009eba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	f003 0307 	and.w	r3, r3, #7
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00a      	beq.n	8009edc <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	617b      	str	r3, [r7, #20]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d01f      	beq.n	8009f22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	61fb      	str	r3, [r7, #28]
 8009ee6:	e012      	b.n	8009f0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	4413      	add	r3, r2
 8009eee:	7819      	ldrb	r1, [r3, #0]
 8009ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	3334      	adds	r3, #52	; 0x34
 8009ef8:	460a      	mov	r2, r1
 8009efa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	4413      	add	r3, r2
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d006      	beq.n	8009f16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	61fb      	str	r3, [r7, #28]
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	2b0f      	cmp	r3, #15
 8009f12:	d9e9      	bls.n	8009ee8 <prvInitialiseNewTask+0x64>
 8009f14:	e000      	b.n	8009f18 <prvInitialiseNewTask+0x94>
			{
				break;
 8009f16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f20:	e003      	b.n	8009f2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	2b37      	cmp	r3, #55	; 0x37
 8009f2e:	d901      	bls.n	8009f34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f30:	2337      	movs	r3, #55	; 0x37
 8009f32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	2200      	movs	r2, #0
 8009f44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff f978 	bl	8009240 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	3318      	adds	r3, #24
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff f973 	bl	8009240 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	2200      	movs	r2, #0
 8009f74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	68f9      	ldr	r1, [r7, #12]
 8009f82:	69b8      	ldr	r0, [r7, #24]
 8009f84:	f001 f9fa 	bl	800b37c <pxPortInitialiseStack>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f9a:	bf00      	nop
 8009f9c:	3720      	adds	r7, #32
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fac:	f001 fb12 	bl	800b5d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fb0:	4b2d      	ldr	r3, [pc, #180]	; (800a068 <prvAddNewTaskToReadyList+0xc4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a2c      	ldr	r2, [pc, #176]	; (800a068 <prvAddNewTaskToReadyList+0xc4>)
 8009fb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fba:	4b2c      	ldr	r3, [pc, #176]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d109      	bne.n	8009fd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fc2:	4a2a      	ldr	r2, [pc, #168]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fc8:	4b27      	ldr	r3, [pc, #156]	; (800a068 <prvAddNewTaskToReadyList+0xc4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d110      	bne.n	8009ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fd0:	f000 fcd0 	bl	800a974 <prvInitialiseTaskLists>
 8009fd4:	e00d      	b.n	8009ff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fd6:	4b26      	ldr	r3, [pc, #152]	; (800a070 <prvAddNewTaskToReadyList+0xcc>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d109      	bne.n	8009ff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fde:	4b23      	ldr	r3, [pc, #140]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d802      	bhi.n	8009ff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009fec:	4a1f      	ldr	r2, [pc, #124]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ff2:	4b20      	ldr	r3, [pc, #128]	; (800a074 <prvAddNewTaskToReadyList+0xd0>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	4a1e      	ldr	r2, [pc, #120]	; (800a074 <prvAddNewTaskToReadyList+0xd0>)
 8009ffa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ffc:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <prvAddNewTaskToReadyList+0xd0>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a008:	4b1b      	ldr	r3, [pc, #108]	; (800a078 <prvAddNewTaskToReadyList+0xd4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d903      	bls.n	800a018 <prvAddNewTaskToReadyList+0x74>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	4a18      	ldr	r2, [pc, #96]	; (800a078 <prvAddNewTaskToReadyList+0xd4>)
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01c:	4613      	mov	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4a15      	ldr	r2, [pc, #84]	; (800a07c <prvAddNewTaskToReadyList+0xd8>)
 800a026:	441a      	add	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3304      	adds	r3, #4
 800a02c:	4619      	mov	r1, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f7ff f913 	bl	800925a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a034:	f001 fafe 	bl	800b634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a038:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <prvAddNewTaskToReadyList+0xcc>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00e      	beq.n	800a05e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a040:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <prvAddNewTaskToReadyList+0xc8>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d207      	bcs.n	800a05e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a04e:	4b0c      	ldr	r3, [pc, #48]	; (800a080 <prvAddNewTaskToReadyList+0xdc>)
 800a050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20000ce0 	.word	0x20000ce0
 800a06c:	2000080c 	.word	0x2000080c
 800a070:	20000cec 	.word	0x20000cec
 800a074:	20000cfc 	.word	0x20000cfc
 800a078:	20000ce8 	.word	0x20000ce8
 800a07c:	20000810 	.word	0x20000810
 800a080:	e000ed04 	.word	0xe000ed04

0800a084 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08a      	sub	sp, #40	; 0x28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a08e:	2300      	movs	r3, #0
 800a090:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <vTaskDelayUntil+0x2a>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	617b      	str	r3, [r7, #20]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <vTaskDelayUntil+0x46>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	613b      	str	r3, [r7, #16]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a0ca:	4b2a      	ldr	r3, [pc, #168]	; (800a174 <vTaskDelayUntil+0xf0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00a      	beq.n	800a0e8 <vTaskDelayUntil+0x64>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	60fb      	str	r3, [r7, #12]
}
 800a0e4:	bf00      	nop
 800a0e6:	e7fe      	b.n	800a0e6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a0e8:	f000 f8e4 	bl	800a2b4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a0ec:	4b22      	ldr	r3, [pc, #136]	; (800a178 <vTaskDelayUntil+0xf4>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6a3a      	ldr	r2, [r7, #32]
 800a102:	429a      	cmp	r2, r3
 800a104:	d20b      	bcs.n	800a11e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	69fa      	ldr	r2, [r7, #28]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d211      	bcs.n	800a134 <vTaskDelayUntil+0xb0>
 800a110:	69fa      	ldr	r2, [r7, #28]
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	429a      	cmp	r2, r3
 800a116:	d90d      	bls.n	800a134 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a118:	2301      	movs	r3, #1
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
 800a11c:	e00a      	b.n	800a134 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	429a      	cmp	r2, r3
 800a126:	d303      	bcc.n	800a130 <vTaskDelayUntil+0xac>
 800a128:	69fa      	ldr	r2, [r7, #28]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d901      	bls.n	800a134 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a130:	2301      	movs	r3, #1
 800a132:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	69fa      	ldr	r2, [r7, #28]
 800a138:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d006      	beq.n	800a14e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a140:	69fa      	ldr	r2, [r7, #28]
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fd75 	bl	800ac38 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a14e:	f000 f8bf 	bl	800a2d0 <xTaskResumeAll>
 800a152:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d107      	bne.n	800a16a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a15a:	4b08      	ldr	r3, [pc, #32]	; (800a17c <vTaskDelayUntil+0xf8>)
 800a15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a16a:	bf00      	nop
 800a16c:	3728      	adds	r7, #40	; 0x28
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20000d08 	.word	0x20000d08
 800a178:	20000ce4 	.word	0x20000ce4
 800a17c:	e000ed04 	.word	0xe000ed04

0800a180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d017      	beq.n	800a1c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a192:	4b13      	ldr	r3, [pc, #76]	; (800a1e0 <vTaskDelay+0x60>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00a      	beq.n	800a1b0 <vTaskDelay+0x30>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	60bb      	str	r3, [r7, #8]
}
 800a1ac:	bf00      	nop
 800a1ae:	e7fe      	b.n	800a1ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1b0:	f000 f880 	bl	800a2b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fd3e 	bl	800ac38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1bc:	f000 f888 	bl	800a2d0 <xTaskResumeAll>
 800a1c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d107      	bne.n	800a1d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1c8:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <vTaskDelay+0x64>)
 800a1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1d8:	bf00      	nop
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20000d08 	.word	0x20000d08
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	; 0x28
 800a1ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1f6:	463a      	mov	r2, r7
 800a1f8:	1d39      	adds	r1, r7, #4
 800a1fa:	f107 0308 	add.w	r3, r7, #8
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe fe88 	bl	8008f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	9202      	str	r2, [sp, #8]
 800a20c:	9301      	str	r3, [sp, #4]
 800a20e:	2300      	movs	r3, #0
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	460a      	mov	r2, r1
 800a216:	4921      	ldr	r1, [pc, #132]	; (800a29c <vTaskStartScheduler+0xb4>)
 800a218:	4821      	ldr	r0, [pc, #132]	; (800a2a0 <vTaskStartScheduler+0xb8>)
 800a21a:	f7ff fd91 	bl	8009d40 <xTaskCreateStatic>
 800a21e:	4603      	mov	r3, r0
 800a220:	4a20      	ldr	r2, [pc, #128]	; (800a2a4 <vTaskStartScheduler+0xbc>)
 800a222:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a224:	4b1f      	ldr	r3, [pc, #124]	; (800a2a4 <vTaskStartScheduler+0xbc>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d002      	beq.n	800a232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a22c:	2301      	movs	r3, #1
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	e001      	b.n	800a236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a232:	2300      	movs	r3, #0
 800a234:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d102      	bne.n	800a242 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a23c:	f000 fd50 	bl	800ace0 <xTimerCreateTimerTask>
 800a240:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d116      	bne.n	800a276 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	613b      	str	r3, [r7, #16]
}
 800a25a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a25c:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <vTaskStartScheduler+0xc0>)
 800a25e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a262:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a264:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <vTaskStartScheduler+0xc4>)
 800a266:	2201      	movs	r2, #1
 800a268:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a26a:	4b11      	ldr	r3, [pc, #68]	; (800a2b0 <vTaskStartScheduler+0xc8>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a270:	f001 f90e 	bl	800b490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a274:	e00e      	b.n	800a294 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a27c:	d10a      	bne.n	800a294 <vTaskStartScheduler+0xac>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	60fb      	str	r3, [r7, #12]
}
 800a290:	bf00      	nop
 800a292:	e7fe      	b.n	800a292 <vTaskStartScheduler+0xaa>
}
 800a294:	bf00      	nop
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	0800ce10 	.word	0x0800ce10
 800a2a0:	0800a945 	.word	0x0800a945
 800a2a4:	20000d04 	.word	0x20000d04
 800a2a8:	20000d00 	.word	0x20000d00
 800a2ac:	20000cec 	.word	0x20000cec
 800a2b0:	20000ce4 	.word	0x20000ce4

0800a2b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2b8:	4b04      	ldr	r3, [pc, #16]	; (800a2cc <vTaskSuspendAll+0x18>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	4a03      	ldr	r2, [pc, #12]	; (800a2cc <vTaskSuspendAll+0x18>)
 800a2c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2c2:	bf00      	nop
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	20000d08 	.word	0x20000d08

0800a2d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2de:	4b42      	ldr	r3, [pc, #264]	; (800a3e8 <xTaskResumeAll+0x118>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10a      	bne.n	800a2fc <xTaskResumeAll+0x2c>
	__asm volatile
 800a2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	603b      	str	r3, [r7, #0]
}
 800a2f8:	bf00      	nop
 800a2fa:	e7fe      	b.n	800a2fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2fc:	f001 f96a 	bl	800b5d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a300:	4b39      	ldr	r3, [pc, #228]	; (800a3e8 <xTaskResumeAll+0x118>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3b01      	subs	r3, #1
 800a306:	4a38      	ldr	r2, [pc, #224]	; (800a3e8 <xTaskResumeAll+0x118>)
 800a308:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a30a:	4b37      	ldr	r3, [pc, #220]	; (800a3e8 <xTaskResumeAll+0x118>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d162      	bne.n	800a3d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a312:	4b36      	ldr	r3, [pc, #216]	; (800a3ec <xTaskResumeAll+0x11c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d05e      	beq.n	800a3d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a31a:	e02f      	b.n	800a37c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31c:	4b34      	ldr	r3, [pc, #208]	; (800a3f0 <xTaskResumeAll+0x120>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3318      	adds	r3, #24
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe fff3 	bl	8009314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3304      	adds	r3, #4
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe ffee 	bl	8009314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33c:	4b2d      	ldr	r3, [pc, #180]	; (800a3f4 <xTaskResumeAll+0x124>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	d903      	bls.n	800a34c <xTaskResumeAll+0x7c>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a348:	4a2a      	ldr	r2, [pc, #168]	; (800a3f4 <xTaskResumeAll+0x124>)
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4a27      	ldr	r2, [pc, #156]	; (800a3f8 <xTaskResumeAll+0x128>)
 800a35a:	441a      	add	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3304      	adds	r3, #4
 800a360:	4619      	mov	r1, r3
 800a362:	4610      	mov	r0, r2
 800a364:	f7fe ff79 	bl	800925a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36c:	4b23      	ldr	r3, [pc, #140]	; (800a3fc <xTaskResumeAll+0x12c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a372:	429a      	cmp	r2, r3
 800a374:	d302      	bcc.n	800a37c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a376:	4b22      	ldr	r3, [pc, #136]	; (800a400 <xTaskResumeAll+0x130>)
 800a378:	2201      	movs	r2, #1
 800a37a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a37c:	4b1c      	ldr	r3, [pc, #112]	; (800a3f0 <xTaskResumeAll+0x120>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1cb      	bne.n	800a31c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a38a:	f000 fb91 	bl	800aab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a38e:	4b1d      	ldr	r3, [pc, #116]	; (800a404 <xTaskResumeAll+0x134>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d010      	beq.n	800a3bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a39a:	f000 f847 	bl	800a42c <xTaskIncrementTick>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3a4:	4b16      	ldr	r3, [pc, #88]	; (800a400 <xTaskResumeAll+0x130>)
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1f1      	bne.n	800a39a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3b6:	4b13      	ldr	r3, [pc, #76]	; (800a404 <xTaskResumeAll+0x134>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3bc:	4b10      	ldr	r3, [pc, #64]	; (800a400 <xTaskResumeAll+0x130>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d009      	beq.n	800a3d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3c8:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <xTaskResumeAll+0x138>)
 800a3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3d8:	f001 f92c 	bl	800b634 <vPortExitCritical>

	return xAlreadyYielded;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20000d08 	.word	0x20000d08
 800a3ec:	20000ce0 	.word	0x20000ce0
 800a3f0:	20000ca0 	.word	0x20000ca0
 800a3f4:	20000ce8 	.word	0x20000ce8
 800a3f8:	20000810 	.word	0x20000810
 800a3fc:	2000080c 	.word	0x2000080c
 800a400:	20000cf4 	.word	0x20000cf4
 800a404:	20000cf0 	.word	0x20000cf0
 800a408:	e000ed04 	.word	0xe000ed04

0800a40c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a412:	4b05      	ldr	r3, [pc, #20]	; (800a428 <xTaskGetTickCount+0x1c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a418:	687b      	ldr	r3, [r7, #4]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20000ce4 	.word	0x20000ce4

0800a42c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a436:	4b4f      	ldr	r3, [pc, #316]	; (800a574 <xTaskIncrementTick+0x148>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f040 808f 	bne.w	800a55e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a440:	4b4d      	ldr	r3, [pc, #308]	; (800a578 <xTaskIncrementTick+0x14c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3301      	adds	r3, #1
 800a446:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a448:	4a4b      	ldr	r2, [pc, #300]	; (800a578 <xTaskIncrementTick+0x14c>)
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d120      	bne.n	800a496 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a454:	4b49      	ldr	r3, [pc, #292]	; (800a57c <xTaskIncrementTick+0x150>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <xTaskIncrementTick+0x48>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	603b      	str	r3, [r7, #0]
}
 800a470:	bf00      	nop
 800a472:	e7fe      	b.n	800a472 <xTaskIncrementTick+0x46>
 800a474:	4b41      	ldr	r3, [pc, #260]	; (800a57c <xTaskIncrementTick+0x150>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	60fb      	str	r3, [r7, #12]
 800a47a:	4b41      	ldr	r3, [pc, #260]	; (800a580 <xTaskIncrementTick+0x154>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a3f      	ldr	r2, [pc, #252]	; (800a57c <xTaskIncrementTick+0x150>)
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	4a3f      	ldr	r2, [pc, #252]	; (800a580 <xTaskIncrementTick+0x154>)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	4b3e      	ldr	r3, [pc, #248]	; (800a584 <xTaskIncrementTick+0x158>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3301      	adds	r3, #1
 800a48e:	4a3d      	ldr	r2, [pc, #244]	; (800a584 <xTaskIncrementTick+0x158>)
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	f000 fb0d 	bl	800aab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a496:	4b3c      	ldr	r3, [pc, #240]	; (800a588 <xTaskIncrementTick+0x15c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d349      	bcc.n	800a534 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4a0:	4b36      	ldr	r3, [pc, #216]	; (800a57c <xTaskIncrementTick+0x150>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d104      	bne.n	800a4b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4aa:	4b37      	ldr	r3, [pc, #220]	; (800a588 <xTaskIncrementTick+0x15c>)
 800a4ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4b0:	601a      	str	r2, [r3, #0]
					break;
 800a4b2:	e03f      	b.n	800a534 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4b4:	4b31      	ldr	r3, [pc, #196]	; (800a57c <xTaskIncrementTick+0x150>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d203      	bcs.n	800a4d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4cc:	4a2e      	ldr	r2, [pc, #184]	; (800a588 <xTaskIncrementTick+0x15c>)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4d2:	e02f      	b.n	800a534 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fe ff1b 	bl	8009314 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d004      	beq.n	800a4f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	3318      	adds	r3, #24
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe ff12 	bl	8009314 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f4:	4b25      	ldr	r3, [pc, #148]	; (800a58c <xTaskIncrementTick+0x160>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d903      	bls.n	800a504 <xTaskIncrementTick+0xd8>
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	4a22      	ldr	r2, [pc, #136]	; (800a58c <xTaskIncrementTick+0x160>)
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a508:	4613      	mov	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4a1f      	ldr	r2, [pc, #124]	; (800a590 <xTaskIncrementTick+0x164>)
 800a512:	441a      	add	r2, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	3304      	adds	r3, #4
 800a518:	4619      	mov	r1, r3
 800a51a:	4610      	mov	r0, r2
 800a51c:	f7fe fe9d 	bl	800925a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a524:	4b1b      	ldr	r3, [pc, #108]	; (800a594 <xTaskIncrementTick+0x168>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d3b8      	bcc.n	800a4a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a52e:	2301      	movs	r3, #1
 800a530:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a532:	e7b5      	b.n	800a4a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a534:	4b17      	ldr	r3, [pc, #92]	; (800a594 <xTaskIncrementTick+0x168>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53a:	4915      	ldr	r1, [pc, #84]	; (800a590 <xTaskIncrementTick+0x164>)
 800a53c:	4613      	mov	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	440b      	add	r3, r1
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d901      	bls.n	800a550 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a54c:	2301      	movs	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a550:	4b11      	ldr	r3, [pc, #68]	; (800a598 <xTaskIncrementTick+0x16c>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d007      	beq.n	800a568 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a558:	2301      	movs	r3, #1
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	e004      	b.n	800a568 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a55e:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <xTaskIncrementTick+0x170>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3301      	adds	r3, #1
 800a564:	4a0d      	ldr	r2, [pc, #52]	; (800a59c <xTaskIncrementTick+0x170>)
 800a566:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a568:	697b      	ldr	r3, [r7, #20]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000d08 	.word	0x20000d08
 800a578:	20000ce4 	.word	0x20000ce4
 800a57c:	20000c98 	.word	0x20000c98
 800a580:	20000c9c 	.word	0x20000c9c
 800a584:	20000cf8 	.word	0x20000cf8
 800a588:	20000d00 	.word	0x20000d00
 800a58c:	20000ce8 	.word	0x20000ce8
 800a590:	20000810 	.word	0x20000810
 800a594:	2000080c 	.word	0x2000080c
 800a598:	20000cf4 	.word	0x20000cf4
 800a59c:	20000cf0 	.word	0x20000cf0

0800a5a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5a6:	4b28      	ldr	r3, [pc, #160]	; (800a648 <vTaskSwitchContext+0xa8>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5ae:	4b27      	ldr	r3, [pc, #156]	; (800a64c <vTaskSwitchContext+0xac>)
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5b4:	e041      	b.n	800a63a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a5b6:	4b25      	ldr	r3, [pc, #148]	; (800a64c <vTaskSwitchContext+0xac>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5bc:	4b24      	ldr	r3, [pc, #144]	; (800a650 <vTaskSwitchContext+0xb0>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	60fb      	str	r3, [r7, #12]
 800a5c2:	e010      	b.n	800a5e6 <vTaskSwitchContext+0x46>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10a      	bne.n	800a5e0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	607b      	str	r3, [r7, #4]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <vTaskSwitchContext+0x3e>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	491b      	ldr	r1, [pc, #108]	; (800a654 <vTaskSwitchContext+0xb4>)
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	440b      	add	r3, r1
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0e4      	beq.n	800a5c4 <vTaskSwitchContext+0x24>
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4a13      	ldr	r2, [pc, #76]	; (800a654 <vTaskSwitchContext+0xb4>)
 800a606:	4413      	add	r3, r2
 800a608:	60bb      	str	r3, [r7, #8]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	605a      	str	r2, [r3, #4]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	3308      	adds	r3, #8
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d104      	bne.n	800a62a <vTaskSwitchContext+0x8a>
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	605a      	str	r2, [r3, #4]
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	4a09      	ldr	r2, [pc, #36]	; (800a658 <vTaskSwitchContext+0xb8>)
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	4a06      	ldr	r2, [pc, #24]	; (800a650 <vTaskSwitchContext+0xb0>)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6013      	str	r3, [r2, #0]
}
 800a63a:	bf00      	nop
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	20000d08 	.word	0x20000d08
 800a64c:	20000cf4 	.word	0x20000cf4
 800a650:	20000ce8 	.word	0x20000ce8
 800a654:	20000810 	.word	0x20000810
 800a658:	2000080c 	.word	0x2000080c

0800a65c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10a      	bne.n	800a682 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	60fb      	str	r3, [r7, #12]
}
 800a67e:	bf00      	nop
 800a680:	e7fe      	b.n	800a680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a682:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <vTaskPlaceOnEventList+0x44>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3318      	adds	r3, #24
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7fe fe09 	bl	80092a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a690:	2101      	movs	r1, #1
 800a692:	6838      	ldr	r0, [r7, #0]
 800a694:	f000 fad0 	bl	800ac38 <prvAddCurrentTaskToDelayedList>
}
 800a698:	bf00      	nop
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	2000080c 	.word	0x2000080c

0800a6a4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10a      	bne.n	800a6cc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	617b      	str	r3, [r7, #20]
}
 800a6c8:	bf00      	nop
 800a6ca:	e7fe      	b.n	800a6ca <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a6cc:	4b11      	ldr	r3, [pc, #68]	; (800a714 <vTaskPlaceOnUnorderedEventList+0x70>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10a      	bne.n	800a6ea <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	613b      	str	r3, [r7, #16]
}
 800a6e6:	bf00      	nop
 800a6e8:	e7fe      	b.n	800a6e8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a6ea:	4b0b      	ldr	r3, [pc, #44]	; (800a718 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a6f4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6f6:	4b08      	ldr	r3, [pc, #32]	; (800a718 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	3318      	adds	r3, #24
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7fe fdab 	bl	800925a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a704:	2101      	movs	r1, #1
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fa96 	bl	800ac38 <prvAddCurrentTaskToDelayedList>
}
 800a70c:	bf00      	nop
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	20000d08 	.word	0x20000d08
 800a718:	2000080c 	.word	0x2000080c

0800a71c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10a      	bne.n	800a744 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	617b      	str	r3, [r7, #20]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a744:	4b0a      	ldr	r3, [pc, #40]	; (800a770 <vTaskPlaceOnEventListRestricted+0x54>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3318      	adds	r3, #24
 800a74a:	4619      	mov	r1, r3
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f7fe fd84 	bl	800925a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a75c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	68b8      	ldr	r0, [r7, #8]
 800a762:	f000 fa69 	bl	800ac38 <prvAddCurrentTaskToDelayedList>
	}
 800a766:	bf00      	nop
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	2000080c 	.word	0x2000080c

0800a774 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	60fb      	str	r3, [r7, #12]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	3318      	adds	r3, #24
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe fdb5 	bl	8009314 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7aa:	4b1e      	ldr	r3, [pc, #120]	; (800a824 <xTaskRemoveFromEventList+0xb0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d11d      	bne.n	800a7ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fe fdac 	bl	8009314 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c0:	4b19      	ldr	r3, [pc, #100]	; (800a828 <xTaskRemoveFromEventList+0xb4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d903      	bls.n	800a7d0 <xTaskRemoveFromEventList+0x5c>
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7cc:	4a16      	ldr	r2, [pc, #88]	; (800a828 <xTaskRemoveFromEventList+0xb4>)
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4a13      	ldr	r2, [pc, #76]	; (800a82c <xTaskRemoveFromEventList+0xb8>)
 800a7de:	441a      	add	r2, r3
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f7fe fd37 	bl	800925a <vListInsertEnd>
 800a7ec:	e005      	b.n	800a7fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	3318      	adds	r3, #24
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	480e      	ldr	r0, [pc, #56]	; (800a830 <xTaskRemoveFromEventList+0xbc>)
 800a7f6:	f7fe fd30 	bl	800925a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7fe:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <xTaskRemoveFromEventList+0xc0>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	429a      	cmp	r2, r3
 800a806:	d905      	bls.n	800a814 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a808:	2301      	movs	r3, #1
 800a80a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a80c:	4b0a      	ldr	r3, [pc, #40]	; (800a838 <xTaskRemoveFromEventList+0xc4>)
 800a80e:	2201      	movs	r2, #1
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	e001      	b.n	800a818 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a814:	2300      	movs	r3, #0
 800a816:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a818:	697b      	ldr	r3, [r7, #20]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20000d08 	.word	0x20000d08
 800a828:	20000ce8 	.word	0x20000ce8
 800a82c:	20000810 	.word	0x20000810
 800a830:	20000ca0 	.word	0x20000ca0
 800a834:	2000080c 	.word	0x2000080c
 800a838:	20000cf4 	.word	0x20000cf4

0800a83c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a844:	4b06      	ldr	r3, [pc, #24]	; (800a860 <vTaskInternalSetTimeOutState+0x24>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a84c:	4b05      	ldr	r3, [pc, #20]	; (800a864 <vTaskInternalSetTimeOutState+0x28>)
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	605a      	str	r2, [r3, #4]
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	20000cf8 	.word	0x20000cf8
 800a864:	20000ce4 	.word	0x20000ce4

0800a868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10a      	bne.n	800a88e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	613b      	str	r3, [r7, #16]
}
 800a88a:	bf00      	nop
 800a88c:	e7fe      	b.n	800a88c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10a      	bne.n	800a8aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	60fb      	str	r3, [r7, #12]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a8aa:	f000 fe93 	bl	800b5d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8ae:	4b1d      	ldr	r3, [pc, #116]	; (800a924 <xTaskCheckForTimeOut+0xbc>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	69ba      	ldr	r2, [r7, #24]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8c6:	d102      	bne.n	800a8ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	61fb      	str	r3, [r7, #28]
 800a8cc:	e023      	b.n	800a916 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	4b15      	ldr	r3, [pc, #84]	; (800a928 <xTaskCheckForTimeOut+0xc0>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d007      	beq.n	800a8ea <xTaskCheckForTimeOut+0x82>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	69ba      	ldr	r2, [r7, #24]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d302      	bcc.n	800a8ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	e015      	b.n	800a916 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d20b      	bcs.n	800a90c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	1ad2      	subs	r2, r2, r3
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff ff9b 	bl	800a83c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	61fb      	str	r3, [r7, #28]
 800a90a:	e004      	b.n	800a916 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2200      	movs	r2, #0
 800a910:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a912:	2301      	movs	r3, #1
 800a914:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a916:	f000 fe8d 	bl	800b634 <vPortExitCritical>

	return xReturn;
 800a91a:	69fb      	ldr	r3, [r7, #28]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000ce4 	.word	0x20000ce4
 800a928:	20000cf8 	.word	0x20000cf8

0800a92c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a92c:	b480      	push	{r7}
 800a92e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a930:	4b03      	ldr	r3, [pc, #12]	; (800a940 <vTaskMissedYield+0x14>)
 800a932:	2201      	movs	r2, #1
 800a934:	601a      	str	r2, [r3, #0]
}
 800a936:	bf00      	nop
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	20000cf4 	.word	0x20000cf4

0800a944 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a94c:	f000 f852 	bl	800a9f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a950:	4b06      	ldr	r3, [pc, #24]	; (800a96c <prvIdleTask+0x28>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d9f9      	bls.n	800a94c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a958:	4b05      	ldr	r3, [pc, #20]	; (800a970 <prvIdleTask+0x2c>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a968:	e7f0      	b.n	800a94c <prvIdleTask+0x8>
 800a96a:	bf00      	nop
 800a96c:	20000810 	.word	0x20000810
 800a970:	e000ed04 	.word	0xe000ed04

0800a974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a97a:	2300      	movs	r3, #0
 800a97c:	607b      	str	r3, [r7, #4]
 800a97e:	e00c      	b.n	800a99a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4a12      	ldr	r2, [pc, #72]	; (800a9d4 <prvInitialiseTaskLists+0x60>)
 800a98c:	4413      	add	r3, r2
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe fc36 	bl	8009200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3301      	adds	r3, #1
 800a998:	607b      	str	r3, [r7, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b37      	cmp	r3, #55	; 0x37
 800a99e:	d9ef      	bls.n	800a980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9a0:	480d      	ldr	r0, [pc, #52]	; (800a9d8 <prvInitialiseTaskLists+0x64>)
 800a9a2:	f7fe fc2d 	bl	8009200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9a6:	480d      	ldr	r0, [pc, #52]	; (800a9dc <prvInitialiseTaskLists+0x68>)
 800a9a8:	f7fe fc2a 	bl	8009200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9ac:	480c      	ldr	r0, [pc, #48]	; (800a9e0 <prvInitialiseTaskLists+0x6c>)
 800a9ae:	f7fe fc27 	bl	8009200 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9b2:	480c      	ldr	r0, [pc, #48]	; (800a9e4 <prvInitialiseTaskLists+0x70>)
 800a9b4:	f7fe fc24 	bl	8009200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9b8:	480b      	ldr	r0, [pc, #44]	; (800a9e8 <prvInitialiseTaskLists+0x74>)
 800a9ba:	f7fe fc21 	bl	8009200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9be:	4b0b      	ldr	r3, [pc, #44]	; (800a9ec <prvInitialiseTaskLists+0x78>)
 800a9c0:	4a05      	ldr	r2, [pc, #20]	; (800a9d8 <prvInitialiseTaskLists+0x64>)
 800a9c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9c4:	4b0a      	ldr	r3, [pc, #40]	; (800a9f0 <prvInitialiseTaskLists+0x7c>)
 800a9c6:	4a05      	ldr	r2, [pc, #20]	; (800a9dc <prvInitialiseTaskLists+0x68>)
 800a9c8:	601a      	str	r2, [r3, #0]
}
 800a9ca:	bf00      	nop
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000810 	.word	0x20000810
 800a9d8:	20000c70 	.word	0x20000c70
 800a9dc:	20000c84 	.word	0x20000c84
 800a9e0:	20000ca0 	.word	0x20000ca0
 800a9e4:	20000cb4 	.word	0x20000cb4
 800a9e8:	20000ccc 	.word	0x20000ccc
 800a9ec:	20000c98 	.word	0x20000c98
 800a9f0:	20000c9c 	.word	0x20000c9c

0800a9f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9fa:	e019      	b.n	800aa30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9fc:	f000 fdea 	bl	800b5d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa00:	4b10      	ldr	r3, [pc, #64]	; (800aa44 <prvCheckTasksWaitingTermination+0x50>)
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe fc81 	bl	8009314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa12:	4b0d      	ldr	r3, [pc, #52]	; (800aa48 <prvCheckTasksWaitingTermination+0x54>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	4a0b      	ldr	r2, [pc, #44]	; (800aa48 <prvCheckTasksWaitingTermination+0x54>)
 800aa1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa1c:	4b0b      	ldr	r3, [pc, #44]	; (800aa4c <prvCheckTasksWaitingTermination+0x58>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	4a0a      	ldr	r2, [pc, #40]	; (800aa4c <prvCheckTasksWaitingTermination+0x58>)
 800aa24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa26:	f000 fe05 	bl	800b634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f810 	bl	800aa50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa30:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <prvCheckTasksWaitingTermination+0x58>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e1      	bne.n	800a9fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000cb4 	.word	0x20000cb4
 800aa48:	20000ce0 	.word	0x20000ce0
 800aa4c:	20000cc8 	.word	0x20000cc8

0800aa50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d108      	bne.n	800aa74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 ffa2 	bl	800b9b0 <vPortFree>
				vPortFree( pxTCB );
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 ff9f 	bl	800b9b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa72:	e018      	b.n	800aaa6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d103      	bne.n	800aa86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 ff96 	bl	800b9b0 <vPortFree>
	}
 800aa84:	e00f      	b.n	800aaa6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d00a      	beq.n	800aaa6 <prvDeleteTCB+0x56>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60fb      	str	r3, [r7, #12]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <prvDeleteTCB+0x54>
	}
 800aaa6:	bf00      	nop
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aab6:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <prvResetNextTaskUnblockTime+0x38>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d104      	bne.n	800aaca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aac0:	4b0a      	ldr	r3, [pc, #40]	; (800aaec <prvResetNextTaskUnblockTime+0x3c>)
 800aac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aac8:	e008      	b.n	800aadc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaca:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <prvResetNextTaskUnblockTime+0x38>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	4a04      	ldr	r2, [pc, #16]	; (800aaec <prvResetNextTaskUnblockTime+0x3c>)
 800aada:	6013      	str	r3, [r2, #0]
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	20000c98 	.word	0x20000c98
 800aaec:	20000d00 	.word	0x20000d00

0800aaf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aaf6:	4b0b      	ldr	r3, [pc, #44]	; (800ab24 <xTaskGetSchedulerState+0x34>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aafe:	2301      	movs	r3, #1
 800ab00:	607b      	str	r3, [r7, #4]
 800ab02:	e008      	b.n	800ab16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab04:	4b08      	ldr	r3, [pc, #32]	; (800ab28 <xTaskGetSchedulerState+0x38>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d102      	bne.n	800ab12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	607b      	str	r3, [r7, #4]
 800ab10:	e001      	b.n	800ab16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab16:	687b      	ldr	r3, [r7, #4]
	}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	20000cec 	.word	0x20000cec
 800ab28:	20000d08 	.word	0x20000d08

0800ab2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d056      	beq.n	800abf0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab42:	4b2e      	ldr	r3, [pc, #184]	; (800abfc <xTaskPriorityDisinherit+0xd0>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d00a      	beq.n	800ab62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	60fb      	str	r3, [r7, #12]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10a      	bne.n	800ab80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	60bb      	str	r3, [r7, #8]
}
 800ab7c:	bf00      	nop
 800ab7e:	e7fe      	b.n	800ab7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab84:	1e5a      	subs	r2, r3, #1
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d02c      	beq.n	800abf0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d128      	bne.n	800abf0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	3304      	adds	r3, #4
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fbb6 	bl	8009314 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc0:	4b0f      	ldr	r3, [pc, #60]	; (800ac00 <xTaskPriorityDisinherit+0xd4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d903      	bls.n	800abd0 <xTaskPriorityDisinherit+0xa4>
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abcc:	4a0c      	ldr	r2, [pc, #48]	; (800ac00 <xTaskPriorityDisinherit+0xd4>)
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd4:	4613      	mov	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4413      	add	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4a09      	ldr	r2, [pc, #36]	; (800ac04 <xTaskPriorityDisinherit+0xd8>)
 800abde:	441a      	add	r2, r3
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4619      	mov	r1, r3
 800abe6:	4610      	mov	r0, r2
 800abe8:	f7fe fb37 	bl	800925a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800abec:	2301      	movs	r3, #1
 800abee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abf0:	697b      	ldr	r3, [r7, #20]
	}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	2000080c 	.word	0x2000080c
 800ac00:	20000ce8 	.word	0x20000ce8
 800ac04:	20000810 	.word	0x20000810

0800ac08 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ac0e:	4b09      	ldr	r3, [pc, #36]	; (800ac34 <uxTaskResetEventItemValue+0x2c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac16:	4b07      	ldr	r3, [pc, #28]	; (800ac34 <uxTaskResetEventItemValue+0x2c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1c:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <uxTaskResetEventItemValue+0x2c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ac24:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ac26:	687b      	ldr	r3, [r7, #4]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	2000080c 	.word	0x2000080c

0800ac38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac42:	4b21      	ldr	r3, [pc, #132]	; (800acc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac48:	4b20      	ldr	r3, [pc, #128]	; (800accc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe fb60 	bl	8009314 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac5a:	d10a      	bne.n	800ac72 <prvAddCurrentTaskToDelayedList+0x3a>
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d007      	beq.n	800ac72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac62:	4b1a      	ldr	r3, [pc, #104]	; (800accc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3304      	adds	r3, #4
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4819      	ldr	r0, [pc, #100]	; (800acd0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac6c:	f7fe faf5 	bl	800925a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac70:	e026      	b.n	800acc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4413      	add	r3, r2
 800ac78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac7a:	4b14      	ldr	r3, [pc, #80]	; (800accc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d209      	bcs.n	800ac9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac8a:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	4b0f      	ldr	r3, [pc, #60]	; (800accc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3304      	adds	r3, #4
 800ac94:	4619      	mov	r1, r3
 800ac96:	4610      	mov	r0, r2
 800ac98:	f7fe fb03 	bl	80092a2 <vListInsert>
}
 800ac9c:	e010      	b.n	800acc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac9e:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	4b0a      	ldr	r3, [pc, #40]	; (800accc <prvAddCurrentTaskToDelayedList+0x94>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3304      	adds	r3, #4
 800aca8:	4619      	mov	r1, r3
 800acaa:	4610      	mov	r0, r2
 800acac:	f7fe faf9 	bl	80092a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acb0:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d202      	bcs.n	800acc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acba:	4a08      	ldr	r2, [pc, #32]	; (800acdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	6013      	str	r3, [r2, #0]
}
 800acc0:	bf00      	nop
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	20000ce4 	.word	0x20000ce4
 800accc:	2000080c 	.word	0x2000080c
 800acd0:	20000ccc 	.word	0x20000ccc
 800acd4:	20000c9c 	.word	0x20000c9c
 800acd8:	20000c98 	.word	0x20000c98
 800acdc:	20000d00 	.word	0x20000d00

0800ace0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08a      	sub	sp, #40	; 0x28
 800ace4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acea:	f000 fb07 	bl	800b2fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acee:	4b1c      	ldr	r3, [pc, #112]	; (800ad60 <xTimerCreateTimerTask+0x80>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d021      	beq.n	800ad3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800acfe:	1d3a      	adds	r2, r7, #4
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	f107 030c 	add.w	r3, r7, #12
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe f91d 	bl	8008f48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	9202      	str	r2, [sp, #8]
 800ad16:	9301      	str	r3, [sp, #4]
 800ad18:	2302      	movs	r3, #2
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	460a      	mov	r2, r1
 800ad20:	4910      	ldr	r1, [pc, #64]	; (800ad64 <xTimerCreateTimerTask+0x84>)
 800ad22:	4811      	ldr	r0, [pc, #68]	; (800ad68 <xTimerCreateTimerTask+0x88>)
 800ad24:	f7ff f80c 	bl	8009d40 <xTaskCreateStatic>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	4a10      	ldr	r2, [pc, #64]	; (800ad6c <xTimerCreateTimerTask+0x8c>)
 800ad2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad2e:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <xTimerCreateTimerTask+0x8c>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad36:	2301      	movs	r3, #1
 800ad38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10a      	bne.n	800ad56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	613b      	str	r3, [r7, #16]
}
 800ad52:	bf00      	nop
 800ad54:	e7fe      	b.n	800ad54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad56:	697b      	ldr	r3, [r7, #20]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	20000d3c 	.word	0x20000d3c
 800ad64:	0800ce18 	.word	0x0800ce18
 800ad68:	0800aea5 	.word	0x0800aea5
 800ad6c:	20000d40 	.word	0x20000d40

0800ad70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08a      	sub	sp, #40	; 0x28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	623b      	str	r3, [r7, #32]
}
 800ad9a:	bf00      	nop
 800ad9c:	e7fe      	b.n	800ad9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad9e:	4b1a      	ldr	r3, [pc, #104]	; (800ae08 <xTimerGenericCommand+0x98>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d02a      	beq.n	800adfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	2b05      	cmp	r3, #5
 800adb6:	dc18      	bgt.n	800adea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adb8:	f7ff fe9a 	bl	800aaf0 <xTaskGetSchedulerState>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d109      	bne.n	800add6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800adc2:	4b11      	ldr	r3, [pc, #68]	; (800ae08 <xTimerGenericCommand+0x98>)
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	f107 0110 	add.w	r1, r7, #16
 800adca:	2300      	movs	r3, #0
 800adcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adce:	f7fe fbcf 	bl	8009570 <xQueueGenericSend>
 800add2:	6278      	str	r0, [r7, #36]	; 0x24
 800add4:	e012      	b.n	800adfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800add6:	4b0c      	ldr	r3, [pc, #48]	; (800ae08 <xTimerGenericCommand+0x98>)
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	f107 0110 	add.w	r1, r7, #16
 800adde:	2300      	movs	r3, #0
 800ade0:	2200      	movs	r2, #0
 800ade2:	f7fe fbc5 	bl	8009570 <xQueueGenericSend>
 800ade6:	6278      	str	r0, [r7, #36]	; 0x24
 800ade8:	e008      	b.n	800adfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adea:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <xTimerGenericCommand+0x98>)
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	f107 0110 	add.w	r1, r7, #16
 800adf2:	2300      	movs	r3, #0
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	f7fe fcb9 	bl	800976c <xQueueGenericSendFromISR>
 800adfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3728      	adds	r7, #40	; 0x28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	20000d3c 	.word	0x20000d3c

0800ae0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae16:	4b22      	ldr	r3, [pc, #136]	; (800aea0 <prvProcessExpiredTimer+0x94>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	3304      	adds	r3, #4
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fe fa75 	bl	8009314 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae30:	f003 0304 	and.w	r3, r3, #4
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d022      	beq.n	800ae7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	699a      	ldr	r2, [r3, #24]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	18d1      	adds	r1, r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	6978      	ldr	r0, [r7, #20]
 800ae46:	f000 f8d1 	bl	800afec <prvInsertTimerInActiveList>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d01f      	beq.n	800ae90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae50:	2300      	movs	r3, #0
 800ae52:	9300      	str	r3, [sp, #0]
 800ae54:	2300      	movs	r3, #0
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	2100      	movs	r1, #0
 800ae5a:	6978      	ldr	r0, [r7, #20]
 800ae5c:	f7ff ff88 	bl	800ad70 <xTimerGenericCommand>
 800ae60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d113      	bne.n	800ae90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ae68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	60fb      	str	r3, [r7, #12]
}
 800ae7a:	bf00      	nop
 800ae7c:	e7fe      	b.n	800ae7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae84:	f023 0301 	bic.w	r3, r3, #1
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	6978      	ldr	r0, [r7, #20]
 800ae96:	4798      	blx	r3
}
 800ae98:	bf00      	nop
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20000d34 	.word	0x20000d34

0800aea4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aeac:	f107 0308 	add.w	r3, r7, #8
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 f857 	bl	800af64 <prvGetNextExpireTime>
 800aeb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	4619      	mov	r1, r3
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f000 f803 	bl	800aec8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aec2:	f000 f8d5 	bl	800b070 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aec6:	e7f1      	b.n	800aeac <prvTimerTask+0x8>

0800aec8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aed2:	f7ff f9ef 	bl	800a2b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aed6:	f107 0308 	add.w	r3, r7, #8
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 f866 	bl	800afac <prvSampleTimeNow>
 800aee0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d130      	bne.n	800af4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <prvProcessTimerOrBlockTask+0x3c>
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d806      	bhi.n	800af04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aef6:	f7ff f9eb 	bl	800a2d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aefa:	68f9      	ldr	r1, [r7, #12]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff ff85 	bl	800ae0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af02:	e024      	b.n	800af4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d008      	beq.n	800af1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af0a:	4b13      	ldr	r3, [pc, #76]	; (800af58 <prvProcessTimerOrBlockTask+0x90>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <prvProcessTimerOrBlockTask+0x50>
 800af14:	2301      	movs	r3, #1
 800af16:	e000      	b.n	800af1a <prvProcessTimerOrBlockTask+0x52>
 800af18:	2300      	movs	r3, #0
 800af1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af1c:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <prvProcessTimerOrBlockTask+0x94>)
 800af1e:	6818      	ldr	r0, [r3, #0]
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	4619      	mov	r1, r3
 800af2a:	f7fe fed5 	bl	8009cd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af2e:	f7ff f9cf 	bl	800a2d0 <xTaskResumeAll>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10a      	bne.n	800af4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af38:	4b09      	ldr	r3, [pc, #36]	; (800af60 <prvProcessTimerOrBlockTask+0x98>)
 800af3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	f3bf 8f6f 	isb	sy
}
 800af48:	e001      	b.n	800af4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af4a:	f7ff f9c1 	bl	800a2d0 <xTaskResumeAll>
}
 800af4e:	bf00      	nop
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000d38 	.word	0x20000d38
 800af5c:	20000d3c 	.word	0x20000d3c
 800af60:	e000ed04 	.word	0xe000ed04

0800af64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af6c:	4b0e      	ldr	r3, [pc, #56]	; (800afa8 <prvGetNextExpireTime+0x44>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <prvGetNextExpireTime+0x16>
 800af76:	2201      	movs	r2, #1
 800af78:	e000      	b.n	800af7c <prvGetNextExpireTime+0x18>
 800af7a:	2200      	movs	r2, #0
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d105      	bne.n	800af94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <prvGetNextExpireTime+0x44>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	e001      	b.n	800af98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af94:	2300      	movs	r3, #0
 800af96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af98:	68fb      	ldr	r3, [r7, #12]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	20000d34 	.word	0x20000d34

0800afac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800afb4:	f7ff fa2a 	bl	800a40c <xTaskGetTickCount>
 800afb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800afba:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <prvSampleTimeNow+0x3c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d205      	bcs.n	800afd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afc4:	f000 f936 	bl	800b234 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	e002      	b.n	800afd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afd6:	4a04      	ldr	r2, [pc, #16]	; (800afe8 <prvSampleTimeNow+0x3c>)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afdc:	68fb      	ldr	r3, [r7, #12]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20000d44 	.word	0x20000d44

0800afec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800affa:	2300      	movs	r3, #0
 800affc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d812      	bhi.n	800b038 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	1ad2      	subs	r2, r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d302      	bcc.n	800b026 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b020:	2301      	movs	r3, #1
 800b022:	617b      	str	r3, [r7, #20]
 800b024:	e01b      	b.n	800b05e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b026:	4b10      	ldr	r3, [pc, #64]	; (800b068 <prvInsertTimerInActiveList+0x7c>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3304      	adds	r3, #4
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7fe f936 	bl	80092a2 <vListInsert>
 800b036:	e012      	b.n	800b05e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d206      	bcs.n	800b04e <prvInsertTimerInActiveList+0x62>
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	429a      	cmp	r2, r3
 800b046:	d302      	bcc.n	800b04e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b048:	2301      	movs	r3, #1
 800b04a:	617b      	str	r3, [r7, #20]
 800b04c:	e007      	b.n	800b05e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b04e:	4b07      	ldr	r3, [pc, #28]	; (800b06c <prvInsertTimerInActiveList+0x80>)
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3304      	adds	r3, #4
 800b056:	4619      	mov	r1, r3
 800b058:	4610      	mov	r0, r2
 800b05a:	f7fe f922 	bl	80092a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b05e:	697b      	ldr	r3, [r7, #20]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20000d38 	.word	0x20000d38
 800b06c:	20000d34 	.word	0x20000d34

0800b070 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b08e      	sub	sp, #56	; 0x38
 800b074:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b076:	e0ca      	b.n	800b20e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	da18      	bge.n	800b0b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b07e:	1d3b      	adds	r3, r7, #4
 800b080:	3304      	adds	r3, #4
 800b082:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10a      	bne.n	800b0a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	61fb      	str	r3, [r7, #28]
}
 800b09c:	bf00      	nop
 800b09e:	e7fe      	b.n	800b09e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0a6:	6850      	ldr	r0, [r2, #4]
 800b0a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0aa:	6892      	ldr	r2, [r2, #8]
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f2c0 80aa 	blt.w	800b20c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe f923 	bl	8009314 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0ce:	463b      	mov	r3, r7
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff ff6b 	bl	800afac <prvSampleTimeNow>
 800b0d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b09      	cmp	r3, #9
 800b0dc:	f200 8097 	bhi.w	800b20e <prvProcessReceivedCommands+0x19e>
 800b0e0:	a201      	add	r2, pc, #4	; (adr r2, 800b0e8 <prvProcessReceivedCommands+0x78>)
 800b0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e6:	bf00      	nop
 800b0e8:	0800b111 	.word	0x0800b111
 800b0ec:	0800b111 	.word	0x0800b111
 800b0f0:	0800b111 	.word	0x0800b111
 800b0f4:	0800b185 	.word	0x0800b185
 800b0f8:	0800b199 	.word	0x0800b199
 800b0fc:	0800b1e3 	.word	0x0800b1e3
 800b100:	0800b111 	.word	0x0800b111
 800b104:	0800b111 	.word	0x0800b111
 800b108:	0800b185 	.word	0x0800b185
 800b10c:	0800b199 	.word	0x0800b199
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b116:	f043 0301 	orr.w	r3, r3, #1
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	18d1      	adds	r1, r2, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b12e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b130:	f7ff ff5c 	bl	800afec <prvInsertTimerInActiveList>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d069      	beq.n	800b20e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b140:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b148:	f003 0304 	and.w	r3, r3, #4
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d05e      	beq.n	800b20e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	699b      	ldr	r3, [r3, #24]
 800b156:	441a      	add	r2, r3
 800b158:	2300      	movs	r3, #0
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	2300      	movs	r3, #0
 800b15e:	2100      	movs	r1, #0
 800b160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b162:	f7ff fe05 	bl	800ad70 <xTimerGenericCommand>
 800b166:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d14f      	bne.n	800b20e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	61bb      	str	r3, [r7, #24]
}
 800b180:	bf00      	nop
 800b182:	e7fe      	b.n	800b182 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b18a:	f023 0301 	bic.w	r3, r3, #1
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b196:	e03a      	b.n	800b20e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b19e:	f043 0301 	orr.w	r3, r3, #1
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10a      	bne.n	800b1ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	617b      	str	r3, [r7, #20]
}
 800b1ca:	bf00      	nop
 800b1cc:	e7fe      	b.n	800b1cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d0:	699a      	ldr	r2, [r3, #24]
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	18d1      	adds	r1, r2, r3
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1dc:	f7ff ff06 	bl	800afec <prvInsertTimerInActiveList>
					break;
 800b1e0:	e015      	b.n	800b20e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d103      	bne.n	800b1f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b1f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f2:	f000 fbdd 	bl	800b9b0 <vPortFree>
 800b1f6:	e00a      	b.n	800b20e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1fe:	f023 0301 	bic.w	r3, r3, #1
 800b202:	b2da      	uxtb	r2, r3
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b20a:	e000      	b.n	800b20e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b20c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b20e:	4b08      	ldr	r3, [pc, #32]	; (800b230 <prvProcessReceivedCommands+0x1c0>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	1d39      	adds	r1, r7, #4
 800b214:	2200      	movs	r2, #0
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe fb44 	bl	80098a4 <xQueueReceive>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f47f af2a 	bne.w	800b078 <prvProcessReceivedCommands+0x8>
	}
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop
 800b228:	3730      	adds	r7, #48	; 0x30
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	20000d3c 	.word	0x20000d3c

0800b234 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b23a:	e048      	b.n	800b2ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b23c:	4b2d      	ldr	r3, [pc, #180]	; (800b2f4 <prvSwitchTimerLists+0xc0>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b246:	4b2b      	ldr	r3, [pc, #172]	; (800b2f4 <prvSwitchTimerLists+0xc0>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3304      	adds	r3, #4
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe f85d 	bl	8009314 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b268:	f003 0304 	and.w	r3, r3, #4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d02e      	beq.n	800b2ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	4413      	add	r3, r2
 800b278:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d90e      	bls.n	800b2a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b28e:	4b19      	ldr	r3, [pc, #100]	; (800b2f4 <prvSwitchTimerLists+0xc0>)
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3304      	adds	r3, #4
 800b296:	4619      	mov	r1, r3
 800b298:	4610      	mov	r0, r2
 800b29a:	f7fe f802 	bl	80092a2 <vListInsert>
 800b29e:	e016      	b.n	800b2ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f7ff fd60 	bl	800ad70 <xTimerGenericCommand>
 800b2b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	603b      	str	r3, [r7, #0]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2ce:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <prvSwitchTimerLists+0xc0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1b1      	bne.n	800b23c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2d8:	4b06      	ldr	r3, [pc, #24]	; (800b2f4 <prvSwitchTimerLists+0xc0>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2de:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <prvSwitchTimerLists+0xc4>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a04      	ldr	r2, [pc, #16]	; (800b2f4 <prvSwitchTimerLists+0xc0>)
 800b2e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2e6:	4a04      	ldr	r2, [pc, #16]	; (800b2f8 <prvSwitchTimerLists+0xc4>)
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	6013      	str	r3, [r2, #0]
}
 800b2ec:	bf00      	nop
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20000d34 	.word	0x20000d34
 800b2f8:	20000d38 	.word	0x20000d38

0800b2fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b302:	f000 f967 	bl	800b5d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b306:	4b15      	ldr	r3, [pc, #84]	; (800b35c <prvCheckForValidListAndQueue+0x60>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d120      	bne.n	800b350 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b30e:	4814      	ldr	r0, [pc, #80]	; (800b360 <prvCheckForValidListAndQueue+0x64>)
 800b310:	f7fd ff76 	bl	8009200 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b314:	4813      	ldr	r0, [pc, #76]	; (800b364 <prvCheckForValidListAndQueue+0x68>)
 800b316:	f7fd ff73 	bl	8009200 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b31a:	4b13      	ldr	r3, [pc, #76]	; (800b368 <prvCheckForValidListAndQueue+0x6c>)
 800b31c:	4a10      	ldr	r2, [pc, #64]	; (800b360 <prvCheckForValidListAndQueue+0x64>)
 800b31e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b320:	4b12      	ldr	r3, [pc, #72]	; (800b36c <prvCheckForValidListAndQueue+0x70>)
 800b322:	4a10      	ldr	r2, [pc, #64]	; (800b364 <prvCheckForValidListAndQueue+0x68>)
 800b324:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b326:	2300      	movs	r3, #0
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	4b11      	ldr	r3, [pc, #68]	; (800b370 <prvCheckForValidListAndQueue+0x74>)
 800b32c:	4a11      	ldr	r2, [pc, #68]	; (800b374 <prvCheckForValidListAndQueue+0x78>)
 800b32e:	2110      	movs	r1, #16
 800b330:	200a      	movs	r0, #10
 800b332:	f7fe f881 	bl	8009438 <xQueueGenericCreateStatic>
 800b336:	4603      	mov	r3, r0
 800b338:	4a08      	ldr	r2, [pc, #32]	; (800b35c <prvCheckForValidListAndQueue+0x60>)
 800b33a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b33c:	4b07      	ldr	r3, [pc, #28]	; (800b35c <prvCheckForValidListAndQueue+0x60>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d005      	beq.n	800b350 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b344:	4b05      	ldr	r3, [pc, #20]	; (800b35c <prvCheckForValidListAndQueue+0x60>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	490b      	ldr	r1, [pc, #44]	; (800b378 <prvCheckForValidListAndQueue+0x7c>)
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe fc9a 	bl	8009c84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b350:	f000 f970 	bl	800b634 <vPortExitCritical>
}
 800b354:	bf00      	nop
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	20000d3c 	.word	0x20000d3c
 800b360:	20000d0c 	.word	0x20000d0c
 800b364:	20000d20 	.word	0x20000d20
 800b368:	20000d34 	.word	0x20000d34
 800b36c:	20000d38 	.word	0x20000d38
 800b370:	20000de8 	.word	0x20000de8
 800b374:	20000d48 	.word	0x20000d48
 800b378:	0800ce20 	.word	0x0800ce20

0800b37c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	3b04      	subs	r3, #4
 800b38c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3b04      	subs	r3, #4
 800b39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f023 0201 	bic.w	r2, r3, #1
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3b04      	subs	r3, #4
 800b3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3ac:	4a0c      	ldr	r2, [pc, #48]	; (800b3e0 <pxPortInitialiseStack+0x64>)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3b14      	subs	r3, #20
 800b3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3b04      	subs	r3, #4
 800b3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f06f 0202 	mvn.w	r2, #2
 800b3ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3b20      	subs	r3, #32
 800b3d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	0800b3e5 	.word	0x0800b3e5

0800b3e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3ee:	4b12      	ldr	r3, [pc, #72]	; (800b438 <prvTaskExitError+0x54>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3f6:	d00a      	beq.n	800b40e <prvTaskExitError+0x2a>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	60fb      	str	r3, [r7, #12]
}
 800b40a:	bf00      	nop
 800b40c:	e7fe      	b.n	800b40c <prvTaskExitError+0x28>
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	60bb      	str	r3, [r7, #8]
}
 800b420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b422:	bf00      	nop
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0fc      	beq.n	800b424 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	200000b4 	.word	0x200000b4
 800b43c:	00000000 	.word	0x00000000

0800b440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b440:	4b07      	ldr	r3, [pc, #28]	; (800b460 <pxCurrentTCBConst2>)
 800b442:	6819      	ldr	r1, [r3, #0]
 800b444:	6808      	ldr	r0, [r1, #0]
 800b446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44a:	f380 8809 	msr	PSP, r0
 800b44e:	f3bf 8f6f 	isb	sy
 800b452:	f04f 0000 	mov.w	r0, #0
 800b456:	f380 8811 	msr	BASEPRI, r0
 800b45a:	4770      	bx	lr
 800b45c:	f3af 8000 	nop.w

0800b460 <pxCurrentTCBConst2>:
 800b460:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop

0800b468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b468:	4808      	ldr	r0, [pc, #32]	; (800b48c <prvPortStartFirstTask+0x24>)
 800b46a:	6800      	ldr	r0, [r0, #0]
 800b46c:	6800      	ldr	r0, [r0, #0]
 800b46e:	f380 8808 	msr	MSP, r0
 800b472:	f04f 0000 	mov.w	r0, #0
 800b476:	f380 8814 	msr	CONTROL, r0
 800b47a:	b662      	cpsie	i
 800b47c:	b661      	cpsie	f
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	df00      	svc	0
 800b488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b48a:	bf00      	nop
 800b48c:	e000ed08 	.word	0xe000ed08

0800b490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b496:	4b46      	ldr	r3, [pc, #280]	; (800b5b0 <xPortStartScheduler+0x120>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a46      	ldr	r2, [pc, #280]	; (800b5b4 <xPortStartScheduler+0x124>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d10a      	bne.n	800b4b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	613b      	str	r3, [r7, #16]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4b6:	4b3e      	ldr	r3, [pc, #248]	; (800b5b0 <xPortStartScheduler+0x120>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a3f      	ldr	r2, [pc, #252]	; (800b5b8 <xPortStartScheduler+0x128>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d10a      	bne.n	800b4d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	60fb      	str	r3, [r7, #12]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4d6:	4b39      	ldr	r3, [pc, #228]	; (800b5bc <xPortStartScheduler+0x12c>)
 800b4d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	22ff      	movs	r2, #255	; 0xff
 800b4e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4f0:	78fb      	ldrb	r3, [r7, #3]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	4b31      	ldr	r3, [pc, #196]	; (800b5c0 <xPortStartScheduler+0x130>)
 800b4fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4fe:	4b31      	ldr	r3, [pc, #196]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b500:	2207      	movs	r2, #7
 800b502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b504:	e009      	b.n	800b51a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b506:	4b2f      	ldr	r3, [pc, #188]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	4a2d      	ldr	r2, [pc, #180]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b50e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b510:	78fb      	ldrb	r3, [r7, #3]
 800b512:	b2db      	uxtb	r3, r3
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	b2db      	uxtb	r3, r3
 800b518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b51a:	78fb      	ldrb	r3, [r7, #3]
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b522:	2b80      	cmp	r3, #128	; 0x80
 800b524:	d0ef      	beq.n	800b506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b526:	4b27      	ldr	r3, [pc, #156]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f1c3 0307 	rsb	r3, r3, #7
 800b52e:	2b04      	cmp	r3, #4
 800b530:	d00a      	beq.n	800b548 <xPortStartScheduler+0xb8>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	60bb      	str	r3, [r7, #8]
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b548:	4b1e      	ldr	r3, [pc, #120]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	021b      	lsls	r3, r3, #8
 800b54e:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b552:	4b1c      	ldr	r3, [pc, #112]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b55a:	4a1a      	ldr	r2, [pc, #104]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b55c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	b2da      	uxtb	r2, r3
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b566:	4b18      	ldr	r3, [pc, #96]	; (800b5c8 <xPortStartScheduler+0x138>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a17      	ldr	r2, [pc, #92]	; (800b5c8 <xPortStartScheduler+0x138>)
 800b56c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b572:	4b15      	ldr	r3, [pc, #84]	; (800b5c8 <xPortStartScheduler+0x138>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a14      	ldr	r2, [pc, #80]	; (800b5c8 <xPortStartScheduler+0x138>)
 800b578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b57c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b57e:	f000 f8dd 	bl	800b73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b582:	4b12      	ldr	r3, [pc, #72]	; (800b5cc <xPortStartScheduler+0x13c>)
 800b584:	2200      	movs	r2, #0
 800b586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b588:	f000 f8fc 	bl	800b784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b58c:	4b10      	ldr	r3, [pc, #64]	; (800b5d0 <xPortStartScheduler+0x140>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a0f      	ldr	r2, [pc, #60]	; (800b5d0 <xPortStartScheduler+0x140>)
 800b592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b598:	f7ff ff66 	bl	800b468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b59c:	f7ff f800 	bl	800a5a0 <vTaskSwitchContext>
	prvTaskExitError();
 800b5a0:	f7ff ff20 	bl	800b3e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	e000ed00 	.word	0xe000ed00
 800b5b4:	410fc271 	.word	0x410fc271
 800b5b8:	410fc270 	.word	0x410fc270
 800b5bc:	e000e400 	.word	0xe000e400
 800b5c0:	20000e38 	.word	0x20000e38
 800b5c4:	20000e3c 	.word	0x20000e3c
 800b5c8:	e000ed20 	.word	0xe000ed20
 800b5cc:	200000b4 	.word	0x200000b4
 800b5d0:	e000ef34 	.word	0xe000ef34

0800b5d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	607b      	str	r3, [r7, #4]
}
 800b5ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <vPortEnterCritical+0x58>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	4a0d      	ldr	r2, [pc, #52]	; (800b62c <vPortEnterCritical+0x58>)
 800b5f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5f8:	4b0c      	ldr	r3, [pc, #48]	; (800b62c <vPortEnterCritical+0x58>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d10f      	bne.n	800b620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b600:	4b0b      	ldr	r3, [pc, #44]	; (800b630 <vPortEnterCritical+0x5c>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00a      	beq.n	800b620 <vPortEnterCritical+0x4c>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	603b      	str	r3, [r7, #0]
}
 800b61c:	bf00      	nop
 800b61e:	e7fe      	b.n	800b61e <vPortEnterCritical+0x4a>
	}
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	200000b4 	.word	0x200000b4
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b63a:	4b12      	ldr	r3, [pc, #72]	; (800b684 <vPortExitCritical+0x50>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10a      	bne.n	800b658 <vPortExitCritical+0x24>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	607b      	str	r3, [r7, #4]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b658:	4b0a      	ldr	r3, [pc, #40]	; (800b684 <vPortExitCritical+0x50>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	4a09      	ldr	r2, [pc, #36]	; (800b684 <vPortExitCritical+0x50>)
 800b660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b662:	4b08      	ldr	r3, [pc, #32]	; (800b684 <vPortExitCritical+0x50>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d105      	bne.n	800b676 <vPortExitCritical+0x42>
 800b66a:	2300      	movs	r3, #0
 800b66c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	f383 8811 	msr	BASEPRI, r3
}
 800b674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	200000b4 	.word	0x200000b4
	...

0800b690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b690:	f3ef 8009 	mrs	r0, PSP
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	4b15      	ldr	r3, [pc, #84]	; (800b6f0 <pxCurrentTCBConst>)
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	f01e 0f10 	tst.w	lr, #16
 800b6a0:	bf08      	it	eq
 800b6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6aa:	6010      	str	r0, [r2, #0]
 800b6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b6b4:	f380 8811 	msr	BASEPRI, r0
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f7fe ff6e 	bl	800a5a0 <vTaskSwitchContext>
 800b6c4:	f04f 0000 	mov.w	r0, #0
 800b6c8:	f380 8811 	msr	BASEPRI, r0
 800b6cc:	bc09      	pop	{r0, r3}
 800b6ce:	6819      	ldr	r1, [r3, #0]
 800b6d0:	6808      	ldr	r0, [r1, #0]
 800b6d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d6:	f01e 0f10 	tst.w	lr, #16
 800b6da:	bf08      	it	eq
 800b6dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6e0:	f380 8809 	msr	PSP, r0
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	f3af 8000 	nop.w

0800b6f0 <pxCurrentTCBConst>:
 800b6f0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop

0800b6f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	607b      	str	r3, [r7, #4]
}
 800b710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b712:	f7fe fe8b 	bl	800a42c <xTaskIncrementTick>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b71c:	4b06      	ldr	r3, [pc, #24]	; (800b738 <xPortSysTickHandler+0x40>)
 800b71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	2300      	movs	r3, #0
 800b726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	f383 8811 	msr	BASEPRI, r3
}
 800b72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	e000ed04 	.word	0xe000ed04

0800b73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b73c:	b480      	push	{r7}
 800b73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b740:	4b0b      	ldr	r3, [pc, #44]	; (800b770 <vPortSetupTimerInterrupt+0x34>)
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b746:	4b0b      	ldr	r3, [pc, #44]	; (800b774 <vPortSetupTimerInterrupt+0x38>)
 800b748:	2200      	movs	r2, #0
 800b74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b74c:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <vPortSetupTimerInterrupt+0x3c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a0a      	ldr	r2, [pc, #40]	; (800b77c <vPortSetupTimerInterrupt+0x40>)
 800b752:	fba2 2303 	umull	r2, r3, r2, r3
 800b756:	099b      	lsrs	r3, r3, #6
 800b758:	4a09      	ldr	r2, [pc, #36]	; (800b780 <vPortSetupTimerInterrupt+0x44>)
 800b75a:	3b01      	subs	r3, #1
 800b75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b75e:	4b04      	ldr	r3, [pc, #16]	; (800b770 <vPortSetupTimerInterrupt+0x34>)
 800b760:	2207      	movs	r2, #7
 800b762:	601a      	str	r2, [r3, #0]
}
 800b764:	bf00      	nop
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	e000e010 	.word	0xe000e010
 800b774:	e000e018 	.word	0xe000e018
 800b778:	20000094 	.word	0x20000094
 800b77c:	10624dd3 	.word	0x10624dd3
 800b780:	e000e014 	.word	0xe000e014

0800b784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b794 <vPortEnableVFP+0x10>
 800b788:	6801      	ldr	r1, [r0, #0]
 800b78a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b78e:	6001      	str	r1, [r0, #0]
 800b790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b792:	bf00      	nop
 800b794:	e000ed88 	.word	0xe000ed88

0800b798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b79e:	f3ef 8305 	mrs	r3, IPSR
 800b7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b0f      	cmp	r3, #15
 800b7a8:	d914      	bls.n	800b7d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7aa:	4a17      	ldr	r2, [pc, #92]	; (800b808 <vPortValidateInterruptPriority+0x70>)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7b4:	4b15      	ldr	r3, [pc, #84]	; (800b80c <vPortValidateInterruptPriority+0x74>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	7afa      	ldrb	r2, [r7, #11]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d20a      	bcs.n	800b7d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	607b      	str	r3, [r7, #4]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b7d4:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <vPortValidateInterruptPriority+0x78>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b7dc:	4b0d      	ldr	r3, [pc, #52]	; (800b814 <vPortValidateInterruptPriority+0x7c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d90a      	bls.n	800b7fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	603b      	str	r3, [r7, #0]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <vPortValidateInterruptPriority+0x60>
	}
 800b7fa:	bf00      	nop
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	e000e3f0 	.word	0xe000e3f0
 800b80c:	20000e38 	.word	0x20000e38
 800b810:	e000ed0c 	.word	0xe000ed0c
 800b814:	20000e3c 	.word	0x20000e3c

0800b818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b08a      	sub	sp, #40	; 0x28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b820:	2300      	movs	r3, #0
 800b822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b824:	f7fe fd46 	bl	800a2b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b828:	4b5b      	ldr	r3, [pc, #364]	; (800b998 <pvPortMalloc+0x180>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b830:	f000 f920 	bl	800ba74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b834:	4b59      	ldr	r3, [pc, #356]	; (800b99c <pvPortMalloc+0x184>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4013      	ands	r3, r2
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f040 8093 	bne.w	800b968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d01d      	beq.n	800b884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b848:	2208      	movs	r2, #8
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f003 0307 	and.w	r3, r3, #7
 800b856:	2b00      	cmp	r3, #0
 800b858:	d014      	beq.n	800b884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f023 0307 	bic.w	r3, r3, #7
 800b860:	3308      	adds	r3, #8
 800b862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00a      	beq.n	800b884 <pvPortMalloc+0x6c>
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	617b      	str	r3, [r7, #20]
}
 800b880:	bf00      	nop
 800b882:	e7fe      	b.n	800b882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d06e      	beq.n	800b968 <pvPortMalloc+0x150>
 800b88a:	4b45      	ldr	r3, [pc, #276]	; (800b9a0 <pvPortMalloc+0x188>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	429a      	cmp	r2, r3
 800b892:	d869      	bhi.n	800b968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b894:	4b43      	ldr	r3, [pc, #268]	; (800b9a4 <pvPortMalloc+0x18c>)
 800b896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b898:	4b42      	ldr	r3, [pc, #264]	; (800b9a4 <pvPortMalloc+0x18c>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b89e:	e004      	b.n	800b8aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d903      	bls.n	800b8bc <pvPortMalloc+0xa4>
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1f1      	bne.n	800b8a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8bc:	4b36      	ldr	r3, [pc, #216]	; (800b998 <pvPortMalloc+0x180>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d050      	beq.n	800b968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2208      	movs	r2, #8
 800b8cc:	4413      	add	r3, r2
 800b8ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
 800b8d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	1ad2      	subs	r2, r2, r3
 800b8e0:	2308      	movs	r3, #8
 800b8e2:	005b      	lsls	r3, r3, #1
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d91f      	bls.n	800b928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <pvPortMalloc+0xf8>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	613b      	str	r3, [r7, #16]
}
 800b90c:	bf00      	nop
 800b90e:	e7fe      	b.n	800b90e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	685a      	ldr	r2, [r3, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	1ad2      	subs	r2, r2, r3
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b922:	69b8      	ldr	r0, [r7, #24]
 800b924:	f000 f908 	bl	800bb38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b928:	4b1d      	ldr	r3, [pc, #116]	; (800b9a0 <pvPortMalloc+0x188>)
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	4a1b      	ldr	r2, [pc, #108]	; (800b9a0 <pvPortMalloc+0x188>)
 800b934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b936:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <pvPortMalloc+0x188>)
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	4b1b      	ldr	r3, [pc, #108]	; (800b9a8 <pvPortMalloc+0x190>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d203      	bcs.n	800b94a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b942:	4b17      	ldr	r3, [pc, #92]	; (800b9a0 <pvPortMalloc+0x188>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a18      	ldr	r2, [pc, #96]	; (800b9a8 <pvPortMalloc+0x190>)
 800b948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	4b13      	ldr	r3, [pc, #76]	; (800b99c <pvPortMalloc+0x184>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	431a      	orrs	r2, r3
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b95e:	4b13      	ldr	r3, [pc, #76]	; (800b9ac <pvPortMalloc+0x194>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3301      	adds	r3, #1
 800b964:	4a11      	ldr	r2, [pc, #68]	; (800b9ac <pvPortMalloc+0x194>)
 800b966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b968:	f7fe fcb2 	bl	800a2d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	f003 0307 	and.w	r3, r3, #7
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00a      	beq.n	800b98c <pvPortMalloc+0x174>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	60fb      	str	r3, [r7, #12]
}
 800b988:	bf00      	nop
 800b98a:	e7fe      	b.n	800b98a <pvPortMalloc+0x172>
	return pvReturn;
 800b98c:	69fb      	ldr	r3, [r7, #28]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3728      	adds	r7, #40	; 0x28
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20003558 	.word	0x20003558
 800b99c:	2000356c 	.word	0x2000356c
 800b9a0:	2000355c 	.word	0x2000355c
 800b9a4:	20003550 	.word	0x20003550
 800b9a8:	20003560 	.word	0x20003560
 800b9ac:	20003564 	.word	0x20003564

0800b9b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d04d      	beq.n	800ba5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9c2:	2308      	movs	r3, #8
 800b9c4:	425b      	negs	r3, r3
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	685a      	ldr	r2, [r3, #4]
 800b9d4:	4b24      	ldr	r3, [pc, #144]	; (800ba68 <vPortFree+0xb8>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4013      	ands	r3, r2
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10a      	bne.n	800b9f4 <vPortFree+0x44>
	__asm volatile
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	60fb      	str	r3, [r7, #12]
}
 800b9f0:	bf00      	nop
 800b9f2:	e7fe      	b.n	800b9f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00a      	beq.n	800ba12 <vPortFree+0x62>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	60bb      	str	r3, [r7, #8]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	4b14      	ldr	r3, [pc, #80]	; (800ba68 <vPortFree+0xb8>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d01e      	beq.n	800ba5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d11a      	bne.n	800ba5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	4b0e      	ldr	r3, [pc, #56]	; (800ba68 <vPortFree+0xb8>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	43db      	mvns	r3, r3
 800ba32:	401a      	ands	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba38:	f7fe fc3c 	bl	800a2b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <vPortFree+0xbc>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4413      	add	r3, r2
 800ba46:	4a09      	ldr	r2, [pc, #36]	; (800ba6c <vPortFree+0xbc>)
 800ba48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba4a:	6938      	ldr	r0, [r7, #16]
 800ba4c:	f000 f874 	bl	800bb38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba50:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <vPortFree+0xc0>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3301      	adds	r3, #1
 800ba56:	4a06      	ldr	r2, [pc, #24]	; (800ba70 <vPortFree+0xc0>)
 800ba58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba5a:	f7fe fc39 	bl	800a2d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba5e:	bf00      	nop
 800ba60:	3718      	adds	r7, #24
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	2000356c 	.word	0x2000356c
 800ba6c:	2000355c 	.word	0x2000355c
 800ba70:	20003568 	.word	0x20003568

0800ba74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba7a:	f242 7310 	movw	r3, #10000	; 0x2710
 800ba7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba80:	4b27      	ldr	r3, [pc, #156]	; (800bb20 <prvHeapInit+0xac>)
 800ba82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f003 0307 	and.w	r3, r3, #7
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00c      	beq.n	800baa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3307      	adds	r3, #7
 800ba92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f023 0307 	bic.w	r3, r3, #7
 800ba9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	4a1f      	ldr	r2, [pc, #124]	; (800bb20 <prvHeapInit+0xac>)
 800baa4:	4413      	add	r3, r2
 800baa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baac:	4a1d      	ldr	r2, [pc, #116]	; (800bb24 <prvHeapInit+0xb0>)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bab2:	4b1c      	ldr	r3, [pc, #112]	; (800bb24 <prvHeapInit+0xb0>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	4413      	add	r3, r2
 800babe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bac0:	2208      	movs	r2, #8
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	1a9b      	subs	r3, r3, r2
 800bac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 0307 	bic.w	r3, r3, #7
 800bace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	4a15      	ldr	r2, [pc, #84]	; (800bb28 <prvHeapInit+0xb4>)
 800bad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bad6:	4b14      	ldr	r3, [pc, #80]	; (800bb28 <prvHeapInit+0xb4>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2200      	movs	r2, #0
 800badc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bade:	4b12      	ldr	r3, [pc, #72]	; (800bb28 <prvHeapInit+0xb4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	1ad2      	subs	r2, r2, r3
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800baf4:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <prvHeapInit+0xb4>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	4a0a      	ldr	r2, [pc, #40]	; (800bb2c <prvHeapInit+0xb8>)
 800bb02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	4a09      	ldr	r2, [pc, #36]	; (800bb30 <prvHeapInit+0xbc>)
 800bb0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb0c:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <prvHeapInit+0xc0>)
 800bb0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb12:	601a      	str	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	20000e40 	.word	0x20000e40
 800bb24:	20003550 	.word	0x20003550
 800bb28:	20003558 	.word	0x20003558
 800bb2c:	20003560 	.word	0x20003560
 800bb30:	2000355c 	.word	0x2000355c
 800bb34:	2000356c 	.word	0x2000356c

0800bb38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb40:	4b28      	ldr	r3, [pc, #160]	; (800bbe4 <prvInsertBlockIntoFreeList+0xac>)
 800bb42:	60fb      	str	r3, [r7, #12]
 800bb44:	e002      	b.n	800bb4c <prvInsertBlockIntoFreeList+0x14>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d8f7      	bhi.n	800bb46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	4413      	add	r3, r2
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d108      	bne.n	800bb7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	441a      	add	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	441a      	add	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d118      	bne.n	800bbc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	4b15      	ldr	r3, [pc, #84]	; (800bbe8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d00d      	beq.n	800bbb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	441a      	add	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	e008      	b.n	800bbc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbb6:	4b0c      	ldr	r3, [pc, #48]	; (800bbe8 <prvInsertBlockIntoFreeList+0xb0>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	e003      	b.n	800bbc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d002      	beq.n	800bbd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbd6:	bf00      	nop
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	20003550 	.word	0x20003550
 800bbe8:	20003558 	.word	0x20003558

0800bbec <__errno>:
 800bbec:	4b01      	ldr	r3, [pc, #4]	; (800bbf4 <__errno+0x8>)
 800bbee:	6818      	ldr	r0, [r3, #0]
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	200000b8 	.word	0x200000b8

0800bbf8 <__libc_init_array>:
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	4d0d      	ldr	r5, [pc, #52]	; (800bc30 <__libc_init_array+0x38>)
 800bbfc:	4c0d      	ldr	r4, [pc, #52]	; (800bc34 <__libc_init_array+0x3c>)
 800bbfe:	1b64      	subs	r4, r4, r5
 800bc00:	10a4      	asrs	r4, r4, #2
 800bc02:	2600      	movs	r6, #0
 800bc04:	42a6      	cmp	r6, r4
 800bc06:	d109      	bne.n	800bc1c <__libc_init_array+0x24>
 800bc08:	4d0b      	ldr	r5, [pc, #44]	; (800bc38 <__libc_init_array+0x40>)
 800bc0a:	4c0c      	ldr	r4, [pc, #48]	; (800bc3c <__libc_init_array+0x44>)
 800bc0c:	f000 fffa 	bl	800cc04 <_init>
 800bc10:	1b64      	subs	r4, r4, r5
 800bc12:	10a4      	asrs	r4, r4, #2
 800bc14:	2600      	movs	r6, #0
 800bc16:	42a6      	cmp	r6, r4
 800bc18:	d105      	bne.n	800bc26 <__libc_init_array+0x2e>
 800bc1a:	bd70      	pop	{r4, r5, r6, pc}
 800bc1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc20:	4798      	blx	r3
 800bc22:	3601      	adds	r6, #1
 800bc24:	e7ee      	b.n	800bc04 <__libc_init_array+0xc>
 800bc26:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc2a:	4798      	blx	r3
 800bc2c:	3601      	adds	r6, #1
 800bc2e:	e7f2      	b.n	800bc16 <__libc_init_array+0x1e>
 800bc30:	0800cf98 	.word	0x0800cf98
 800bc34:	0800cf98 	.word	0x0800cf98
 800bc38:	0800cf98 	.word	0x0800cf98
 800bc3c:	0800cf9c 	.word	0x0800cf9c

0800bc40 <memcpy>:
 800bc40:	440a      	add	r2, r1
 800bc42:	4291      	cmp	r1, r2
 800bc44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bc48:	d100      	bne.n	800bc4c <memcpy+0xc>
 800bc4a:	4770      	bx	lr
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc56:	4291      	cmp	r1, r2
 800bc58:	d1f9      	bne.n	800bc4e <memcpy+0xe>
 800bc5a:	bd10      	pop	{r4, pc}

0800bc5c <memset>:
 800bc5c:	4402      	add	r2, r0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d100      	bne.n	800bc66 <memset+0xa>
 800bc64:	4770      	bx	lr
 800bc66:	f803 1b01 	strb.w	r1, [r3], #1
 800bc6a:	e7f9      	b.n	800bc60 <memset+0x4>

0800bc6c <iprintf>:
 800bc6c:	b40f      	push	{r0, r1, r2, r3}
 800bc6e:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <iprintf+0x2c>)
 800bc70:	b513      	push	{r0, r1, r4, lr}
 800bc72:	681c      	ldr	r4, [r3, #0]
 800bc74:	b124      	cbz	r4, 800bc80 <iprintf+0x14>
 800bc76:	69a3      	ldr	r3, [r4, #24]
 800bc78:	b913      	cbnz	r3, 800bc80 <iprintf+0x14>
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 fa5e 	bl	800c13c <__sinit>
 800bc80:	ab05      	add	r3, sp, #20
 800bc82:	9a04      	ldr	r2, [sp, #16]
 800bc84:	68a1      	ldr	r1, [r4, #8]
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f000 fc2f 	bl	800c4ec <_vfiprintf_r>
 800bc8e:	b002      	add	sp, #8
 800bc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc94:	b004      	add	sp, #16
 800bc96:	4770      	bx	lr
 800bc98:	200000b8 	.word	0x200000b8

0800bc9c <_puts_r>:
 800bc9c:	b570      	push	{r4, r5, r6, lr}
 800bc9e:	460e      	mov	r6, r1
 800bca0:	4605      	mov	r5, r0
 800bca2:	b118      	cbz	r0, 800bcac <_puts_r+0x10>
 800bca4:	6983      	ldr	r3, [r0, #24]
 800bca6:	b90b      	cbnz	r3, 800bcac <_puts_r+0x10>
 800bca8:	f000 fa48 	bl	800c13c <__sinit>
 800bcac:	69ab      	ldr	r3, [r5, #24]
 800bcae:	68ac      	ldr	r4, [r5, #8]
 800bcb0:	b913      	cbnz	r3, 800bcb8 <_puts_r+0x1c>
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 fa42 	bl	800c13c <__sinit>
 800bcb8:	4b2c      	ldr	r3, [pc, #176]	; (800bd6c <_puts_r+0xd0>)
 800bcba:	429c      	cmp	r4, r3
 800bcbc:	d120      	bne.n	800bd00 <_puts_r+0x64>
 800bcbe:	686c      	ldr	r4, [r5, #4]
 800bcc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcc2:	07db      	lsls	r3, r3, #31
 800bcc4:	d405      	bmi.n	800bcd2 <_puts_r+0x36>
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	0598      	lsls	r0, r3, #22
 800bcca:	d402      	bmi.n	800bcd2 <_puts_r+0x36>
 800bccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcce:	f000 fad3 	bl	800c278 <__retarget_lock_acquire_recursive>
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	0719      	lsls	r1, r3, #28
 800bcd6:	d51d      	bpl.n	800bd14 <_puts_r+0x78>
 800bcd8:	6923      	ldr	r3, [r4, #16]
 800bcda:	b1db      	cbz	r3, 800bd14 <_puts_r+0x78>
 800bcdc:	3e01      	subs	r6, #1
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bce4:	3b01      	subs	r3, #1
 800bce6:	60a3      	str	r3, [r4, #8]
 800bce8:	bb39      	cbnz	r1, 800bd3a <_puts_r+0x9e>
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	da38      	bge.n	800bd60 <_puts_r+0xc4>
 800bcee:	4622      	mov	r2, r4
 800bcf0:	210a      	movs	r1, #10
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f000 f848 	bl	800bd88 <__swbuf_r>
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d011      	beq.n	800bd20 <_puts_r+0x84>
 800bcfc:	250a      	movs	r5, #10
 800bcfe:	e011      	b.n	800bd24 <_puts_r+0x88>
 800bd00:	4b1b      	ldr	r3, [pc, #108]	; (800bd70 <_puts_r+0xd4>)
 800bd02:	429c      	cmp	r4, r3
 800bd04:	d101      	bne.n	800bd0a <_puts_r+0x6e>
 800bd06:	68ac      	ldr	r4, [r5, #8]
 800bd08:	e7da      	b.n	800bcc0 <_puts_r+0x24>
 800bd0a:	4b1a      	ldr	r3, [pc, #104]	; (800bd74 <_puts_r+0xd8>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	bf08      	it	eq
 800bd10:	68ec      	ldreq	r4, [r5, #12]
 800bd12:	e7d5      	b.n	800bcc0 <_puts_r+0x24>
 800bd14:	4621      	mov	r1, r4
 800bd16:	4628      	mov	r0, r5
 800bd18:	f000 f888 	bl	800be2c <__swsetup_r>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d0dd      	beq.n	800bcdc <_puts_r+0x40>
 800bd20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bd24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd26:	07da      	lsls	r2, r3, #31
 800bd28:	d405      	bmi.n	800bd36 <_puts_r+0x9a>
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	059b      	lsls	r3, r3, #22
 800bd2e:	d402      	bmi.n	800bd36 <_puts_r+0x9a>
 800bd30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd32:	f000 faa2 	bl	800c27a <__retarget_lock_release_recursive>
 800bd36:	4628      	mov	r0, r5
 800bd38:	bd70      	pop	{r4, r5, r6, pc}
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	da04      	bge.n	800bd48 <_puts_r+0xac>
 800bd3e:	69a2      	ldr	r2, [r4, #24]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	dc06      	bgt.n	800bd52 <_puts_r+0xb6>
 800bd44:	290a      	cmp	r1, #10
 800bd46:	d004      	beq.n	800bd52 <_puts_r+0xb6>
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	1c5a      	adds	r2, r3, #1
 800bd4c:	6022      	str	r2, [r4, #0]
 800bd4e:	7019      	strb	r1, [r3, #0]
 800bd50:	e7c5      	b.n	800bcde <_puts_r+0x42>
 800bd52:	4622      	mov	r2, r4
 800bd54:	4628      	mov	r0, r5
 800bd56:	f000 f817 	bl	800bd88 <__swbuf_r>
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	d1bf      	bne.n	800bcde <_puts_r+0x42>
 800bd5e:	e7df      	b.n	800bd20 <_puts_r+0x84>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	250a      	movs	r5, #10
 800bd64:	1c5a      	adds	r2, r3, #1
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	701d      	strb	r5, [r3, #0]
 800bd6a:	e7db      	b.n	800bd24 <_puts_r+0x88>
 800bd6c:	0800cf1c 	.word	0x0800cf1c
 800bd70:	0800cf3c 	.word	0x0800cf3c
 800bd74:	0800cefc 	.word	0x0800cefc

0800bd78 <puts>:
 800bd78:	4b02      	ldr	r3, [pc, #8]	; (800bd84 <puts+0xc>)
 800bd7a:	4601      	mov	r1, r0
 800bd7c:	6818      	ldr	r0, [r3, #0]
 800bd7e:	f7ff bf8d 	b.w	800bc9c <_puts_r>
 800bd82:	bf00      	nop
 800bd84:	200000b8 	.word	0x200000b8

0800bd88 <__swbuf_r>:
 800bd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8a:	460e      	mov	r6, r1
 800bd8c:	4614      	mov	r4, r2
 800bd8e:	4605      	mov	r5, r0
 800bd90:	b118      	cbz	r0, 800bd9a <__swbuf_r+0x12>
 800bd92:	6983      	ldr	r3, [r0, #24]
 800bd94:	b90b      	cbnz	r3, 800bd9a <__swbuf_r+0x12>
 800bd96:	f000 f9d1 	bl	800c13c <__sinit>
 800bd9a:	4b21      	ldr	r3, [pc, #132]	; (800be20 <__swbuf_r+0x98>)
 800bd9c:	429c      	cmp	r4, r3
 800bd9e:	d12b      	bne.n	800bdf8 <__swbuf_r+0x70>
 800bda0:	686c      	ldr	r4, [r5, #4]
 800bda2:	69a3      	ldr	r3, [r4, #24]
 800bda4:	60a3      	str	r3, [r4, #8]
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	071a      	lsls	r2, r3, #28
 800bdaa:	d52f      	bpl.n	800be0c <__swbuf_r+0x84>
 800bdac:	6923      	ldr	r3, [r4, #16]
 800bdae:	b36b      	cbz	r3, 800be0c <__swbuf_r+0x84>
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	6820      	ldr	r0, [r4, #0]
 800bdb4:	1ac0      	subs	r0, r0, r3
 800bdb6:	6963      	ldr	r3, [r4, #20]
 800bdb8:	b2f6      	uxtb	r6, r6
 800bdba:	4283      	cmp	r3, r0
 800bdbc:	4637      	mov	r7, r6
 800bdbe:	dc04      	bgt.n	800bdca <__swbuf_r+0x42>
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	f000 f926 	bl	800c014 <_fflush_r>
 800bdc8:	bb30      	cbnz	r0, 800be18 <__swbuf_r+0x90>
 800bdca:	68a3      	ldr	r3, [r4, #8]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	60a3      	str	r3, [r4, #8]
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	1c5a      	adds	r2, r3, #1
 800bdd4:	6022      	str	r2, [r4, #0]
 800bdd6:	701e      	strb	r6, [r3, #0]
 800bdd8:	6963      	ldr	r3, [r4, #20]
 800bdda:	3001      	adds	r0, #1
 800bddc:	4283      	cmp	r3, r0
 800bdde:	d004      	beq.n	800bdea <__swbuf_r+0x62>
 800bde0:	89a3      	ldrh	r3, [r4, #12]
 800bde2:	07db      	lsls	r3, r3, #31
 800bde4:	d506      	bpl.n	800bdf4 <__swbuf_r+0x6c>
 800bde6:	2e0a      	cmp	r6, #10
 800bde8:	d104      	bne.n	800bdf4 <__swbuf_r+0x6c>
 800bdea:	4621      	mov	r1, r4
 800bdec:	4628      	mov	r0, r5
 800bdee:	f000 f911 	bl	800c014 <_fflush_r>
 800bdf2:	b988      	cbnz	r0, 800be18 <__swbuf_r+0x90>
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <__swbuf_r+0x9c>)
 800bdfa:	429c      	cmp	r4, r3
 800bdfc:	d101      	bne.n	800be02 <__swbuf_r+0x7a>
 800bdfe:	68ac      	ldr	r4, [r5, #8]
 800be00:	e7cf      	b.n	800bda2 <__swbuf_r+0x1a>
 800be02:	4b09      	ldr	r3, [pc, #36]	; (800be28 <__swbuf_r+0xa0>)
 800be04:	429c      	cmp	r4, r3
 800be06:	bf08      	it	eq
 800be08:	68ec      	ldreq	r4, [r5, #12]
 800be0a:	e7ca      	b.n	800bda2 <__swbuf_r+0x1a>
 800be0c:	4621      	mov	r1, r4
 800be0e:	4628      	mov	r0, r5
 800be10:	f000 f80c 	bl	800be2c <__swsetup_r>
 800be14:	2800      	cmp	r0, #0
 800be16:	d0cb      	beq.n	800bdb0 <__swbuf_r+0x28>
 800be18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800be1c:	e7ea      	b.n	800bdf4 <__swbuf_r+0x6c>
 800be1e:	bf00      	nop
 800be20:	0800cf1c 	.word	0x0800cf1c
 800be24:	0800cf3c 	.word	0x0800cf3c
 800be28:	0800cefc 	.word	0x0800cefc

0800be2c <__swsetup_r>:
 800be2c:	4b32      	ldr	r3, [pc, #200]	; (800bef8 <__swsetup_r+0xcc>)
 800be2e:	b570      	push	{r4, r5, r6, lr}
 800be30:	681d      	ldr	r5, [r3, #0]
 800be32:	4606      	mov	r6, r0
 800be34:	460c      	mov	r4, r1
 800be36:	b125      	cbz	r5, 800be42 <__swsetup_r+0x16>
 800be38:	69ab      	ldr	r3, [r5, #24]
 800be3a:	b913      	cbnz	r3, 800be42 <__swsetup_r+0x16>
 800be3c:	4628      	mov	r0, r5
 800be3e:	f000 f97d 	bl	800c13c <__sinit>
 800be42:	4b2e      	ldr	r3, [pc, #184]	; (800befc <__swsetup_r+0xd0>)
 800be44:	429c      	cmp	r4, r3
 800be46:	d10f      	bne.n	800be68 <__swsetup_r+0x3c>
 800be48:	686c      	ldr	r4, [r5, #4]
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be50:	0719      	lsls	r1, r3, #28
 800be52:	d42c      	bmi.n	800beae <__swsetup_r+0x82>
 800be54:	06dd      	lsls	r5, r3, #27
 800be56:	d411      	bmi.n	800be7c <__swsetup_r+0x50>
 800be58:	2309      	movs	r3, #9
 800be5a:	6033      	str	r3, [r6, #0]
 800be5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be66:	e03e      	b.n	800bee6 <__swsetup_r+0xba>
 800be68:	4b25      	ldr	r3, [pc, #148]	; (800bf00 <__swsetup_r+0xd4>)
 800be6a:	429c      	cmp	r4, r3
 800be6c:	d101      	bne.n	800be72 <__swsetup_r+0x46>
 800be6e:	68ac      	ldr	r4, [r5, #8]
 800be70:	e7eb      	b.n	800be4a <__swsetup_r+0x1e>
 800be72:	4b24      	ldr	r3, [pc, #144]	; (800bf04 <__swsetup_r+0xd8>)
 800be74:	429c      	cmp	r4, r3
 800be76:	bf08      	it	eq
 800be78:	68ec      	ldreq	r4, [r5, #12]
 800be7a:	e7e6      	b.n	800be4a <__swsetup_r+0x1e>
 800be7c:	0758      	lsls	r0, r3, #29
 800be7e:	d512      	bpl.n	800bea6 <__swsetup_r+0x7a>
 800be80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be82:	b141      	cbz	r1, 800be96 <__swsetup_r+0x6a>
 800be84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be88:	4299      	cmp	r1, r3
 800be8a:	d002      	beq.n	800be92 <__swsetup_r+0x66>
 800be8c:	4630      	mov	r0, r6
 800be8e:	f000 fa59 	bl	800c344 <_free_r>
 800be92:	2300      	movs	r3, #0
 800be94:	6363      	str	r3, [r4, #52]	; 0x34
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be9c:	81a3      	strh	r3, [r4, #12]
 800be9e:	2300      	movs	r3, #0
 800bea0:	6063      	str	r3, [r4, #4]
 800bea2:	6923      	ldr	r3, [r4, #16]
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	f043 0308 	orr.w	r3, r3, #8
 800beac:	81a3      	strh	r3, [r4, #12]
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	b94b      	cbnz	r3, 800bec6 <__swsetup_r+0x9a>
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800beb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bebc:	d003      	beq.n	800bec6 <__swsetup_r+0x9a>
 800bebe:	4621      	mov	r1, r4
 800bec0:	4630      	mov	r0, r6
 800bec2:	f000 f9ff 	bl	800c2c4 <__smakebuf_r>
 800bec6:	89a0      	ldrh	r0, [r4, #12]
 800bec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800becc:	f010 0301 	ands.w	r3, r0, #1
 800bed0:	d00a      	beq.n	800bee8 <__swsetup_r+0xbc>
 800bed2:	2300      	movs	r3, #0
 800bed4:	60a3      	str	r3, [r4, #8]
 800bed6:	6963      	ldr	r3, [r4, #20]
 800bed8:	425b      	negs	r3, r3
 800beda:	61a3      	str	r3, [r4, #24]
 800bedc:	6923      	ldr	r3, [r4, #16]
 800bede:	b943      	cbnz	r3, 800bef2 <__swsetup_r+0xc6>
 800bee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bee4:	d1ba      	bne.n	800be5c <__swsetup_r+0x30>
 800bee6:	bd70      	pop	{r4, r5, r6, pc}
 800bee8:	0781      	lsls	r1, r0, #30
 800beea:	bf58      	it	pl
 800beec:	6963      	ldrpl	r3, [r4, #20]
 800beee:	60a3      	str	r3, [r4, #8]
 800bef0:	e7f4      	b.n	800bedc <__swsetup_r+0xb0>
 800bef2:	2000      	movs	r0, #0
 800bef4:	e7f7      	b.n	800bee6 <__swsetup_r+0xba>
 800bef6:	bf00      	nop
 800bef8:	200000b8 	.word	0x200000b8
 800befc:	0800cf1c 	.word	0x0800cf1c
 800bf00:	0800cf3c 	.word	0x0800cf3c
 800bf04:	0800cefc 	.word	0x0800cefc

0800bf08 <__sflush_r>:
 800bf08:	898a      	ldrh	r2, [r1, #12]
 800bf0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf0e:	4605      	mov	r5, r0
 800bf10:	0710      	lsls	r0, r2, #28
 800bf12:	460c      	mov	r4, r1
 800bf14:	d458      	bmi.n	800bfc8 <__sflush_r+0xc0>
 800bf16:	684b      	ldr	r3, [r1, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	dc05      	bgt.n	800bf28 <__sflush_r+0x20>
 800bf1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	dc02      	bgt.n	800bf28 <__sflush_r+0x20>
 800bf22:	2000      	movs	r0, #0
 800bf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf2a:	2e00      	cmp	r6, #0
 800bf2c:	d0f9      	beq.n	800bf22 <__sflush_r+0x1a>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf34:	682f      	ldr	r7, [r5, #0]
 800bf36:	602b      	str	r3, [r5, #0]
 800bf38:	d032      	beq.n	800bfa0 <__sflush_r+0x98>
 800bf3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	075a      	lsls	r2, r3, #29
 800bf40:	d505      	bpl.n	800bf4e <__sflush_r+0x46>
 800bf42:	6863      	ldr	r3, [r4, #4]
 800bf44:	1ac0      	subs	r0, r0, r3
 800bf46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf48:	b10b      	cbz	r3, 800bf4e <__sflush_r+0x46>
 800bf4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf4c:	1ac0      	subs	r0, r0, r3
 800bf4e:	2300      	movs	r3, #0
 800bf50:	4602      	mov	r2, r0
 800bf52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf54:	6a21      	ldr	r1, [r4, #32]
 800bf56:	4628      	mov	r0, r5
 800bf58:	47b0      	blx	r6
 800bf5a:	1c43      	adds	r3, r0, #1
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	d106      	bne.n	800bf6e <__sflush_r+0x66>
 800bf60:	6829      	ldr	r1, [r5, #0]
 800bf62:	291d      	cmp	r1, #29
 800bf64:	d82c      	bhi.n	800bfc0 <__sflush_r+0xb8>
 800bf66:	4a2a      	ldr	r2, [pc, #168]	; (800c010 <__sflush_r+0x108>)
 800bf68:	40ca      	lsrs	r2, r1
 800bf6a:	07d6      	lsls	r6, r2, #31
 800bf6c:	d528      	bpl.n	800bfc0 <__sflush_r+0xb8>
 800bf6e:	2200      	movs	r2, #0
 800bf70:	6062      	str	r2, [r4, #4]
 800bf72:	04d9      	lsls	r1, r3, #19
 800bf74:	6922      	ldr	r2, [r4, #16]
 800bf76:	6022      	str	r2, [r4, #0]
 800bf78:	d504      	bpl.n	800bf84 <__sflush_r+0x7c>
 800bf7a:	1c42      	adds	r2, r0, #1
 800bf7c:	d101      	bne.n	800bf82 <__sflush_r+0x7a>
 800bf7e:	682b      	ldr	r3, [r5, #0]
 800bf80:	b903      	cbnz	r3, 800bf84 <__sflush_r+0x7c>
 800bf82:	6560      	str	r0, [r4, #84]	; 0x54
 800bf84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf86:	602f      	str	r7, [r5, #0]
 800bf88:	2900      	cmp	r1, #0
 800bf8a:	d0ca      	beq.n	800bf22 <__sflush_r+0x1a>
 800bf8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf90:	4299      	cmp	r1, r3
 800bf92:	d002      	beq.n	800bf9a <__sflush_r+0x92>
 800bf94:	4628      	mov	r0, r5
 800bf96:	f000 f9d5 	bl	800c344 <_free_r>
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	6360      	str	r0, [r4, #52]	; 0x34
 800bf9e:	e7c1      	b.n	800bf24 <__sflush_r+0x1c>
 800bfa0:	6a21      	ldr	r1, [r4, #32]
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	47b0      	blx	r6
 800bfa8:	1c41      	adds	r1, r0, #1
 800bfaa:	d1c7      	bne.n	800bf3c <__sflush_r+0x34>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0c4      	beq.n	800bf3c <__sflush_r+0x34>
 800bfb2:	2b1d      	cmp	r3, #29
 800bfb4:	d001      	beq.n	800bfba <__sflush_r+0xb2>
 800bfb6:	2b16      	cmp	r3, #22
 800bfb8:	d101      	bne.n	800bfbe <__sflush_r+0xb6>
 800bfba:	602f      	str	r7, [r5, #0]
 800bfbc:	e7b1      	b.n	800bf22 <__sflush_r+0x1a>
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc4:	81a3      	strh	r3, [r4, #12]
 800bfc6:	e7ad      	b.n	800bf24 <__sflush_r+0x1c>
 800bfc8:	690f      	ldr	r7, [r1, #16]
 800bfca:	2f00      	cmp	r7, #0
 800bfcc:	d0a9      	beq.n	800bf22 <__sflush_r+0x1a>
 800bfce:	0793      	lsls	r3, r2, #30
 800bfd0:	680e      	ldr	r6, [r1, #0]
 800bfd2:	bf08      	it	eq
 800bfd4:	694b      	ldreq	r3, [r1, #20]
 800bfd6:	600f      	str	r7, [r1, #0]
 800bfd8:	bf18      	it	ne
 800bfda:	2300      	movne	r3, #0
 800bfdc:	eba6 0807 	sub.w	r8, r6, r7
 800bfe0:	608b      	str	r3, [r1, #8]
 800bfe2:	f1b8 0f00 	cmp.w	r8, #0
 800bfe6:	dd9c      	ble.n	800bf22 <__sflush_r+0x1a>
 800bfe8:	6a21      	ldr	r1, [r4, #32]
 800bfea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfec:	4643      	mov	r3, r8
 800bfee:	463a      	mov	r2, r7
 800bff0:	4628      	mov	r0, r5
 800bff2:	47b0      	blx	r6
 800bff4:	2800      	cmp	r0, #0
 800bff6:	dc06      	bgt.n	800c006 <__sflush_r+0xfe>
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bffe:	81a3      	strh	r3, [r4, #12]
 800c000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c004:	e78e      	b.n	800bf24 <__sflush_r+0x1c>
 800c006:	4407      	add	r7, r0
 800c008:	eba8 0800 	sub.w	r8, r8, r0
 800c00c:	e7e9      	b.n	800bfe2 <__sflush_r+0xda>
 800c00e:	bf00      	nop
 800c010:	20400001 	.word	0x20400001

0800c014 <_fflush_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	690b      	ldr	r3, [r1, #16]
 800c018:	4605      	mov	r5, r0
 800c01a:	460c      	mov	r4, r1
 800c01c:	b913      	cbnz	r3, 800c024 <_fflush_r+0x10>
 800c01e:	2500      	movs	r5, #0
 800c020:	4628      	mov	r0, r5
 800c022:	bd38      	pop	{r3, r4, r5, pc}
 800c024:	b118      	cbz	r0, 800c02e <_fflush_r+0x1a>
 800c026:	6983      	ldr	r3, [r0, #24]
 800c028:	b90b      	cbnz	r3, 800c02e <_fflush_r+0x1a>
 800c02a:	f000 f887 	bl	800c13c <__sinit>
 800c02e:	4b14      	ldr	r3, [pc, #80]	; (800c080 <_fflush_r+0x6c>)
 800c030:	429c      	cmp	r4, r3
 800c032:	d11b      	bne.n	800c06c <_fflush_r+0x58>
 800c034:	686c      	ldr	r4, [r5, #4]
 800c036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d0ef      	beq.n	800c01e <_fflush_r+0xa>
 800c03e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c040:	07d0      	lsls	r0, r2, #31
 800c042:	d404      	bmi.n	800c04e <_fflush_r+0x3a>
 800c044:	0599      	lsls	r1, r3, #22
 800c046:	d402      	bmi.n	800c04e <_fflush_r+0x3a>
 800c048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c04a:	f000 f915 	bl	800c278 <__retarget_lock_acquire_recursive>
 800c04e:	4628      	mov	r0, r5
 800c050:	4621      	mov	r1, r4
 800c052:	f7ff ff59 	bl	800bf08 <__sflush_r>
 800c056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c058:	07da      	lsls	r2, r3, #31
 800c05a:	4605      	mov	r5, r0
 800c05c:	d4e0      	bmi.n	800c020 <_fflush_r+0xc>
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	059b      	lsls	r3, r3, #22
 800c062:	d4dd      	bmi.n	800c020 <_fflush_r+0xc>
 800c064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c066:	f000 f908 	bl	800c27a <__retarget_lock_release_recursive>
 800c06a:	e7d9      	b.n	800c020 <_fflush_r+0xc>
 800c06c:	4b05      	ldr	r3, [pc, #20]	; (800c084 <_fflush_r+0x70>)
 800c06e:	429c      	cmp	r4, r3
 800c070:	d101      	bne.n	800c076 <_fflush_r+0x62>
 800c072:	68ac      	ldr	r4, [r5, #8]
 800c074:	e7df      	b.n	800c036 <_fflush_r+0x22>
 800c076:	4b04      	ldr	r3, [pc, #16]	; (800c088 <_fflush_r+0x74>)
 800c078:	429c      	cmp	r4, r3
 800c07a:	bf08      	it	eq
 800c07c:	68ec      	ldreq	r4, [r5, #12]
 800c07e:	e7da      	b.n	800c036 <_fflush_r+0x22>
 800c080:	0800cf1c 	.word	0x0800cf1c
 800c084:	0800cf3c 	.word	0x0800cf3c
 800c088:	0800cefc 	.word	0x0800cefc

0800c08c <std>:
 800c08c:	2300      	movs	r3, #0
 800c08e:	b510      	push	{r4, lr}
 800c090:	4604      	mov	r4, r0
 800c092:	e9c0 3300 	strd	r3, r3, [r0]
 800c096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c09a:	6083      	str	r3, [r0, #8]
 800c09c:	8181      	strh	r1, [r0, #12]
 800c09e:	6643      	str	r3, [r0, #100]	; 0x64
 800c0a0:	81c2      	strh	r2, [r0, #14]
 800c0a2:	6183      	str	r3, [r0, #24]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	2208      	movs	r2, #8
 800c0a8:	305c      	adds	r0, #92	; 0x5c
 800c0aa:	f7ff fdd7 	bl	800bc5c <memset>
 800c0ae:	4b05      	ldr	r3, [pc, #20]	; (800c0c4 <std+0x38>)
 800c0b0:	6263      	str	r3, [r4, #36]	; 0x24
 800c0b2:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <std+0x3c>)
 800c0b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0b6:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <std+0x40>)
 800c0b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0ba:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <std+0x44>)
 800c0bc:	6224      	str	r4, [r4, #32]
 800c0be:	6323      	str	r3, [r4, #48]	; 0x30
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	bf00      	nop
 800c0c4:	0800ca95 	.word	0x0800ca95
 800c0c8:	0800cab7 	.word	0x0800cab7
 800c0cc:	0800caef 	.word	0x0800caef
 800c0d0:	0800cb13 	.word	0x0800cb13

0800c0d4 <_cleanup_r>:
 800c0d4:	4901      	ldr	r1, [pc, #4]	; (800c0dc <_cleanup_r+0x8>)
 800c0d6:	f000 b8af 	b.w	800c238 <_fwalk_reent>
 800c0da:	bf00      	nop
 800c0dc:	0800c015 	.word	0x0800c015

0800c0e0 <__sfmoreglue>:
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	1e4a      	subs	r2, r1, #1
 800c0e4:	2568      	movs	r5, #104	; 0x68
 800c0e6:	4355      	muls	r5, r2
 800c0e8:	460e      	mov	r6, r1
 800c0ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0ee:	f000 f979 	bl	800c3e4 <_malloc_r>
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	b140      	cbz	r0, 800c108 <__sfmoreglue+0x28>
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	e9c0 1600 	strd	r1, r6, [r0]
 800c0fc:	300c      	adds	r0, #12
 800c0fe:	60a0      	str	r0, [r4, #8]
 800c100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c104:	f7ff fdaa 	bl	800bc5c <memset>
 800c108:	4620      	mov	r0, r4
 800c10a:	bd70      	pop	{r4, r5, r6, pc}

0800c10c <__sfp_lock_acquire>:
 800c10c:	4801      	ldr	r0, [pc, #4]	; (800c114 <__sfp_lock_acquire+0x8>)
 800c10e:	f000 b8b3 	b.w	800c278 <__retarget_lock_acquire_recursive>
 800c112:	bf00      	nop
 800c114:	2000fb38 	.word	0x2000fb38

0800c118 <__sfp_lock_release>:
 800c118:	4801      	ldr	r0, [pc, #4]	; (800c120 <__sfp_lock_release+0x8>)
 800c11a:	f000 b8ae 	b.w	800c27a <__retarget_lock_release_recursive>
 800c11e:	bf00      	nop
 800c120:	2000fb38 	.word	0x2000fb38

0800c124 <__sinit_lock_acquire>:
 800c124:	4801      	ldr	r0, [pc, #4]	; (800c12c <__sinit_lock_acquire+0x8>)
 800c126:	f000 b8a7 	b.w	800c278 <__retarget_lock_acquire_recursive>
 800c12a:	bf00      	nop
 800c12c:	2000fb33 	.word	0x2000fb33

0800c130 <__sinit_lock_release>:
 800c130:	4801      	ldr	r0, [pc, #4]	; (800c138 <__sinit_lock_release+0x8>)
 800c132:	f000 b8a2 	b.w	800c27a <__retarget_lock_release_recursive>
 800c136:	bf00      	nop
 800c138:	2000fb33 	.word	0x2000fb33

0800c13c <__sinit>:
 800c13c:	b510      	push	{r4, lr}
 800c13e:	4604      	mov	r4, r0
 800c140:	f7ff fff0 	bl	800c124 <__sinit_lock_acquire>
 800c144:	69a3      	ldr	r3, [r4, #24]
 800c146:	b11b      	cbz	r3, 800c150 <__sinit+0x14>
 800c148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c14c:	f7ff bff0 	b.w	800c130 <__sinit_lock_release>
 800c150:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c154:	6523      	str	r3, [r4, #80]	; 0x50
 800c156:	4b13      	ldr	r3, [pc, #76]	; (800c1a4 <__sinit+0x68>)
 800c158:	4a13      	ldr	r2, [pc, #76]	; (800c1a8 <__sinit+0x6c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c15e:	42a3      	cmp	r3, r4
 800c160:	bf04      	itt	eq
 800c162:	2301      	moveq	r3, #1
 800c164:	61a3      	streq	r3, [r4, #24]
 800c166:	4620      	mov	r0, r4
 800c168:	f000 f820 	bl	800c1ac <__sfp>
 800c16c:	6060      	str	r0, [r4, #4]
 800c16e:	4620      	mov	r0, r4
 800c170:	f000 f81c 	bl	800c1ac <__sfp>
 800c174:	60a0      	str	r0, [r4, #8]
 800c176:	4620      	mov	r0, r4
 800c178:	f000 f818 	bl	800c1ac <__sfp>
 800c17c:	2200      	movs	r2, #0
 800c17e:	60e0      	str	r0, [r4, #12]
 800c180:	2104      	movs	r1, #4
 800c182:	6860      	ldr	r0, [r4, #4]
 800c184:	f7ff ff82 	bl	800c08c <std>
 800c188:	68a0      	ldr	r0, [r4, #8]
 800c18a:	2201      	movs	r2, #1
 800c18c:	2109      	movs	r1, #9
 800c18e:	f7ff ff7d 	bl	800c08c <std>
 800c192:	68e0      	ldr	r0, [r4, #12]
 800c194:	2202      	movs	r2, #2
 800c196:	2112      	movs	r1, #18
 800c198:	f7ff ff78 	bl	800c08c <std>
 800c19c:	2301      	movs	r3, #1
 800c19e:	61a3      	str	r3, [r4, #24]
 800c1a0:	e7d2      	b.n	800c148 <__sinit+0xc>
 800c1a2:	bf00      	nop
 800c1a4:	0800cef8 	.word	0x0800cef8
 800c1a8:	0800c0d5 	.word	0x0800c0d5

0800c1ac <__sfp>:
 800c1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	f7ff ffac 	bl	800c10c <__sfp_lock_acquire>
 800c1b4:	4b1e      	ldr	r3, [pc, #120]	; (800c230 <__sfp+0x84>)
 800c1b6:	681e      	ldr	r6, [r3, #0]
 800c1b8:	69b3      	ldr	r3, [r6, #24]
 800c1ba:	b913      	cbnz	r3, 800c1c2 <__sfp+0x16>
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7ff ffbd 	bl	800c13c <__sinit>
 800c1c2:	3648      	adds	r6, #72	; 0x48
 800c1c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	d503      	bpl.n	800c1d4 <__sfp+0x28>
 800c1cc:	6833      	ldr	r3, [r6, #0]
 800c1ce:	b30b      	cbz	r3, 800c214 <__sfp+0x68>
 800c1d0:	6836      	ldr	r6, [r6, #0]
 800c1d2:	e7f7      	b.n	800c1c4 <__sfp+0x18>
 800c1d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1d8:	b9d5      	cbnz	r5, 800c210 <__sfp+0x64>
 800c1da:	4b16      	ldr	r3, [pc, #88]	; (800c234 <__sfp+0x88>)
 800c1dc:	60e3      	str	r3, [r4, #12]
 800c1de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1e2:	6665      	str	r5, [r4, #100]	; 0x64
 800c1e4:	f000 f847 	bl	800c276 <__retarget_lock_init_recursive>
 800c1e8:	f7ff ff96 	bl	800c118 <__sfp_lock_release>
 800c1ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1f4:	6025      	str	r5, [r4, #0]
 800c1f6:	61a5      	str	r5, [r4, #24]
 800c1f8:	2208      	movs	r2, #8
 800c1fa:	4629      	mov	r1, r5
 800c1fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c200:	f7ff fd2c 	bl	800bc5c <memset>
 800c204:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c208:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c20c:	4620      	mov	r0, r4
 800c20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c210:	3468      	adds	r4, #104	; 0x68
 800c212:	e7d9      	b.n	800c1c8 <__sfp+0x1c>
 800c214:	2104      	movs	r1, #4
 800c216:	4638      	mov	r0, r7
 800c218:	f7ff ff62 	bl	800c0e0 <__sfmoreglue>
 800c21c:	4604      	mov	r4, r0
 800c21e:	6030      	str	r0, [r6, #0]
 800c220:	2800      	cmp	r0, #0
 800c222:	d1d5      	bne.n	800c1d0 <__sfp+0x24>
 800c224:	f7ff ff78 	bl	800c118 <__sfp_lock_release>
 800c228:	230c      	movs	r3, #12
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	e7ee      	b.n	800c20c <__sfp+0x60>
 800c22e:	bf00      	nop
 800c230:	0800cef8 	.word	0x0800cef8
 800c234:	ffff0001 	.word	0xffff0001

0800c238 <_fwalk_reent>:
 800c238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c23c:	4606      	mov	r6, r0
 800c23e:	4688      	mov	r8, r1
 800c240:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c244:	2700      	movs	r7, #0
 800c246:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c24a:	f1b9 0901 	subs.w	r9, r9, #1
 800c24e:	d505      	bpl.n	800c25c <_fwalk_reent+0x24>
 800c250:	6824      	ldr	r4, [r4, #0]
 800c252:	2c00      	cmp	r4, #0
 800c254:	d1f7      	bne.n	800c246 <_fwalk_reent+0xe>
 800c256:	4638      	mov	r0, r7
 800c258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c25c:	89ab      	ldrh	r3, [r5, #12]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d907      	bls.n	800c272 <_fwalk_reent+0x3a>
 800c262:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c266:	3301      	adds	r3, #1
 800c268:	d003      	beq.n	800c272 <_fwalk_reent+0x3a>
 800c26a:	4629      	mov	r1, r5
 800c26c:	4630      	mov	r0, r6
 800c26e:	47c0      	blx	r8
 800c270:	4307      	orrs	r7, r0
 800c272:	3568      	adds	r5, #104	; 0x68
 800c274:	e7e9      	b.n	800c24a <_fwalk_reent+0x12>

0800c276 <__retarget_lock_init_recursive>:
 800c276:	4770      	bx	lr

0800c278 <__retarget_lock_acquire_recursive>:
 800c278:	4770      	bx	lr

0800c27a <__retarget_lock_release_recursive>:
 800c27a:	4770      	bx	lr

0800c27c <__swhatbuf_r>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	460e      	mov	r6, r1
 800c280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c284:	2900      	cmp	r1, #0
 800c286:	b096      	sub	sp, #88	; 0x58
 800c288:	4614      	mov	r4, r2
 800c28a:	461d      	mov	r5, r3
 800c28c:	da07      	bge.n	800c29e <__swhatbuf_r+0x22>
 800c28e:	2300      	movs	r3, #0
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	89b3      	ldrh	r3, [r6, #12]
 800c294:	061a      	lsls	r2, r3, #24
 800c296:	d410      	bmi.n	800c2ba <__swhatbuf_r+0x3e>
 800c298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c29c:	e00e      	b.n	800c2bc <__swhatbuf_r+0x40>
 800c29e:	466a      	mov	r2, sp
 800c2a0:	f000 fc5e 	bl	800cb60 <_fstat_r>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	dbf2      	blt.n	800c28e <__swhatbuf_r+0x12>
 800c2a8:	9a01      	ldr	r2, [sp, #4]
 800c2aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2b2:	425a      	negs	r2, r3
 800c2b4:	415a      	adcs	r2, r3
 800c2b6:	602a      	str	r2, [r5, #0]
 800c2b8:	e7ee      	b.n	800c298 <__swhatbuf_r+0x1c>
 800c2ba:	2340      	movs	r3, #64	; 0x40
 800c2bc:	2000      	movs	r0, #0
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	b016      	add	sp, #88	; 0x58
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}

0800c2c4 <__smakebuf_r>:
 800c2c4:	898b      	ldrh	r3, [r1, #12]
 800c2c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2c8:	079d      	lsls	r5, r3, #30
 800c2ca:	4606      	mov	r6, r0
 800c2cc:	460c      	mov	r4, r1
 800c2ce:	d507      	bpl.n	800c2e0 <__smakebuf_r+0x1c>
 800c2d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	6123      	str	r3, [r4, #16]
 800c2d8:	2301      	movs	r3, #1
 800c2da:	6163      	str	r3, [r4, #20]
 800c2dc:	b002      	add	sp, #8
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	ab01      	add	r3, sp, #4
 800c2e2:	466a      	mov	r2, sp
 800c2e4:	f7ff ffca 	bl	800c27c <__swhatbuf_r>
 800c2e8:	9900      	ldr	r1, [sp, #0]
 800c2ea:	4605      	mov	r5, r0
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	f000 f879 	bl	800c3e4 <_malloc_r>
 800c2f2:	b948      	cbnz	r0, 800c308 <__smakebuf_r+0x44>
 800c2f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2f8:	059a      	lsls	r2, r3, #22
 800c2fa:	d4ef      	bmi.n	800c2dc <__smakebuf_r+0x18>
 800c2fc:	f023 0303 	bic.w	r3, r3, #3
 800c300:	f043 0302 	orr.w	r3, r3, #2
 800c304:	81a3      	strh	r3, [r4, #12]
 800c306:	e7e3      	b.n	800c2d0 <__smakebuf_r+0xc>
 800c308:	4b0d      	ldr	r3, [pc, #52]	; (800c340 <__smakebuf_r+0x7c>)
 800c30a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	6020      	str	r0, [r4, #0]
 800c310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c314:	81a3      	strh	r3, [r4, #12]
 800c316:	9b00      	ldr	r3, [sp, #0]
 800c318:	6163      	str	r3, [r4, #20]
 800c31a:	9b01      	ldr	r3, [sp, #4]
 800c31c:	6120      	str	r0, [r4, #16]
 800c31e:	b15b      	cbz	r3, 800c338 <__smakebuf_r+0x74>
 800c320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c324:	4630      	mov	r0, r6
 800c326:	f000 fc2d 	bl	800cb84 <_isatty_r>
 800c32a:	b128      	cbz	r0, 800c338 <__smakebuf_r+0x74>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f023 0303 	bic.w	r3, r3, #3
 800c332:	f043 0301 	orr.w	r3, r3, #1
 800c336:	81a3      	strh	r3, [r4, #12]
 800c338:	89a0      	ldrh	r0, [r4, #12]
 800c33a:	4305      	orrs	r5, r0
 800c33c:	81a5      	strh	r5, [r4, #12]
 800c33e:	e7cd      	b.n	800c2dc <__smakebuf_r+0x18>
 800c340:	0800c0d5 	.word	0x0800c0d5

0800c344 <_free_r>:
 800c344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c346:	2900      	cmp	r1, #0
 800c348:	d048      	beq.n	800c3dc <_free_r+0x98>
 800c34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c34e:	9001      	str	r0, [sp, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	f1a1 0404 	sub.w	r4, r1, #4
 800c356:	bfb8      	it	lt
 800c358:	18e4      	addlt	r4, r4, r3
 800c35a:	f000 fc35 	bl	800cbc8 <__malloc_lock>
 800c35e:	4a20      	ldr	r2, [pc, #128]	; (800c3e0 <_free_r+0x9c>)
 800c360:	9801      	ldr	r0, [sp, #4]
 800c362:	6813      	ldr	r3, [r2, #0]
 800c364:	4615      	mov	r5, r2
 800c366:	b933      	cbnz	r3, 800c376 <_free_r+0x32>
 800c368:	6063      	str	r3, [r4, #4]
 800c36a:	6014      	str	r4, [r2, #0]
 800c36c:	b003      	add	sp, #12
 800c36e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c372:	f000 bc2f 	b.w	800cbd4 <__malloc_unlock>
 800c376:	42a3      	cmp	r3, r4
 800c378:	d90b      	bls.n	800c392 <_free_r+0x4e>
 800c37a:	6821      	ldr	r1, [r4, #0]
 800c37c:	1862      	adds	r2, r4, r1
 800c37e:	4293      	cmp	r3, r2
 800c380:	bf04      	itt	eq
 800c382:	681a      	ldreq	r2, [r3, #0]
 800c384:	685b      	ldreq	r3, [r3, #4]
 800c386:	6063      	str	r3, [r4, #4]
 800c388:	bf04      	itt	eq
 800c38a:	1852      	addeq	r2, r2, r1
 800c38c:	6022      	streq	r2, [r4, #0]
 800c38e:	602c      	str	r4, [r5, #0]
 800c390:	e7ec      	b.n	800c36c <_free_r+0x28>
 800c392:	461a      	mov	r2, r3
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	b10b      	cbz	r3, 800c39c <_free_r+0x58>
 800c398:	42a3      	cmp	r3, r4
 800c39a:	d9fa      	bls.n	800c392 <_free_r+0x4e>
 800c39c:	6811      	ldr	r1, [r2, #0]
 800c39e:	1855      	adds	r5, r2, r1
 800c3a0:	42a5      	cmp	r5, r4
 800c3a2:	d10b      	bne.n	800c3bc <_free_r+0x78>
 800c3a4:	6824      	ldr	r4, [r4, #0]
 800c3a6:	4421      	add	r1, r4
 800c3a8:	1854      	adds	r4, r2, r1
 800c3aa:	42a3      	cmp	r3, r4
 800c3ac:	6011      	str	r1, [r2, #0]
 800c3ae:	d1dd      	bne.n	800c36c <_free_r+0x28>
 800c3b0:	681c      	ldr	r4, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	6053      	str	r3, [r2, #4]
 800c3b6:	4421      	add	r1, r4
 800c3b8:	6011      	str	r1, [r2, #0]
 800c3ba:	e7d7      	b.n	800c36c <_free_r+0x28>
 800c3bc:	d902      	bls.n	800c3c4 <_free_r+0x80>
 800c3be:	230c      	movs	r3, #12
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	e7d3      	b.n	800c36c <_free_r+0x28>
 800c3c4:	6825      	ldr	r5, [r4, #0]
 800c3c6:	1961      	adds	r1, r4, r5
 800c3c8:	428b      	cmp	r3, r1
 800c3ca:	bf04      	itt	eq
 800c3cc:	6819      	ldreq	r1, [r3, #0]
 800c3ce:	685b      	ldreq	r3, [r3, #4]
 800c3d0:	6063      	str	r3, [r4, #4]
 800c3d2:	bf04      	itt	eq
 800c3d4:	1949      	addeq	r1, r1, r5
 800c3d6:	6021      	streq	r1, [r4, #0]
 800c3d8:	6054      	str	r4, [r2, #4]
 800c3da:	e7c7      	b.n	800c36c <_free_r+0x28>
 800c3dc:	b003      	add	sp, #12
 800c3de:	bd30      	pop	{r4, r5, pc}
 800c3e0:	20003570 	.word	0x20003570

0800c3e4 <_malloc_r>:
 800c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e6:	1ccd      	adds	r5, r1, #3
 800c3e8:	f025 0503 	bic.w	r5, r5, #3
 800c3ec:	3508      	adds	r5, #8
 800c3ee:	2d0c      	cmp	r5, #12
 800c3f0:	bf38      	it	cc
 800c3f2:	250c      	movcc	r5, #12
 800c3f4:	2d00      	cmp	r5, #0
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	db01      	blt.n	800c3fe <_malloc_r+0x1a>
 800c3fa:	42a9      	cmp	r1, r5
 800c3fc:	d903      	bls.n	800c406 <_malloc_r+0x22>
 800c3fe:	230c      	movs	r3, #12
 800c400:	6033      	str	r3, [r6, #0]
 800c402:	2000      	movs	r0, #0
 800c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c406:	f000 fbdf 	bl	800cbc8 <__malloc_lock>
 800c40a:	4921      	ldr	r1, [pc, #132]	; (800c490 <_malloc_r+0xac>)
 800c40c:	680a      	ldr	r2, [r1, #0]
 800c40e:	4614      	mov	r4, r2
 800c410:	b99c      	cbnz	r4, 800c43a <_malloc_r+0x56>
 800c412:	4f20      	ldr	r7, [pc, #128]	; (800c494 <_malloc_r+0xb0>)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	b923      	cbnz	r3, 800c422 <_malloc_r+0x3e>
 800c418:	4621      	mov	r1, r4
 800c41a:	4630      	mov	r0, r6
 800c41c:	f000 fb2a 	bl	800ca74 <_sbrk_r>
 800c420:	6038      	str	r0, [r7, #0]
 800c422:	4629      	mov	r1, r5
 800c424:	4630      	mov	r0, r6
 800c426:	f000 fb25 	bl	800ca74 <_sbrk_r>
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	d123      	bne.n	800c476 <_malloc_r+0x92>
 800c42e:	230c      	movs	r3, #12
 800c430:	6033      	str	r3, [r6, #0]
 800c432:	4630      	mov	r0, r6
 800c434:	f000 fbce 	bl	800cbd4 <__malloc_unlock>
 800c438:	e7e3      	b.n	800c402 <_malloc_r+0x1e>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	1b5b      	subs	r3, r3, r5
 800c43e:	d417      	bmi.n	800c470 <_malloc_r+0x8c>
 800c440:	2b0b      	cmp	r3, #11
 800c442:	d903      	bls.n	800c44c <_malloc_r+0x68>
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	441c      	add	r4, r3
 800c448:	6025      	str	r5, [r4, #0]
 800c44a:	e004      	b.n	800c456 <_malloc_r+0x72>
 800c44c:	6863      	ldr	r3, [r4, #4]
 800c44e:	42a2      	cmp	r2, r4
 800c450:	bf0c      	ite	eq
 800c452:	600b      	streq	r3, [r1, #0]
 800c454:	6053      	strne	r3, [r2, #4]
 800c456:	4630      	mov	r0, r6
 800c458:	f000 fbbc 	bl	800cbd4 <__malloc_unlock>
 800c45c:	f104 000b 	add.w	r0, r4, #11
 800c460:	1d23      	adds	r3, r4, #4
 800c462:	f020 0007 	bic.w	r0, r0, #7
 800c466:	1ac2      	subs	r2, r0, r3
 800c468:	d0cc      	beq.n	800c404 <_malloc_r+0x20>
 800c46a:	1a1b      	subs	r3, r3, r0
 800c46c:	50a3      	str	r3, [r4, r2]
 800c46e:	e7c9      	b.n	800c404 <_malloc_r+0x20>
 800c470:	4622      	mov	r2, r4
 800c472:	6864      	ldr	r4, [r4, #4]
 800c474:	e7cc      	b.n	800c410 <_malloc_r+0x2c>
 800c476:	1cc4      	adds	r4, r0, #3
 800c478:	f024 0403 	bic.w	r4, r4, #3
 800c47c:	42a0      	cmp	r0, r4
 800c47e:	d0e3      	beq.n	800c448 <_malloc_r+0x64>
 800c480:	1a21      	subs	r1, r4, r0
 800c482:	4630      	mov	r0, r6
 800c484:	f000 faf6 	bl	800ca74 <_sbrk_r>
 800c488:	3001      	adds	r0, #1
 800c48a:	d1dd      	bne.n	800c448 <_malloc_r+0x64>
 800c48c:	e7cf      	b.n	800c42e <_malloc_r+0x4a>
 800c48e:	bf00      	nop
 800c490:	20003570 	.word	0x20003570
 800c494:	20003574 	.word	0x20003574

0800c498 <__sfputc_r>:
 800c498:	6893      	ldr	r3, [r2, #8]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	b410      	push	{r4}
 800c4a0:	6093      	str	r3, [r2, #8]
 800c4a2:	da08      	bge.n	800c4b6 <__sfputc_r+0x1e>
 800c4a4:	6994      	ldr	r4, [r2, #24]
 800c4a6:	42a3      	cmp	r3, r4
 800c4a8:	db01      	blt.n	800c4ae <__sfputc_r+0x16>
 800c4aa:	290a      	cmp	r1, #10
 800c4ac:	d103      	bne.n	800c4b6 <__sfputc_r+0x1e>
 800c4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4b2:	f7ff bc69 	b.w	800bd88 <__swbuf_r>
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	1c58      	adds	r0, r3, #1
 800c4ba:	6010      	str	r0, [r2, #0]
 800c4bc:	7019      	strb	r1, [r3, #0]
 800c4be:	4608      	mov	r0, r1
 800c4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <__sfputs_r>:
 800c4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	460f      	mov	r7, r1
 800c4cc:	4614      	mov	r4, r2
 800c4ce:	18d5      	adds	r5, r2, r3
 800c4d0:	42ac      	cmp	r4, r5
 800c4d2:	d101      	bne.n	800c4d8 <__sfputs_r+0x12>
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e007      	b.n	800c4e8 <__sfputs_r+0x22>
 800c4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4dc:	463a      	mov	r2, r7
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f7ff ffda 	bl	800c498 <__sfputc_r>
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	d1f3      	bne.n	800c4d0 <__sfputs_r+0xa>
 800c4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4ec <_vfiprintf_r>:
 800c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f0:	460d      	mov	r5, r1
 800c4f2:	b09d      	sub	sp, #116	; 0x74
 800c4f4:	4614      	mov	r4, r2
 800c4f6:	4698      	mov	r8, r3
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	b118      	cbz	r0, 800c504 <_vfiprintf_r+0x18>
 800c4fc:	6983      	ldr	r3, [r0, #24]
 800c4fe:	b90b      	cbnz	r3, 800c504 <_vfiprintf_r+0x18>
 800c500:	f7ff fe1c 	bl	800c13c <__sinit>
 800c504:	4b89      	ldr	r3, [pc, #548]	; (800c72c <_vfiprintf_r+0x240>)
 800c506:	429d      	cmp	r5, r3
 800c508:	d11b      	bne.n	800c542 <_vfiprintf_r+0x56>
 800c50a:	6875      	ldr	r5, [r6, #4]
 800c50c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c50e:	07d9      	lsls	r1, r3, #31
 800c510:	d405      	bmi.n	800c51e <_vfiprintf_r+0x32>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	059a      	lsls	r2, r3, #22
 800c516:	d402      	bmi.n	800c51e <_vfiprintf_r+0x32>
 800c518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c51a:	f7ff fead 	bl	800c278 <__retarget_lock_acquire_recursive>
 800c51e:	89ab      	ldrh	r3, [r5, #12]
 800c520:	071b      	lsls	r3, r3, #28
 800c522:	d501      	bpl.n	800c528 <_vfiprintf_r+0x3c>
 800c524:	692b      	ldr	r3, [r5, #16]
 800c526:	b9eb      	cbnz	r3, 800c564 <_vfiprintf_r+0x78>
 800c528:	4629      	mov	r1, r5
 800c52a:	4630      	mov	r0, r6
 800c52c:	f7ff fc7e 	bl	800be2c <__swsetup_r>
 800c530:	b1c0      	cbz	r0, 800c564 <_vfiprintf_r+0x78>
 800c532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c534:	07dc      	lsls	r4, r3, #31
 800c536:	d50e      	bpl.n	800c556 <_vfiprintf_r+0x6a>
 800c538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c53c:	b01d      	add	sp, #116	; 0x74
 800c53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c542:	4b7b      	ldr	r3, [pc, #492]	; (800c730 <_vfiprintf_r+0x244>)
 800c544:	429d      	cmp	r5, r3
 800c546:	d101      	bne.n	800c54c <_vfiprintf_r+0x60>
 800c548:	68b5      	ldr	r5, [r6, #8]
 800c54a:	e7df      	b.n	800c50c <_vfiprintf_r+0x20>
 800c54c:	4b79      	ldr	r3, [pc, #484]	; (800c734 <_vfiprintf_r+0x248>)
 800c54e:	429d      	cmp	r5, r3
 800c550:	bf08      	it	eq
 800c552:	68f5      	ldreq	r5, [r6, #12]
 800c554:	e7da      	b.n	800c50c <_vfiprintf_r+0x20>
 800c556:	89ab      	ldrh	r3, [r5, #12]
 800c558:	0598      	lsls	r0, r3, #22
 800c55a:	d4ed      	bmi.n	800c538 <_vfiprintf_r+0x4c>
 800c55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c55e:	f7ff fe8c 	bl	800c27a <__retarget_lock_release_recursive>
 800c562:	e7e9      	b.n	800c538 <_vfiprintf_r+0x4c>
 800c564:	2300      	movs	r3, #0
 800c566:	9309      	str	r3, [sp, #36]	; 0x24
 800c568:	2320      	movs	r3, #32
 800c56a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c56e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c572:	2330      	movs	r3, #48	; 0x30
 800c574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c738 <_vfiprintf_r+0x24c>
 800c578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c57c:	f04f 0901 	mov.w	r9, #1
 800c580:	4623      	mov	r3, r4
 800c582:	469a      	mov	sl, r3
 800c584:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c588:	b10a      	cbz	r2, 800c58e <_vfiprintf_r+0xa2>
 800c58a:	2a25      	cmp	r2, #37	; 0x25
 800c58c:	d1f9      	bne.n	800c582 <_vfiprintf_r+0x96>
 800c58e:	ebba 0b04 	subs.w	fp, sl, r4
 800c592:	d00b      	beq.n	800c5ac <_vfiprintf_r+0xc0>
 800c594:	465b      	mov	r3, fp
 800c596:	4622      	mov	r2, r4
 800c598:	4629      	mov	r1, r5
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff ff93 	bl	800c4c6 <__sfputs_r>
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	f000 80aa 	beq.w	800c6fa <_vfiprintf_r+0x20e>
 800c5a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5a8:	445a      	add	r2, fp
 800c5aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f000 80a2 	beq.w	800c6fa <_vfiprintf_r+0x20e>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5c0:	f10a 0a01 	add.w	sl, sl, #1
 800c5c4:	9304      	str	r3, [sp, #16]
 800c5c6:	9307      	str	r3, [sp, #28]
 800c5c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c5ce:	4654      	mov	r4, sl
 800c5d0:	2205      	movs	r2, #5
 800c5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5d6:	4858      	ldr	r0, [pc, #352]	; (800c738 <_vfiprintf_r+0x24c>)
 800c5d8:	f7f3 fdfa 	bl	80001d0 <memchr>
 800c5dc:	9a04      	ldr	r2, [sp, #16]
 800c5de:	b9d8      	cbnz	r0, 800c618 <_vfiprintf_r+0x12c>
 800c5e0:	06d1      	lsls	r1, r2, #27
 800c5e2:	bf44      	itt	mi
 800c5e4:	2320      	movmi	r3, #32
 800c5e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ea:	0713      	lsls	r3, r2, #28
 800c5ec:	bf44      	itt	mi
 800c5ee:	232b      	movmi	r3, #43	; 0x2b
 800c5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5fa:	d015      	beq.n	800c628 <_vfiprintf_r+0x13c>
 800c5fc:	9a07      	ldr	r2, [sp, #28]
 800c5fe:	4654      	mov	r4, sl
 800c600:	2000      	movs	r0, #0
 800c602:	f04f 0c0a 	mov.w	ip, #10
 800c606:	4621      	mov	r1, r4
 800c608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c60c:	3b30      	subs	r3, #48	; 0x30
 800c60e:	2b09      	cmp	r3, #9
 800c610:	d94e      	bls.n	800c6b0 <_vfiprintf_r+0x1c4>
 800c612:	b1b0      	cbz	r0, 800c642 <_vfiprintf_r+0x156>
 800c614:	9207      	str	r2, [sp, #28]
 800c616:	e014      	b.n	800c642 <_vfiprintf_r+0x156>
 800c618:	eba0 0308 	sub.w	r3, r0, r8
 800c61c:	fa09 f303 	lsl.w	r3, r9, r3
 800c620:	4313      	orrs	r3, r2
 800c622:	9304      	str	r3, [sp, #16]
 800c624:	46a2      	mov	sl, r4
 800c626:	e7d2      	b.n	800c5ce <_vfiprintf_r+0xe2>
 800c628:	9b03      	ldr	r3, [sp, #12]
 800c62a:	1d19      	adds	r1, r3, #4
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	9103      	str	r1, [sp, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	bfbb      	ittet	lt
 800c634:	425b      	neglt	r3, r3
 800c636:	f042 0202 	orrlt.w	r2, r2, #2
 800c63a:	9307      	strge	r3, [sp, #28]
 800c63c:	9307      	strlt	r3, [sp, #28]
 800c63e:	bfb8      	it	lt
 800c640:	9204      	strlt	r2, [sp, #16]
 800c642:	7823      	ldrb	r3, [r4, #0]
 800c644:	2b2e      	cmp	r3, #46	; 0x2e
 800c646:	d10c      	bne.n	800c662 <_vfiprintf_r+0x176>
 800c648:	7863      	ldrb	r3, [r4, #1]
 800c64a:	2b2a      	cmp	r3, #42	; 0x2a
 800c64c:	d135      	bne.n	800c6ba <_vfiprintf_r+0x1ce>
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	1d1a      	adds	r2, r3, #4
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	9203      	str	r2, [sp, #12]
 800c656:	2b00      	cmp	r3, #0
 800c658:	bfb8      	it	lt
 800c65a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c65e:	3402      	adds	r4, #2
 800c660:	9305      	str	r3, [sp, #20]
 800c662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c748 <_vfiprintf_r+0x25c>
 800c666:	7821      	ldrb	r1, [r4, #0]
 800c668:	2203      	movs	r2, #3
 800c66a:	4650      	mov	r0, sl
 800c66c:	f7f3 fdb0 	bl	80001d0 <memchr>
 800c670:	b140      	cbz	r0, 800c684 <_vfiprintf_r+0x198>
 800c672:	2340      	movs	r3, #64	; 0x40
 800c674:	eba0 000a 	sub.w	r0, r0, sl
 800c678:	fa03 f000 	lsl.w	r0, r3, r0
 800c67c:	9b04      	ldr	r3, [sp, #16]
 800c67e:	4303      	orrs	r3, r0
 800c680:	3401      	adds	r4, #1
 800c682:	9304      	str	r3, [sp, #16]
 800c684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c688:	482c      	ldr	r0, [pc, #176]	; (800c73c <_vfiprintf_r+0x250>)
 800c68a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c68e:	2206      	movs	r2, #6
 800c690:	f7f3 fd9e 	bl	80001d0 <memchr>
 800c694:	2800      	cmp	r0, #0
 800c696:	d03f      	beq.n	800c718 <_vfiprintf_r+0x22c>
 800c698:	4b29      	ldr	r3, [pc, #164]	; (800c740 <_vfiprintf_r+0x254>)
 800c69a:	bb1b      	cbnz	r3, 800c6e4 <_vfiprintf_r+0x1f8>
 800c69c:	9b03      	ldr	r3, [sp, #12]
 800c69e:	3307      	adds	r3, #7
 800c6a0:	f023 0307 	bic.w	r3, r3, #7
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	9303      	str	r3, [sp, #12]
 800c6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6aa:	443b      	add	r3, r7
 800c6ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ae:	e767      	b.n	800c580 <_vfiprintf_r+0x94>
 800c6b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	2001      	movs	r0, #1
 800c6b8:	e7a5      	b.n	800c606 <_vfiprintf_r+0x11a>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	3401      	adds	r4, #1
 800c6be:	9305      	str	r3, [sp, #20]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	f04f 0c0a 	mov.w	ip, #10
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6cc:	3a30      	subs	r2, #48	; 0x30
 800c6ce:	2a09      	cmp	r2, #9
 800c6d0:	d903      	bls.n	800c6da <_vfiprintf_r+0x1ee>
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0c5      	beq.n	800c662 <_vfiprintf_r+0x176>
 800c6d6:	9105      	str	r1, [sp, #20]
 800c6d8:	e7c3      	b.n	800c662 <_vfiprintf_r+0x176>
 800c6da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6de:	4604      	mov	r4, r0
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e7f0      	b.n	800c6c6 <_vfiprintf_r+0x1da>
 800c6e4:	ab03      	add	r3, sp, #12
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	462a      	mov	r2, r5
 800c6ea:	4b16      	ldr	r3, [pc, #88]	; (800c744 <_vfiprintf_r+0x258>)
 800c6ec:	a904      	add	r1, sp, #16
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f3af 8000 	nop.w
 800c6f4:	4607      	mov	r7, r0
 800c6f6:	1c78      	adds	r0, r7, #1
 800c6f8:	d1d6      	bne.n	800c6a8 <_vfiprintf_r+0x1bc>
 800c6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6fc:	07d9      	lsls	r1, r3, #31
 800c6fe:	d405      	bmi.n	800c70c <_vfiprintf_r+0x220>
 800c700:	89ab      	ldrh	r3, [r5, #12]
 800c702:	059a      	lsls	r2, r3, #22
 800c704:	d402      	bmi.n	800c70c <_vfiprintf_r+0x220>
 800c706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c708:	f7ff fdb7 	bl	800c27a <__retarget_lock_release_recursive>
 800c70c:	89ab      	ldrh	r3, [r5, #12]
 800c70e:	065b      	lsls	r3, r3, #25
 800c710:	f53f af12 	bmi.w	800c538 <_vfiprintf_r+0x4c>
 800c714:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c716:	e711      	b.n	800c53c <_vfiprintf_r+0x50>
 800c718:	ab03      	add	r3, sp, #12
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	462a      	mov	r2, r5
 800c71e:	4b09      	ldr	r3, [pc, #36]	; (800c744 <_vfiprintf_r+0x258>)
 800c720:	a904      	add	r1, sp, #16
 800c722:	4630      	mov	r0, r6
 800c724:	f000 f880 	bl	800c828 <_printf_i>
 800c728:	e7e4      	b.n	800c6f4 <_vfiprintf_r+0x208>
 800c72a:	bf00      	nop
 800c72c:	0800cf1c 	.word	0x0800cf1c
 800c730:	0800cf3c 	.word	0x0800cf3c
 800c734:	0800cefc 	.word	0x0800cefc
 800c738:	0800cf5c 	.word	0x0800cf5c
 800c73c:	0800cf66 	.word	0x0800cf66
 800c740:	00000000 	.word	0x00000000
 800c744:	0800c4c7 	.word	0x0800c4c7
 800c748:	0800cf62 	.word	0x0800cf62

0800c74c <_printf_common>:
 800c74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c750:	4616      	mov	r6, r2
 800c752:	4699      	mov	r9, r3
 800c754:	688a      	ldr	r2, [r1, #8]
 800c756:	690b      	ldr	r3, [r1, #16]
 800c758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c75c:	4293      	cmp	r3, r2
 800c75e:	bfb8      	it	lt
 800c760:	4613      	movlt	r3, r2
 800c762:	6033      	str	r3, [r6, #0]
 800c764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c768:	4607      	mov	r7, r0
 800c76a:	460c      	mov	r4, r1
 800c76c:	b10a      	cbz	r2, 800c772 <_printf_common+0x26>
 800c76e:	3301      	adds	r3, #1
 800c770:	6033      	str	r3, [r6, #0]
 800c772:	6823      	ldr	r3, [r4, #0]
 800c774:	0699      	lsls	r1, r3, #26
 800c776:	bf42      	ittt	mi
 800c778:	6833      	ldrmi	r3, [r6, #0]
 800c77a:	3302      	addmi	r3, #2
 800c77c:	6033      	strmi	r3, [r6, #0]
 800c77e:	6825      	ldr	r5, [r4, #0]
 800c780:	f015 0506 	ands.w	r5, r5, #6
 800c784:	d106      	bne.n	800c794 <_printf_common+0x48>
 800c786:	f104 0a19 	add.w	sl, r4, #25
 800c78a:	68e3      	ldr	r3, [r4, #12]
 800c78c:	6832      	ldr	r2, [r6, #0]
 800c78e:	1a9b      	subs	r3, r3, r2
 800c790:	42ab      	cmp	r3, r5
 800c792:	dc26      	bgt.n	800c7e2 <_printf_common+0x96>
 800c794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c798:	1e13      	subs	r3, r2, #0
 800c79a:	6822      	ldr	r2, [r4, #0]
 800c79c:	bf18      	it	ne
 800c79e:	2301      	movne	r3, #1
 800c7a0:	0692      	lsls	r2, r2, #26
 800c7a2:	d42b      	bmi.n	800c7fc <_printf_common+0xb0>
 800c7a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	47c0      	blx	r8
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	d01e      	beq.n	800c7f0 <_printf_common+0xa4>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	68e5      	ldr	r5, [r4, #12]
 800c7b6:	6832      	ldr	r2, [r6, #0]
 800c7b8:	f003 0306 	and.w	r3, r3, #6
 800c7bc:	2b04      	cmp	r3, #4
 800c7be:	bf08      	it	eq
 800c7c0:	1aad      	subeq	r5, r5, r2
 800c7c2:	68a3      	ldr	r3, [r4, #8]
 800c7c4:	6922      	ldr	r2, [r4, #16]
 800c7c6:	bf0c      	ite	eq
 800c7c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7cc:	2500      	movne	r5, #0
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	bfc4      	itt	gt
 800c7d2:	1a9b      	subgt	r3, r3, r2
 800c7d4:	18ed      	addgt	r5, r5, r3
 800c7d6:	2600      	movs	r6, #0
 800c7d8:	341a      	adds	r4, #26
 800c7da:	42b5      	cmp	r5, r6
 800c7dc:	d11a      	bne.n	800c814 <_printf_common+0xc8>
 800c7de:	2000      	movs	r0, #0
 800c7e0:	e008      	b.n	800c7f4 <_printf_common+0xa8>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	4652      	mov	r2, sl
 800c7e6:	4649      	mov	r1, r9
 800c7e8:	4638      	mov	r0, r7
 800c7ea:	47c0      	blx	r8
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d103      	bne.n	800c7f8 <_printf_common+0xac>
 800c7f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f8:	3501      	adds	r5, #1
 800c7fa:	e7c6      	b.n	800c78a <_printf_common+0x3e>
 800c7fc:	18e1      	adds	r1, r4, r3
 800c7fe:	1c5a      	adds	r2, r3, #1
 800c800:	2030      	movs	r0, #48	; 0x30
 800c802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c806:	4422      	add	r2, r4
 800c808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c80c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c810:	3302      	adds	r3, #2
 800c812:	e7c7      	b.n	800c7a4 <_printf_common+0x58>
 800c814:	2301      	movs	r3, #1
 800c816:	4622      	mov	r2, r4
 800c818:	4649      	mov	r1, r9
 800c81a:	4638      	mov	r0, r7
 800c81c:	47c0      	blx	r8
 800c81e:	3001      	adds	r0, #1
 800c820:	d0e6      	beq.n	800c7f0 <_printf_common+0xa4>
 800c822:	3601      	adds	r6, #1
 800c824:	e7d9      	b.n	800c7da <_printf_common+0x8e>
	...

0800c828 <_printf_i>:
 800c828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c82c:	460c      	mov	r4, r1
 800c82e:	4691      	mov	r9, r2
 800c830:	7e27      	ldrb	r7, [r4, #24]
 800c832:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c834:	2f78      	cmp	r7, #120	; 0x78
 800c836:	4680      	mov	r8, r0
 800c838:	469a      	mov	sl, r3
 800c83a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c83e:	d807      	bhi.n	800c850 <_printf_i+0x28>
 800c840:	2f62      	cmp	r7, #98	; 0x62
 800c842:	d80a      	bhi.n	800c85a <_printf_i+0x32>
 800c844:	2f00      	cmp	r7, #0
 800c846:	f000 80d8 	beq.w	800c9fa <_printf_i+0x1d2>
 800c84a:	2f58      	cmp	r7, #88	; 0x58
 800c84c:	f000 80a3 	beq.w	800c996 <_printf_i+0x16e>
 800c850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c858:	e03a      	b.n	800c8d0 <_printf_i+0xa8>
 800c85a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c85e:	2b15      	cmp	r3, #21
 800c860:	d8f6      	bhi.n	800c850 <_printf_i+0x28>
 800c862:	a001      	add	r0, pc, #4	; (adr r0, 800c868 <_printf_i+0x40>)
 800c864:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c868:	0800c8c1 	.word	0x0800c8c1
 800c86c:	0800c8d5 	.word	0x0800c8d5
 800c870:	0800c851 	.word	0x0800c851
 800c874:	0800c851 	.word	0x0800c851
 800c878:	0800c851 	.word	0x0800c851
 800c87c:	0800c851 	.word	0x0800c851
 800c880:	0800c8d5 	.word	0x0800c8d5
 800c884:	0800c851 	.word	0x0800c851
 800c888:	0800c851 	.word	0x0800c851
 800c88c:	0800c851 	.word	0x0800c851
 800c890:	0800c851 	.word	0x0800c851
 800c894:	0800c9e1 	.word	0x0800c9e1
 800c898:	0800c905 	.word	0x0800c905
 800c89c:	0800c9c3 	.word	0x0800c9c3
 800c8a0:	0800c851 	.word	0x0800c851
 800c8a4:	0800c851 	.word	0x0800c851
 800c8a8:	0800ca03 	.word	0x0800ca03
 800c8ac:	0800c851 	.word	0x0800c851
 800c8b0:	0800c905 	.word	0x0800c905
 800c8b4:	0800c851 	.word	0x0800c851
 800c8b8:	0800c851 	.word	0x0800c851
 800c8bc:	0800c9cb 	.word	0x0800c9cb
 800c8c0:	680b      	ldr	r3, [r1, #0]
 800c8c2:	1d1a      	adds	r2, r3, #4
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	600a      	str	r2, [r1, #0]
 800c8c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c8cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e0a3      	b.n	800ca1c <_printf_i+0x1f4>
 800c8d4:	6825      	ldr	r5, [r4, #0]
 800c8d6:	6808      	ldr	r0, [r1, #0]
 800c8d8:	062e      	lsls	r6, r5, #24
 800c8da:	f100 0304 	add.w	r3, r0, #4
 800c8de:	d50a      	bpl.n	800c8f6 <_printf_i+0xce>
 800c8e0:	6805      	ldr	r5, [r0, #0]
 800c8e2:	600b      	str	r3, [r1, #0]
 800c8e4:	2d00      	cmp	r5, #0
 800c8e6:	da03      	bge.n	800c8f0 <_printf_i+0xc8>
 800c8e8:	232d      	movs	r3, #45	; 0x2d
 800c8ea:	426d      	negs	r5, r5
 800c8ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f0:	485e      	ldr	r0, [pc, #376]	; (800ca6c <_printf_i+0x244>)
 800c8f2:	230a      	movs	r3, #10
 800c8f4:	e019      	b.n	800c92a <_printf_i+0x102>
 800c8f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c8fa:	6805      	ldr	r5, [r0, #0]
 800c8fc:	600b      	str	r3, [r1, #0]
 800c8fe:	bf18      	it	ne
 800c900:	b22d      	sxthne	r5, r5
 800c902:	e7ef      	b.n	800c8e4 <_printf_i+0xbc>
 800c904:	680b      	ldr	r3, [r1, #0]
 800c906:	6825      	ldr	r5, [r4, #0]
 800c908:	1d18      	adds	r0, r3, #4
 800c90a:	6008      	str	r0, [r1, #0]
 800c90c:	0628      	lsls	r0, r5, #24
 800c90e:	d501      	bpl.n	800c914 <_printf_i+0xec>
 800c910:	681d      	ldr	r5, [r3, #0]
 800c912:	e002      	b.n	800c91a <_printf_i+0xf2>
 800c914:	0669      	lsls	r1, r5, #25
 800c916:	d5fb      	bpl.n	800c910 <_printf_i+0xe8>
 800c918:	881d      	ldrh	r5, [r3, #0]
 800c91a:	4854      	ldr	r0, [pc, #336]	; (800ca6c <_printf_i+0x244>)
 800c91c:	2f6f      	cmp	r7, #111	; 0x6f
 800c91e:	bf0c      	ite	eq
 800c920:	2308      	moveq	r3, #8
 800c922:	230a      	movne	r3, #10
 800c924:	2100      	movs	r1, #0
 800c926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c92a:	6866      	ldr	r6, [r4, #4]
 800c92c:	60a6      	str	r6, [r4, #8]
 800c92e:	2e00      	cmp	r6, #0
 800c930:	bfa2      	ittt	ge
 800c932:	6821      	ldrge	r1, [r4, #0]
 800c934:	f021 0104 	bicge.w	r1, r1, #4
 800c938:	6021      	strge	r1, [r4, #0]
 800c93a:	b90d      	cbnz	r5, 800c940 <_printf_i+0x118>
 800c93c:	2e00      	cmp	r6, #0
 800c93e:	d04d      	beq.n	800c9dc <_printf_i+0x1b4>
 800c940:	4616      	mov	r6, r2
 800c942:	fbb5 f1f3 	udiv	r1, r5, r3
 800c946:	fb03 5711 	mls	r7, r3, r1, r5
 800c94a:	5dc7      	ldrb	r7, [r0, r7]
 800c94c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c950:	462f      	mov	r7, r5
 800c952:	42bb      	cmp	r3, r7
 800c954:	460d      	mov	r5, r1
 800c956:	d9f4      	bls.n	800c942 <_printf_i+0x11a>
 800c958:	2b08      	cmp	r3, #8
 800c95a:	d10b      	bne.n	800c974 <_printf_i+0x14c>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	07df      	lsls	r7, r3, #31
 800c960:	d508      	bpl.n	800c974 <_printf_i+0x14c>
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	6861      	ldr	r1, [r4, #4]
 800c966:	4299      	cmp	r1, r3
 800c968:	bfde      	ittt	le
 800c96a:	2330      	movle	r3, #48	; 0x30
 800c96c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c970:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c974:	1b92      	subs	r2, r2, r6
 800c976:	6122      	str	r2, [r4, #16]
 800c978:	f8cd a000 	str.w	sl, [sp]
 800c97c:	464b      	mov	r3, r9
 800c97e:	aa03      	add	r2, sp, #12
 800c980:	4621      	mov	r1, r4
 800c982:	4640      	mov	r0, r8
 800c984:	f7ff fee2 	bl	800c74c <_printf_common>
 800c988:	3001      	adds	r0, #1
 800c98a:	d14c      	bne.n	800ca26 <_printf_i+0x1fe>
 800c98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c990:	b004      	add	sp, #16
 800c992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c996:	4835      	ldr	r0, [pc, #212]	; (800ca6c <_printf_i+0x244>)
 800c998:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	680e      	ldr	r6, [r1, #0]
 800c9a0:	061f      	lsls	r7, r3, #24
 800c9a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c9a6:	600e      	str	r6, [r1, #0]
 800c9a8:	d514      	bpl.n	800c9d4 <_printf_i+0x1ac>
 800c9aa:	07d9      	lsls	r1, r3, #31
 800c9ac:	bf44      	itt	mi
 800c9ae:	f043 0320 	orrmi.w	r3, r3, #32
 800c9b2:	6023      	strmi	r3, [r4, #0]
 800c9b4:	b91d      	cbnz	r5, 800c9be <_printf_i+0x196>
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	f023 0320 	bic.w	r3, r3, #32
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	2310      	movs	r3, #16
 800c9c0:	e7b0      	b.n	800c924 <_printf_i+0xfc>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	f043 0320 	orr.w	r3, r3, #32
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	2378      	movs	r3, #120	; 0x78
 800c9cc:	4828      	ldr	r0, [pc, #160]	; (800ca70 <_printf_i+0x248>)
 800c9ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9d2:	e7e3      	b.n	800c99c <_printf_i+0x174>
 800c9d4:	065e      	lsls	r6, r3, #25
 800c9d6:	bf48      	it	mi
 800c9d8:	b2ad      	uxthmi	r5, r5
 800c9da:	e7e6      	b.n	800c9aa <_printf_i+0x182>
 800c9dc:	4616      	mov	r6, r2
 800c9de:	e7bb      	b.n	800c958 <_printf_i+0x130>
 800c9e0:	680b      	ldr	r3, [r1, #0]
 800c9e2:	6826      	ldr	r6, [r4, #0]
 800c9e4:	6960      	ldr	r0, [r4, #20]
 800c9e6:	1d1d      	adds	r5, r3, #4
 800c9e8:	600d      	str	r5, [r1, #0]
 800c9ea:	0635      	lsls	r5, r6, #24
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	d501      	bpl.n	800c9f4 <_printf_i+0x1cc>
 800c9f0:	6018      	str	r0, [r3, #0]
 800c9f2:	e002      	b.n	800c9fa <_printf_i+0x1d2>
 800c9f4:	0671      	lsls	r1, r6, #25
 800c9f6:	d5fb      	bpl.n	800c9f0 <_printf_i+0x1c8>
 800c9f8:	8018      	strh	r0, [r3, #0]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	4616      	mov	r6, r2
 800ca00:	e7ba      	b.n	800c978 <_printf_i+0x150>
 800ca02:	680b      	ldr	r3, [r1, #0]
 800ca04:	1d1a      	adds	r2, r3, #4
 800ca06:	600a      	str	r2, [r1, #0]
 800ca08:	681e      	ldr	r6, [r3, #0]
 800ca0a:	6862      	ldr	r2, [r4, #4]
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7f3 fbde 	bl	80001d0 <memchr>
 800ca14:	b108      	cbz	r0, 800ca1a <_printf_i+0x1f2>
 800ca16:	1b80      	subs	r0, r0, r6
 800ca18:	6060      	str	r0, [r4, #4]
 800ca1a:	6863      	ldr	r3, [r4, #4]
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca24:	e7a8      	b.n	800c978 <_printf_i+0x150>
 800ca26:	6923      	ldr	r3, [r4, #16]
 800ca28:	4632      	mov	r2, r6
 800ca2a:	4649      	mov	r1, r9
 800ca2c:	4640      	mov	r0, r8
 800ca2e:	47d0      	blx	sl
 800ca30:	3001      	adds	r0, #1
 800ca32:	d0ab      	beq.n	800c98c <_printf_i+0x164>
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	079b      	lsls	r3, r3, #30
 800ca38:	d413      	bmi.n	800ca62 <_printf_i+0x23a>
 800ca3a:	68e0      	ldr	r0, [r4, #12]
 800ca3c:	9b03      	ldr	r3, [sp, #12]
 800ca3e:	4298      	cmp	r0, r3
 800ca40:	bfb8      	it	lt
 800ca42:	4618      	movlt	r0, r3
 800ca44:	e7a4      	b.n	800c990 <_printf_i+0x168>
 800ca46:	2301      	movs	r3, #1
 800ca48:	4632      	mov	r2, r6
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	47d0      	blx	sl
 800ca50:	3001      	adds	r0, #1
 800ca52:	d09b      	beq.n	800c98c <_printf_i+0x164>
 800ca54:	3501      	adds	r5, #1
 800ca56:	68e3      	ldr	r3, [r4, #12]
 800ca58:	9903      	ldr	r1, [sp, #12]
 800ca5a:	1a5b      	subs	r3, r3, r1
 800ca5c:	42ab      	cmp	r3, r5
 800ca5e:	dcf2      	bgt.n	800ca46 <_printf_i+0x21e>
 800ca60:	e7eb      	b.n	800ca3a <_printf_i+0x212>
 800ca62:	2500      	movs	r5, #0
 800ca64:	f104 0619 	add.w	r6, r4, #25
 800ca68:	e7f5      	b.n	800ca56 <_printf_i+0x22e>
 800ca6a:	bf00      	nop
 800ca6c:	0800cf6d 	.word	0x0800cf6d
 800ca70:	0800cf7e 	.word	0x0800cf7e

0800ca74 <_sbrk_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4d06      	ldr	r5, [pc, #24]	; (800ca90 <_sbrk_r+0x1c>)
 800ca78:	2300      	movs	r3, #0
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	4608      	mov	r0, r1
 800ca7e:	602b      	str	r3, [r5, #0]
 800ca80:	f7f6 f872 	bl	8002b68 <_sbrk>
 800ca84:	1c43      	adds	r3, r0, #1
 800ca86:	d102      	bne.n	800ca8e <_sbrk_r+0x1a>
 800ca88:	682b      	ldr	r3, [r5, #0]
 800ca8a:	b103      	cbz	r3, 800ca8e <_sbrk_r+0x1a>
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	bd38      	pop	{r3, r4, r5, pc}
 800ca90:	2000fb3c 	.word	0x2000fb3c

0800ca94 <__sread>:
 800ca94:	b510      	push	{r4, lr}
 800ca96:	460c      	mov	r4, r1
 800ca98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca9c:	f000 f8a0 	bl	800cbe0 <_read_r>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	bfab      	itete	ge
 800caa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800caa6:	89a3      	ldrhlt	r3, [r4, #12]
 800caa8:	181b      	addge	r3, r3, r0
 800caaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800caae:	bfac      	ite	ge
 800cab0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cab2:	81a3      	strhlt	r3, [r4, #12]
 800cab4:	bd10      	pop	{r4, pc}

0800cab6 <__swrite>:
 800cab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caba:	461f      	mov	r7, r3
 800cabc:	898b      	ldrh	r3, [r1, #12]
 800cabe:	05db      	lsls	r3, r3, #23
 800cac0:	4605      	mov	r5, r0
 800cac2:	460c      	mov	r4, r1
 800cac4:	4616      	mov	r6, r2
 800cac6:	d505      	bpl.n	800cad4 <__swrite+0x1e>
 800cac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cacc:	2302      	movs	r3, #2
 800cace:	2200      	movs	r2, #0
 800cad0:	f000 f868 	bl	800cba4 <_lseek_r>
 800cad4:	89a3      	ldrh	r3, [r4, #12]
 800cad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cade:	81a3      	strh	r3, [r4, #12]
 800cae0:	4632      	mov	r2, r6
 800cae2:	463b      	mov	r3, r7
 800cae4:	4628      	mov	r0, r5
 800cae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caea:	f000 b817 	b.w	800cb1c <_write_r>

0800caee <__sseek>:
 800caee:	b510      	push	{r4, lr}
 800caf0:	460c      	mov	r4, r1
 800caf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf6:	f000 f855 	bl	800cba4 <_lseek_r>
 800cafa:	1c43      	adds	r3, r0, #1
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	bf15      	itete	ne
 800cb00:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb0a:	81a3      	strheq	r3, [r4, #12]
 800cb0c:	bf18      	it	ne
 800cb0e:	81a3      	strhne	r3, [r4, #12]
 800cb10:	bd10      	pop	{r4, pc}

0800cb12 <__sclose>:
 800cb12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb16:	f000 b813 	b.w	800cb40 <_close_r>
	...

0800cb1c <_write_r>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4d07      	ldr	r5, [pc, #28]	; (800cb3c <_write_r+0x20>)
 800cb20:	4604      	mov	r4, r0
 800cb22:	4608      	mov	r0, r1
 800cb24:	4611      	mov	r1, r2
 800cb26:	2200      	movs	r2, #0
 800cb28:	602a      	str	r2, [r5, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	f7f5 ffcb 	bl	8002ac6 <_write>
 800cb30:	1c43      	adds	r3, r0, #1
 800cb32:	d102      	bne.n	800cb3a <_write_r+0x1e>
 800cb34:	682b      	ldr	r3, [r5, #0]
 800cb36:	b103      	cbz	r3, 800cb3a <_write_r+0x1e>
 800cb38:	6023      	str	r3, [r4, #0]
 800cb3a:	bd38      	pop	{r3, r4, r5, pc}
 800cb3c:	2000fb3c 	.word	0x2000fb3c

0800cb40 <_close_r>:
 800cb40:	b538      	push	{r3, r4, r5, lr}
 800cb42:	4d06      	ldr	r5, [pc, #24]	; (800cb5c <_close_r+0x1c>)
 800cb44:	2300      	movs	r3, #0
 800cb46:	4604      	mov	r4, r0
 800cb48:	4608      	mov	r0, r1
 800cb4a:	602b      	str	r3, [r5, #0]
 800cb4c:	f7f5 ffd7 	bl	8002afe <_close>
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	d102      	bne.n	800cb5a <_close_r+0x1a>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	b103      	cbz	r3, 800cb5a <_close_r+0x1a>
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	2000fb3c 	.word	0x2000fb3c

0800cb60 <_fstat_r>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	4d07      	ldr	r5, [pc, #28]	; (800cb80 <_fstat_r+0x20>)
 800cb64:	2300      	movs	r3, #0
 800cb66:	4604      	mov	r4, r0
 800cb68:	4608      	mov	r0, r1
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	602b      	str	r3, [r5, #0]
 800cb6e:	f7f5 ffd2 	bl	8002b16 <_fstat>
 800cb72:	1c43      	adds	r3, r0, #1
 800cb74:	d102      	bne.n	800cb7c <_fstat_r+0x1c>
 800cb76:	682b      	ldr	r3, [r5, #0]
 800cb78:	b103      	cbz	r3, 800cb7c <_fstat_r+0x1c>
 800cb7a:	6023      	str	r3, [r4, #0]
 800cb7c:	bd38      	pop	{r3, r4, r5, pc}
 800cb7e:	bf00      	nop
 800cb80:	2000fb3c 	.word	0x2000fb3c

0800cb84 <_isatty_r>:
 800cb84:	b538      	push	{r3, r4, r5, lr}
 800cb86:	4d06      	ldr	r5, [pc, #24]	; (800cba0 <_isatty_r+0x1c>)
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	4608      	mov	r0, r1
 800cb8e:	602b      	str	r3, [r5, #0]
 800cb90:	f7f5 ffd1 	bl	8002b36 <_isatty>
 800cb94:	1c43      	adds	r3, r0, #1
 800cb96:	d102      	bne.n	800cb9e <_isatty_r+0x1a>
 800cb98:	682b      	ldr	r3, [r5, #0]
 800cb9a:	b103      	cbz	r3, 800cb9e <_isatty_r+0x1a>
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	bd38      	pop	{r3, r4, r5, pc}
 800cba0:	2000fb3c 	.word	0x2000fb3c

0800cba4 <_lseek_r>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4d07      	ldr	r5, [pc, #28]	; (800cbc4 <_lseek_r+0x20>)
 800cba8:	4604      	mov	r4, r0
 800cbaa:	4608      	mov	r0, r1
 800cbac:	4611      	mov	r1, r2
 800cbae:	2200      	movs	r2, #0
 800cbb0:	602a      	str	r2, [r5, #0]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	f7f5 ffca 	bl	8002b4c <_lseek>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	d102      	bne.n	800cbc2 <_lseek_r+0x1e>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	b103      	cbz	r3, 800cbc2 <_lseek_r+0x1e>
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	bd38      	pop	{r3, r4, r5, pc}
 800cbc4:	2000fb3c 	.word	0x2000fb3c

0800cbc8 <__malloc_lock>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	; (800cbd0 <__malloc_lock+0x8>)
 800cbca:	f7ff bb55 	b.w	800c278 <__retarget_lock_acquire_recursive>
 800cbce:	bf00      	nop
 800cbd0:	2000fb34 	.word	0x2000fb34

0800cbd4 <__malloc_unlock>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <__malloc_unlock+0x8>)
 800cbd6:	f7ff bb50 	b.w	800c27a <__retarget_lock_release_recursive>
 800cbda:	bf00      	nop
 800cbdc:	2000fb34 	.word	0x2000fb34

0800cbe0 <_read_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	4d07      	ldr	r5, [pc, #28]	; (800cc00 <_read_r+0x20>)
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	4608      	mov	r0, r1
 800cbe8:	4611      	mov	r1, r2
 800cbea:	2200      	movs	r2, #0
 800cbec:	602a      	str	r2, [r5, #0]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	f7f5 ff4c 	bl	8002a8c <_read>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_read_r+0x1e>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_read_r+0x1e>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	2000fb3c 	.word	0x2000fb3c

0800cc04 <_init>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	bf00      	nop
 800cc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc0a:	bc08      	pop	{r3}
 800cc0c:	469e      	mov	lr, r3
 800cc0e:	4770      	bx	lr

0800cc10 <_fini>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	bf00      	nop
 800cc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc16:	bc08      	pop	{r3}
 800cc18:	469e      	mov	lr, r3
 800cc1a:	4770      	bx	lr
